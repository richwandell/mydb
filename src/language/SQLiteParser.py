# Generated from SQLiteParser.g4 by ANTLR 4.9.3
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00c2")
        buf.write("\u0800\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\3")
        buf.write("\2\7\2\u00e2\n\2\f\2\16\2\u00e5\13\2\3\2\3\2\3\3\7\3\u00ea")
        buf.write("\n\3\f\3\16\3\u00ed\13\3\3\3\3\3\6\3\u00f1\n\3\r\3\16")
        buf.write("\3\u00f2\3\3\7\3\u00f6\n\3\f\3\16\3\u00f9\13\3\3\3\7\3")
        buf.write("\u00fc\n\3\f\3\16\3\u00ff\13\3\3\4\3\4\3\4\5\4\u0104\n")
        buf.write("\4\5\4\u0106\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\5\4\u0120\n\4\3\5\3\5\3\5\3\5\3\5\5\5\u0127\n\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\5\5\u012e\n\5\3\5\3\5\3\5\3\5\5\5\u0134")
        buf.write("\n\5\3\5\3\5\5\5\u0138\n\5\3\5\3\5\3\5\5\5\u013d\n\5\3")
        buf.write("\5\5\5\u0140\n\5\3\6\3\6\3\6\3\6\3\6\5\6\u0147\n\6\3\6")
        buf.write("\5\6\u014a\n\6\3\7\3\7\5\7\u014e\n\7\3\7\3\7\3\7\3\7\3")
        buf.write("\b\3\b\5\b\u0156\n\b\3\b\3\b\5\b\u015a\n\b\5\b\u015c\n")
        buf.write("\b\3\t\3\t\5\t\u0160\n\t\3\n\3\n\5\n\u0164\n\n\3\n\3\n")
        buf.write("\5\n\u0168\n\n\3\n\5\n\u016b\n\n\3\13\3\13\3\13\3\f\3")
        buf.write("\f\5\f\u0172\n\f\3\f\3\f\3\r\3\r\5\r\u0178\n\r\3\r\3\r")
        buf.write("\3\r\3\r\5\r\u017e\n\r\3\r\3\r\3\r\5\r\u0183\n\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\7\r\u018c\n\r\f\r\16\r\u018f\13")
        buf.write("\r\3\r\3\r\3\r\5\r\u0194\n\r\3\16\3\16\5\16\u0198\n\16")
        buf.write("\3\16\3\16\5\16\u019c\n\16\3\16\5\16\u019f\n\16\3\17\3")
        buf.write("\17\5\17\u01a3\n\17\3\17\3\17\3\17\3\17\5\17\u01a9\n\17")
        buf.write("\3\17\3\17\3\17\5\17\u01ae\n\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\7\17\u01b5\n\17\f\17\16\17\u01b8\13\17\3\17\3\17\7")
        buf.write("\17\u01bc\n\17\f\17\16\17\u01bf\13\17\3\17\3\17\3\17\5")
        buf.write("\17\u01c4\n\17\3\17\3\17\5\17\u01c8\n\17\3\20\3\20\5\20")
        buf.write("\u01cc\n\20\3\20\7\20\u01cf\n\20\f\20\16\20\u01d2\13\20")
        buf.write("\3\21\6\21\u01d5\n\21\r\21\16\21\u01d6\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u01e3\n\21\3")
        buf.write("\22\3\22\5\22\u01e7\n\22\3\22\3\22\3\22\5\22\u01ec\n\22")
        buf.write("\3\22\5\22\u01ef\n\22\3\22\5\22\u01f2\n\22\3\22\3\22\3")
        buf.write("\22\5\22\u01f7\n\22\3\22\5\22\u01fa\n\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0208")
        buf.write("\n\22\3\22\3\22\3\22\3\22\3\22\5\22\u020f\n\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\5\22\u0216\n\22\5\22\u0218\n\22\3\23")
        buf.write("\5\23\u021b\n\23\3\23\3\23\3\24\3\24\5\24\u0221\n\24\3")
        buf.write("\24\3\24\3\24\5\24\u0226\n\24\3\24\3\24\3\24\3\24\7\24")
        buf.write("\u022c\n\24\f\24\16\24\u022f\13\24\3\24\3\24\5\24\u0233")
        buf.write("\n\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\7\24\u0240\n\24\f\24\16\24\u0243\13\24\3\24\3\24")
        buf.write("\3\24\5\24\u0248\n\24\3\25\3\25\3\25\3\25\3\25\3\25\7")
        buf.write("\25\u0250\n\25\f\25\16\25\u0253\13\25\3\25\3\25\5\25\u0257")
        buf.write("\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u0261")
        buf.write("\n\25\3\25\3\25\7\25\u0265\n\25\f\25\16\25\u0268\13\25")
        buf.write("\3\25\5\25\u026b\n\25\3\25\3\25\3\25\5\25\u0270\n\25\5")
        buf.write("\25\u0272\n\25\3\26\3\26\3\26\3\26\3\27\3\27\5\27\u027a")
        buf.write("\n\27\3\27\3\27\3\27\3\27\5\27\u0280\n\27\3\27\3\27\3")
        buf.write("\27\5\27\u0285\n\27\3\27\3\27\3\27\3\27\3\27\5\27\u028c")
        buf.write("\n\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\7\27\u0295\n")
        buf.write("\27\f\27\16\27\u0298\13\27\5\27\u029a\n\27\5\27\u029c")
        buf.write("\n\27\3\27\3\27\3\27\3\27\3\27\5\27\u02a3\n\27\3\27\3")
        buf.write("\27\5\27\u02a7\n\27\3\27\3\27\3\27\3\27\3\27\5\27\u02ae")
        buf.write("\n\27\3\27\3\27\6\27\u02b2\n\27\r\27\16\27\u02b3\3\27")
        buf.write("\3\27\3\30\3\30\5\30\u02ba\n\30\3\30\3\30\3\30\3\30\5")
        buf.write("\30\u02c0\n\30\3\30\3\30\3\30\5\30\u02c5\n\30\3\30\3\30")
        buf.write("\3\30\3\30\3\30\7\30\u02cc\n\30\f\30\16\30\u02cf\13\30")
        buf.write("\3\30\3\30\5\30\u02d3\n\30\3\30\3\30\3\30\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\5\31\u02de\n\31\3\31\3\31\3\31\5\31")
        buf.write("\u02e3\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\7\31\u02ec")
        buf.write("\n\31\f\31\16\31\u02ef\13\31\3\31\3\31\5\31\u02f3\n\31")
        buf.write("\3\32\3\32\5\32\u02f7\n\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u0305\n\32\f\32")
        buf.write("\16\32\u0308\13\32\3\33\3\33\3\33\3\33\3\33\7\33\u030f")
        buf.write("\n\33\f\33\16\33\u0312\13\33\3\33\3\33\5\33\u0316\n\33")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u031e\n\34\3\34\3")
        buf.write("\34\3\34\3\35\3\35\3\35\3\35\3\35\7\35\u0328\n\35\f\35")
        buf.write("\16\35\u032b\13\35\3\35\3\35\5\35\u032f\n\35\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\36\5\36\u0337\n\36\3\36\3\36\3\36\3")
        buf.write("\36\3\36\5\36\u033e\n\36\3\37\5\37\u0341\n\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\5\37\u0348\n\37\3\37\5\37\u034b\n\37\3")
        buf.write("\37\5\37\u034e\n\37\3 \3 \5 \u0352\n \3 \3 \3!\3!\3!\3")
        buf.write("!\5!\u035a\n!\3!\3!\3!\5!\u035f\n!\3!\3!\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\5\"\u0369\n\"\3\"\3\"\3\"\5\"\u036e\n\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0377\n\"\3\"\3\"\3\"\7\"")
        buf.write("\u037c\n\"\f\"\16\"\u037f\13\"\3\"\5\"\u0382\n\"\3\"\3")
        buf.write("\"\5\"\u0386\n\"\3\"\5\"\u0389\n\"\3\"\3\"\3\"\3\"\7\"")
        buf.write("\u038f\n\"\f\"\16\"\u0392\13\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\5\"\u039e\n\"\3\"\5\"\u03a1\n\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\5\"\u03a9\n\"\3\"\3\"\3\"\3\"\3\"\6")
        buf.write("\"\u03b0\n\"\r\"\16\"\u03b1\3\"\3\"\5\"\u03b6\n\"\3\"")
        buf.write("\3\"\3\"\5\"\u03bb\n\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u03d9\n\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u03e5\n\"\3\"\3\"\3\"\5")
        buf.write("\"\u03ea\n\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5")
        buf.write("\"\u03f6\n\"\3\"\3\"\3\"\3\"\5\"\u03fc\n\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\5\"\u0403\n\"\3\"\3\"\5\"\u0407\n\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\7\"\u040f\n\"\f\"\16\"\u0412\13\"\5\"\u0414")
        buf.write("\n\"\3\"\3\"\3\"\3\"\5\"\u041a\n\"\3\"\3\"\3\"\3\"\5\"")
        buf.write("\u0420\n\"\3\"\3\"\3\"\3\"\3\"\7\"\u0427\n\"\f\"\16\"")
        buf.write("\u042a\13\"\5\"\u042c\n\"\3\"\3\"\5\"\u0430\n\"\7\"\u0432")
        buf.write("\n\"\f\"\16\"\u0435\13\"\3#\3#\3#\3#\3#\3#\5#\u043d\n")
        buf.write("#\3#\3#\3$\3$\3%\5%\u0444\n%\3%\3%\3%\3%\3%\5%\u044b\n")
        buf.write("%\3%\3%\3%\3%\5%\u0451\n%\3%\3%\3%\5%\u0456\n%\3%\3%\3")
        buf.write("%\3%\7%\u045c\n%\f%\16%\u045f\13%\3%\3%\5%\u0463\n%\3")
        buf.write("%\3%\3%\3%\3%\7%\u046a\n%\f%\16%\u046d\13%\3%\3%\3%\3")
        buf.write("%\3%\3%\7%\u0475\n%\f%\16%\u0478\13%\3%\3%\7%\u047c\n")
        buf.write("%\f%\16%\u047f\13%\3%\5%\u0482\n%\3%\5%\u0485\n%\3%\3")
        buf.write("%\5%\u0489\n%\3&\3&\3&\3&\3&\3&\7&\u0491\n&\f&\16&\u0494")
        buf.write("\13&\3&\3&\3&\5&\u0499\n&\5&\u049b\n&\3&\3&\3&\3&\3&\3")
        buf.write("&\5&\u04a3\n&\3&\3&\3&\3&\3&\5&\u04aa\n&\3&\3&\3&\7&\u04af")
        buf.write("\n&\f&\16&\u04b2\13&\3&\3&\5&\u04b6\n&\5&\u04b8\n&\3\'")
        buf.write("\3\'\3\'\3\'\5\'\u04be\n\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write("\5\'\u04c7\n\'\3(\3(\3(\5(\u04cc\n(\3)\3)\3)\3)\3)\5)")
        buf.write("\u04d3\n)\3)\3)\5)\u04d7\n)\5)\u04d9\n)\3*\5*\u04dc\n")
        buf.write("*\3*\3*\3*\3*\7*\u04e2\n*\f*\16*\u04e5\13*\3*\5*\u04e8")
        buf.write("\n*\3*\5*\u04eb\n*\3+\3+\3+\3+\5+\u04f1\n+\7+\u04f3\n")
        buf.write("+\f+\16+\u04f6\13+\3,\3,\5,\u04fa\n,\3,\3,\3,\7,\u04ff")
        buf.write("\n,\f,\16,\u0502\13,\3,\3,\3,\3,\7,\u0508\n,\f,\16,\u050b")
        buf.write("\13,\3,\5,\u050e\n,\5,\u0510\n,\3,\3,\5,\u0514\n,\3,\3")
        buf.write(",\3,\3,\3,\7,\u051b\n,\f,\16,\u051e\13,\3,\3,\5,\u0522")
        buf.write("\n,\5,\u0524\n,\3,\3,\3,\3,\3,\3,\3,\3,\3,\7,\u052f\n")
        buf.write(",\f,\16,\u0532\13,\5,\u0534\n,\3,\3,\3,\3,\3,\7,\u053b")
        buf.write("\n,\f,\16,\u053e\13,\3,\3,\3,\3,\3,\3,\7,\u0546\n,\f,")
        buf.write("\16,\u0549\13,\3,\3,\7,\u054d\n,\f,\16,\u0550\13,\5,\u0552")
        buf.write("\n,\3-\3-\3.\5.\u0557\n.\3.\3.\5.\u055b\n.\3.\5.\u055e")
        buf.write("\n.\3/\5/\u0561\n/\3/\3/\3/\5/\u0566\n/\3/\3/\5/\u056a")
        buf.write("\n/\3/\6/\u056d\n/\r/\16/\u056e\3/\5/\u0572\n/\3/\5/\u0575")
        buf.write("\n/\3\60\3\60\3\60\5\60\u057a\n\60\3\60\3\60\5\60\u057e")
        buf.write("\n\60\3\60\5\60\u0581\n\60\3\60\3\60\3\60\3\60\3\60\5")
        buf.write("\60\u0588\n\60\3\60\3\60\3\60\5\60\u058d\n\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\7\60\u0594\n\60\f\60\16\60\u0597\13\60")
        buf.write("\3\60\3\60\5\60\u059b\n\60\3\60\5\60\u059e\n\60\3\60\3")
        buf.write("\60\3\60\3\60\7\60\u05a4\n\60\f\60\16\60\u05a7\13\60\3")
        buf.write("\60\5\60\u05aa\n\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60")
        buf.write("\u05b2\n\60\3\60\5\60\u05b5\n\60\5\60\u05b7\n\60\3\61")
        buf.write("\3\61\3\61\3\61\3\61\3\61\3\61\5\61\u05c0\n\61\3\61\5")
        buf.write("\61\u05c3\n\61\5\61\u05c5\n\61\3\62\3\62\5\62\u05c9\n")
        buf.write("\62\3\62\3\62\5\62\u05cd\n\62\3\62\3\62\5\62\u05d1\n\62")
        buf.write("\3\62\5\62\u05d4\n\62\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\7\63\u05dd\n\63\f\63\16\63\u05e0\13\63\3\63\3\63\5")
        buf.write("\63\u05e4\n\63\3\64\3\64\5\64\u05e8\n\64\3\64\3\64\5\64")
        buf.write("\u05ec\n\64\3\65\5\65\u05ef\n\65\3\65\3\65\3\65\5\65\u05f4")
        buf.write("\n\65\3\65\3\65\3\65\3\65\5\65\u05fa\n\65\3\65\3\65\3")
        buf.write("\65\3\65\3\65\5\65\u0601\n\65\3\65\3\65\3\65\7\65\u0606")
        buf.write("\n\65\f\65\16\65\u0609\13\65\3\65\3\65\5\65\u060d\n\65")
        buf.write("\3\66\3\66\3\66\3\66\7\66\u0613\n\66\f\66\16\66\u0616")
        buf.write("\13\66\3\66\3\66\3\67\5\67\u061b\n\67\3\67\3\67\3\67\5")
        buf.write("\67\u0620\n\67\3\67\3\67\3\67\3\67\5\67\u0626\n\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\5\67\u062d\n\67\3\67\3\67\3\67\7")
        buf.write("\67\u0632\n\67\f\67\16\67\u0635\13\67\3\67\3\67\5\67\u0639")
        buf.write("\n\67\3\67\5\67\u063c\n\67\3\67\5\67\u063f\n\67\38\38")
        buf.write("\38\58\u0644\n8\38\38\38\58\u0649\n8\38\38\38\38\38\5")
        buf.write("8\u0650\n8\39\39\59\u0654\n9\39\39\59\u0658\n9\3:\3:\3")
        buf.write(":\3:\3:\3:\3;\3;\5;\u0662\n;\3;\3;\3;\3;\3;\7;\u0669\n")
        buf.write(";\f;\16;\u066c\13;\5;\u066e\n;\3;\3;\3;\3;\3;\7;\u0675")
        buf.write("\n;\f;\16;\u0678\13;\3;\5;\u067b\n;\3;\3;\3<\3<\3<\3<")
        buf.write("\5<\u0683\n<\3<\3<\3<\3<\3<\7<\u068a\n<\f<\16<\u068d\13")
        buf.write("<\5<\u068f\n<\3<\3<\3<\3<\3<\7<\u0696\n<\f<\16<\u0699")
        buf.write("\13<\5<\u069b\n<\3<\5<\u069e\n<\3<\5<\u06a1\n<\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\5=\u06ab\n=\3>\3>\3>\3>\3>\3>\3>\5>\u06b4")
        buf.write("\n>\3?\3?\3?\3?\3?\7?\u06bb\n?\f?\16?\u06be\13?\3?\5?")
        buf.write("\u06c1\n?\3?\3?\3@\3@\3@\5@\u06c8\n@\3@\3@\3@\7@\u06cd")
        buf.write("\n@\f@\16@\u06d0\13@\3@\5@\u06d3\n@\3@\3@\5@\u06d7\n@")
        buf.write("\3A\3A\3A\3A\3A\7A\u06de\nA\fA\16A\u06e1\13A\3A\5A\u06e4")
        buf.write("\nA\3A\3A\5A\u06e8\nA\3A\3A\3A\5A\u06ed\nA\3B\3B\5B\u06f1")
        buf.write("\nB\3B\3B\3B\7B\u06f6\nB\fB\16B\u06f9\13B\3C\3C\3C\3C")
        buf.write("\3C\7C\u0700\nC\fC\16C\u0703\13C\3D\3D\3D\3D\5D\u0709")
        buf.write("\nD\3E\3E\3E\5E\u070e\nE\3E\5E\u0711\nE\3E\3E\5E\u0715")
        buf.write("\nE\3F\3F\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\5G\u0723\nG\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u072f\nH\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\5I\u0738\nI\3J\3J\3J\3J\3J\3J\3J\5J\u0741\nJ\3")
        buf.write("J\3J\5J\u0745\nJ\3J\3J\3J\3J\3J\3J\3J\3J\5J\u074f\nJ\3")
        buf.write("J\5J\u0752\nJ\3J\3J\3J\3J\3J\3J\3J\5J\u075b\nJ\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\5J\u0764\nJ\3J\5J\u0767\nJ\3J\3J\3J\3J\5")
        buf.write("J\u076d\nJ\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u077b")
        buf.write("\nJ\3J\3J\5J\u077f\nJ\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u078a")
        buf.write("\nJ\3J\3J\3J\5J\u078f\nJ\3K\3K\3K\3L\3L\3L\3M\3M\3M\6")
        buf.write("M\u079a\nM\rM\16M\u079b\3N\3N\3N\6N\u07a1\nN\rN\16N\u07a2")
        buf.write("\3O\3O\3O\3O\3P\3P\5P\u07ab\nP\3P\3P\3P\5P\u07b0\nP\7")
        buf.write("P\u07b2\nP\fP\16P\u07b5\13P\3Q\3Q\3R\3R\3S\3S\3T\3T\3")
        buf.write("U\3U\5U\u07c1\nU\3V\3V\3W\3W\3X\3X\3Y\3Y\3Z\3Z\3[\3[\3")
        buf.write("\\\3\\\3]\3]\3^\3^\3_\3_\3`\3`\3a\3a\3b\3b\3c\3c\3d\3")
        buf.write("d\3e\3e\3f\3f\3g\3g\3h\3h\3i\3i\3j\3j\3k\3k\3l\3l\3m\3")
        buf.write("m\3n\3n\3o\3o\3p\3p\3p\3p\3p\3p\3p\5p\u07fe\np\3p\4\u01b6")
        buf.write("\u01d6\3Bq\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$")
        buf.write("&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|")
        buf.write("~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4")
        buf.write("\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6")
        buf.write("\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8")
        buf.write("\u00da\u00dc\u00de\2\36\5\2<<GGTT\4\2\61\61DD\3\2\u0086")
        buf.write("\u0087\4\2\u0093\u0093\u00ac\u00ac\3\2\n\13\4\2==\u008e")
        buf.write("\u008e\4\2::jj\4\2<<TT\7\2\33\33JJSS||\177\177\6\2VV\u0085")
        buf.write("\u0085\u008b\u008b\u0092\u0092\4\2\t\t\16\17\3\2\20\23")
        buf.write("\3\2\24\27\6\2OOcceexx\5\2\33\33JJ\177\177\7\2\668jj\u00ad")
        buf.write("\u00ae\u00bb\u00bb\u00bd\u00be\4\2\37\37@@\5\2\u0081\u0081")
        buf.write("\u009b\u009b\u00b4\u00b4\4\2\7\7ll\3\2\u00b1\u00b2\4\2")
        buf.write("$$>>\4\2\u0098\u0098\u00a3\u00a3\4\2\u00a0\u00a0\u00a7")
        buf.write("\u00a7\4\2\u00a1\u00a1\u00a8\u00a9\4\2\u00a2\u00a2\u00a4")
        buf.write("\u00a4\4\2\n\fhh\4\2\u00ba\u00ba\u00bd\u00bd\3\2\33\u00b5")
        buf.write("\2\u0916\2\u00e3\3\2\2\2\4\u00eb\3\2\2\2\6\u0105\3\2\2")
        buf.write("\2\b\u0121\3\2\2\2\n\u0141\3\2\2\2\f\u014b\3\2\2\2\16")
        buf.write("\u0153\3\2\2\2\20\u015d\3\2\2\2\22\u0161\3\2\2\2\24\u016c")
        buf.write("\3\2\2\2\26\u016f\3\2\2\2\30\u0175\3\2\2\2\32\u0197\3")
        buf.write("\2\2\2\34\u01a0\3\2\2\2\36\u01c9\3\2\2\2 \u01d4\3\2\2")
        buf.write("\2\"\u01e6\3\2\2\2$\u021a\3\2\2\2&\u0220\3\2\2\2(\u0249")
        buf.write("\3\2\2\2*\u0273\3\2\2\2,\u0277\3\2\2\2.\u02b7\3\2\2\2")
        buf.write("\60\u02d7\3\2\2\2\62\u02f4\3\2\2\2\64\u0309\3\2\2\2\66")
        buf.write("\u0317\3\2\2\28\u0322\3\2\2\2:\u0336\3\2\2\2<\u0340\3")
        buf.write("\2\2\2>\u034f\3\2\2\2@\u0355\3\2\2\2B\u03ba\3\2\2\2D\u0436")
        buf.write("\3\2\2\2F\u0440\3\2\2\2H\u0488\3\2\2\2J\u048a\3\2\2\2")
        buf.write("L\u04b9\3\2\2\2N\u04cb\3\2\2\2P\u04cd\3\2\2\2R\u04db\3")
        buf.write("\2\2\2T\u04ec\3\2\2\2V\u0551\3\2\2\2X\u0553\3\2\2\2Z\u0556")
        buf.write("\3\2\2\2\\\u0560\3\2\2\2^\u05b6\3\2\2\2`\u05c4\3\2\2\2")
        buf.write("b\u05d3\3\2\2\2d\u05e3\3\2\2\2f\u05eb\3\2\2\2h\u05ee\3")
        buf.write("\2\2\2j\u060e\3\2\2\2l\u061a\3\2\2\2n\u0643\3\2\2\2p\u0651")
        buf.write("\3\2\2\2r\u0659\3\2\2\2t\u065f\3\2\2\2v\u067e\3\2\2\2")
        buf.write("x\u06a2\3\2\2\2z\u06ac\3\2\2\2|\u06b5\3\2\2\2~\u06c4\3")
        buf.write("\2\2\2\u0080\u06d8\3\2\2\2\u0082\u06ee\3\2\2\2\u0084\u06fa")
        buf.write("\3\2\2\2\u0086\u0704\3\2\2\2\u0088\u070a\3\2\2\2\u008a")
        buf.write("\u0716\3\2\2\2\u008c\u0722\3\2\2\2\u008e\u072e\3\2\2\2")
        buf.write("\u0090\u0737\3\2\2\2\u0092\u078e\3\2\2\2\u0094\u0790\3")
        buf.write("\2\2\2\u0096\u0793\3\2\2\2\u0098\u0796\3\2\2\2\u009a\u079d")
        buf.write("\3\2\2\2\u009c\u07a4\3\2\2\2\u009e\u07a8\3\2\2\2\u00a0")
        buf.write("\u07b6\3\2\2\2\u00a2\u07b8\3\2\2\2\u00a4\u07ba\3\2\2\2")
        buf.write("\u00a6\u07bc\3\2\2\2\u00a8\u07c0\3\2\2\2\u00aa\u07c2\3")
        buf.write("\2\2\2\u00ac\u07c4\3\2\2\2\u00ae\u07c6\3\2\2\2\u00b0\u07c8")
        buf.write("\3\2\2\2\u00b2\u07ca\3\2\2\2\u00b4\u07cc\3\2\2\2\u00b6")
        buf.write("\u07ce\3\2\2\2\u00b8\u07d0\3\2\2\2\u00ba\u07d2\3\2\2\2")
        buf.write("\u00bc\u07d4\3\2\2\2\u00be\u07d6\3\2\2\2\u00c0\u07d8\3")
        buf.write("\2\2\2\u00c2\u07da\3\2\2\2\u00c4\u07dc\3\2\2\2\u00c6\u07de")
        buf.write("\3\2\2\2\u00c8\u07e0\3\2\2\2\u00ca\u07e2\3\2\2\2\u00cc")
        buf.write("\u07e4\3\2\2\2\u00ce\u07e6\3\2\2\2\u00d0\u07e8\3\2\2\2")
        buf.write("\u00d2\u07ea\3\2\2\2\u00d4\u07ec\3\2\2\2\u00d6\u07ee\3")
        buf.write("\2\2\2\u00d8\u07f0\3\2\2\2\u00da\u07f2\3\2\2\2\u00dc\u07f4")
        buf.write("\3\2\2\2\u00de\u07fd\3\2\2\2\u00e0\u00e2\5\4\3\2\u00e1")
        buf.write("\u00e0\3\2\2\2\u00e2\u00e5\3\2\2\2\u00e3\u00e1\3\2\2\2")
        buf.write("\u00e3\u00e4\3\2\2\2\u00e4\u00e6\3\2\2\2\u00e5\u00e3\3")
        buf.write("\2\2\2\u00e6\u00e7\7\2\2\3\u00e7\3\3\2\2\2\u00e8\u00ea")
        buf.write("\7\3\2\2\u00e9\u00e8\3\2\2\2\u00ea\u00ed\3\2\2\2\u00eb")
        buf.write("\u00e9\3\2\2\2\u00eb\u00ec\3\2\2\2\u00ec\u00ee\3\2\2\2")
        buf.write("\u00ed\u00eb\3\2\2\2\u00ee\u00f7\5\6\4\2\u00ef\u00f1\7")
        buf.write("\3\2\2\u00f0\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2\u00f2\u00f0")
        buf.write("\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\u00f4\3\2\2\2\u00f4")
        buf.write("\u00f6\5\6\4\2\u00f5\u00f0\3\2\2\2\u00f6\u00f9\3\2\2\2")
        buf.write("\u00f7\u00f5\3\2\2\2\u00f7\u00f8\3\2\2\2\u00f8\u00fd\3")
        buf.write("\2\2\2\u00f9\u00f7\3\2\2\2\u00fa\u00fc\7\3\2\2\u00fb\u00fa")
        buf.write("\3\2\2\2\u00fc\u00ff\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd")
        buf.write("\u00fe\3\2\2\2\u00fe\5\3\2\2\2\u00ff\u00fd\3\2\2\2\u0100")
        buf.write("\u0103\7I\2\2\u0101\u0102\7t\2\2\u0102\u0104\7q\2\2\u0103")
        buf.write("\u0101\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0106\3\2\2\2")
        buf.write("\u0105\u0100\3\2\2\2\u0105\u0106\3\2\2\2\u0106\u011f\3")
        buf.write("\2\2\2\u0107\u0120\5\b\5\2\u0108\u0120\5\n\6\2\u0109\u0120")
        buf.write("\5\f\7\2\u010a\u0120\5\16\b\2\u010b\u0120\5\20\t\2\u010c")
        buf.write("\u0120\5\30\r\2\u010d\u0120\5\34\17\2\u010e\u0120\5,\27")
        buf.write("\2\u010f\u0120\5.\30\2\u0110\u0120\5\60\31\2\u0111\u0120")
        buf.write("\5:\36\2\u0112\u0120\5<\37\2\u0113\u0120\5> \2\u0114\u0120")
        buf.write("\5@!\2\u0115\u0120\5H%\2\u0116\u0120\5L\'\2\u0117\u0120")
        buf.write("\5P)\2\u0118\u0120\5\26\f\2\u0119\u0120\5\22\n\2\u011a")
        buf.write("\u0120\5\24\13\2\u011b\u0120\5R*\2\u011c\u0120\5h\65\2")
        buf.write("\u011d\u0120\5l\67\2\u011e\u0120\5p9\2\u011f\u0107\3\2")
        buf.write("\2\2\u011f\u0108\3\2\2\2\u011f\u0109\3\2\2\2\u011f\u010a")
        buf.write("\3\2\2\2\u011f\u010b\3\2\2\2\u011f\u010c\3\2\2\2\u011f")
        buf.write("\u010d\3\2\2\2\u011f\u010e\3\2\2\2\u011f\u010f\3\2\2\2")
        buf.write("\u011f\u0110\3\2\2\2\u011f\u0111\3\2\2\2\u011f\u0112\3")
        buf.write("\2\2\2\u011f\u0113\3\2\2\2\u011f\u0114\3\2\2\2\u011f\u0115")
        buf.write("\3\2\2\2\u011f\u0116\3\2\2\2\u011f\u0117\3\2\2\2\u011f")
        buf.write("\u0118\3\2\2\2\u011f\u0119\3\2\2\2\u011f\u011a\3\2\2\2")
        buf.write("\u011f\u011b\3\2\2\2\u011f\u011c\3\2\2\2\u011f\u011d\3")
        buf.write("\2\2\2\u011f\u011e\3\2\2\2\u0120\7\3\2\2\2\u0121\u0122")
        buf.write("\7 \2\2\u0122\u0126\7\u0085\2\2\u0123\u0124\5\u00b2Z\2")
        buf.write("\u0124\u0125\7\4\2\2\u0125\u0127\3\2\2\2\u0126\u0123\3")
        buf.write("\2\2\2\u0126\u0127\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u013f")
        buf.write("\5\u00b4[\2\u0129\u0133\7{\2\2\u012a\u012b\7\u0089\2\2")
        buf.write("\u012b\u0134\5\u00b8]\2\u012c\u012e\7\60\2\2\u012d\u012c")
        buf.write("\3\2\2\2\u012d\u012e\3\2\2\2\u012e\u012f\3\2\2\2\u012f")
        buf.write("\u0130\5\u00ba^\2\u0130\u0131\7\u0089\2\2\u0131\u0132")
        buf.write("\5\u00ba^\2\u0132\u0134\3\2\2\2\u0133\u012a\3\2\2\2\u0133")
        buf.write("\u012d\3\2\2\2\u0134\u0140\3\2\2\2\u0135\u0137\7\35\2")
        buf.write("\2\u0136\u0138\7\60\2\2\u0137\u0136\3\2\2\2\u0137\u0138")
        buf.write("\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u0140\5\36\20\2\u013a")
        buf.write("\u013c\7A\2\2\u013b\u013d\7\60\2\2\u013c\u013b\3\2\2\2")
        buf.write("\u013c\u013d\3\2\2\2\u013d\u013e\3\2\2\2\u013e\u0140\5")
        buf.write("\u00ba^\2\u013f\u0129\3\2\2\2\u013f\u0135\3\2\2\2\u013f")
        buf.write("\u013a\3\2\2\2\u0140\t\3\2\2\2\u0141\u0149\7!\2\2\u0142")
        buf.write("\u014a\5\u00b2Z\2\u0143\u0144\5\u00b2Z\2\u0144\u0145\7")
        buf.write("\4\2\2\u0145\u0147\3\2\2\2\u0146\u0143\3\2\2\2\u0146\u0147")
        buf.write("\3\2\2\2\u0147\u0148\3\2\2\2\u0148\u014a\5\u00b6\\\2\u0149")
        buf.write("\u0142\3\2\2\2\u0149\u0146\3\2\2\2\u0149\u014a\3\2\2\2")
        buf.write("\u014a\13\3\2\2\2\u014b\u014d\7%\2\2\u014c\u014e\79\2")
        buf.write("\2\u014d\u014c\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u014f")
        buf.write("\3\2\2\2\u014f\u0150\5B\"\2\u0150\u0151\7#\2\2\u0151\u0152")
        buf.write("\5\u00b2Z\2\u0152\r\3\2\2\2\u0153\u0155\7(\2\2\u0154\u0156")
        buf.write("\t\2\2\2\u0155\u0154\3\2\2\2\u0155\u0156\3\2\2\2\u0156")
        buf.write("\u015b\3\2\2\2\u0157\u0159\7\u008a\2\2\u0158\u015a\5\u00ce")
        buf.write("h\2\u0159\u0158\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015c")
        buf.write("\3\2\2\2\u015b\u0157\3\2\2\2\u015b\u015c\3\2\2\2\u015c")
        buf.write("\17\3\2\2\2\u015d\u015f\t\3\2\2\u015e\u0160\7\u008a\2")
        buf.write("\2\u015f\u015e\3\2\2\2\u015f\u0160\3\2\2\2\u0160\21\3")
        buf.write("\2\2\2\u0161\u0163\7\177\2\2\u0162\u0164\7\u008a\2\2\u0163")
        buf.write("\u0162\3\2\2\2\u0163\u0164\3\2\2\2\u0164\u016a\3\2\2\2")
        buf.write("\u0165\u0167\7\u0089\2\2\u0166\u0168\7\u0082\2\2\u0167")
        buf.write("\u0166\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u0169\3\2\2\2")
        buf.write("\u0169\u016b\5\u00caf\2\u016a\u0165\3\2\2\2\u016a\u016b")
        buf.write("\3\2\2\2\u016b\23\3\2\2\2\u016c\u016d\7\u0082\2\2\u016d")
        buf.write("\u016e\5\u00caf\2\u016e\25\3\2\2\2\u016f\u0171\7z\2\2")
        buf.write("\u0170\u0172\7\u0082\2\2\u0171\u0170\3\2\2\2\u0171\u0172")
        buf.write("\3\2\2\2\u0172\u0173\3\2\2\2\u0173\u0174\5\u00caf\2\u0174")
        buf.write("\27\3\2\2\2\u0175\u0177\7\64\2\2\u0176\u0178\7\u008d\2")
        buf.write("\2\u0177\u0176\3\2\2\2\u0177\u0178\3\2\2\2\u0178\u0179")
        buf.write("\3\2\2\2\u0179\u017d\7V\2\2\u017a\u017b\7R\2\2\u017b\u017c")
        buf.write("\7h\2\2\u017c\u017e\7H\2\2\u017d\u017a\3\2\2\2\u017d\u017e")
        buf.write("\3\2\2\2\u017e\u0182\3\2\2\2\u017f\u0180\5\u00b2Z\2\u0180")
        buf.write("\u0181\7\4\2\2\u0181\u0183\3\2\2\2\u0182\u017f\3\2\2\2")
        buf.write("\u0182\u0183\3\2\2\2\u0183\u0184\3\2\2\2\u0184\u0185\5")
        buf.write("\u00c0a\2\u0185\u0186\7m\2\2\u0186\u0187\5\u00b4[\2\u0187")
        buf.write("\u0188\7\5\2\2\u0188\u018d\5\32\16\2\u0189\u018a\7\7\2")
        buf.write("\2\u018a\u018c\5\32\16\2\u018b\u0189\3\2\2\2\u018c\u018f")
        buf.write("\3\2\2\2\u018d\u018b\3\2\2\2\u018d\u018e\3\2\2\2\u018e")
        buf.write("\u0190\3\2\2\2\u018f\u018d\3\2\2\2\u0190\u0193\7\6\2\2")
        buf.write("\u0191\u0192\7\u0095\2\2\u0192\u0194\5B\"\2\u0193\u0191")
        buf.write("\3\2\2\2\u0193\u0194\3\2\2\2\u0194\31\3\2\2\2\u0195\u0198")
        buf.write("\5\u00ba^\2\u0196\u0198\5B\"\2\u0197\u0195\3\2\2\2\u0197")
        buf.write("\u0196\3\2\2\2\u0198\u019b\3\2\2\2\u0199\u019a\7/\2\2")
        buf.write("\u019a\u019c\5\u00bc_\2\u019b\u0199\3\2\2\2\u019b\u019c")
        buf.write("\3\2\2\2\u019c\u019e\3\2\2\2\u019d\u019f\5\u008aF\2\u019e")
        buf.write("\u019d\3\2\2\2\u019e\u019f\3\2\2\2\u019f\33\3\2\2\2\u01a0")
        buf.write("\u01a2\7\64\2\2\u01a1\u01a3\t\4\2\2\u01a2\u01a1\3\2\2")
        buf.write("\2\u01a2\u01a3\3\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a8")
        buf.write("\7\u0085\2\2\u01a5\u01a6\7R\2\2\u01a6\u01a7\7h\2\2\u01a7")
        buf.write("\u01a9\7H\2\2\u01a8\u01a5\3\2\2\2\u01a8\u01a9\3\2\2\2")
        buf.write("\u01a9\u01ad\3\2\2\2\u01aa\u01ab\5\u00b2Z\2\u01ab\u01ac")
        buf.write("\7\4\2\2\u01ac\u01ae\3\2\2\2\u01ad\u01aa\3\2\2\2\u01ad")
        buf.write("\u01ae\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01c7\5\u00b4")
        buf.write("[\2\u01b0\u01b1\7\5\2\2\u01b1\u01b6\5\36\20\2\u01b2\u01b3")
        buf.write("\7\7\2\2\u01b3\u01b5\5\36\20\2\u01b4\u01b2\3\2\2\2\u01b5")
        buf.write("\u01b8\3\2\2\2\u01b6\u01b7\3\2\2\2\u01b6\u01b4\3\2\2\2")
        buf.write("\u01b7\u01bd\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b9\u01ba\7")
        buf.write("\7\2\2\u01ba\u01bc\5&\24\2\u01bb\u01b9\3\2\2\2\u01bc\u01bf")
        buf.write("\3\2\2\2\u01bd\u01bb\3\2\2\2\u01bd\u01be\3\2\2\2\u01be")
        buf.write("\u01c0\3\2\2\2\u01bf\u01bd\3\2\2\2\u01c0\u01c3\7\6\2\2")
        buf.write("\u01c1\u01c2\7\u0097\2\2\u01c2\u01c4\7\u00ba\2\2\u01c3")
        buf.write("\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c8\3\2\2\2")
        buf.write("\u01c5\u01c6\7#\2\2\u01c6\u01c8\5R*\2\u01c7\u01b0\3\2")
        buf.write("\2\2\u01c7\u01c5\3\2\2\2\u01c8\35\3\2\2\2\u01c9\u01cb")
        buf.write("\5\u00ba^\2\u01ca\u01cc\5 \21\2\u01cb\u01ca\3\2\2\2\u01cb")
        buf.write("\u01cc\3\2\2\2\u01cc\u01d0\3\2\2\2\u01cd\u01cf\5\"\22")
        buf.write("\2\u01ce\u01cd\3\2\2\2\u01cf\u01d2\3\2\2\2\u01d0\u01ce")
        buf.write("\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\37\3\2\2\2\u01d2\u01d0")
        buf.write("\3\2\2\2\u01d3\u01d5\5\u00aeX\2\u01d4\u01d3\3\2\2\2\u01d5")
        buf.write("\u01d6\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d6\u01d4\3\2\2\2")
        buf.write("\u01d7\u01e2\3\2\2\2\u01d8\u01d9\7\5\2\2\u01d9\u01da\5")
        buf.write("$\23\2\u01da\u01db\7\6\2\2\u01db\u01e3\3\2\2\2\u01dc\u01dd")
        buf.write("\7\5\2\2\u01dd\u01de\5$\23\2\u01de\u01df\7\7\2\2\u01df")
        buf.write("\u01e0\5$\23\2\u01e0\u01e1\7\6\2\2\u01e1\u01e3\3\2\2\2")
        buf.write("\u01e2\u01d8\3\2\2\2\u01e2\u01dc\3\2\2\2\u01e2\u01e3\3")
        buf.write("\2\2\2\u01e3!\3\2\2\2\u01e4\u01e5\7\63\2\2\u01e5\u01e7")
        buf.write("\5\u00aeX\2\u01e6\u01e4\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7")
        buf.write("\u0217\3\2\2\2\u01e8\u01e9\7s\2\2\u01e9\u01eb\7a\2\2\u01ea")
        buf.write("\u01ec\5\u008aF\2\u01eb\u01ea\3\2\2\2\u01eb\u01ec\3\2")
        buf.write("\2\2\u01ec\u01ee\3\2\2\2\u01ed\u01ef\5*\26\2\u01ee\u01ed")
        buf.write("\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f1\3\2\2\2\u01f0")
        buf.write("\u01f2\7&\2\2\u01f1\u01f0\3\2\2\2\u01f1\u01f2\3\2\2\2")
        buf.write("\u01f2\u0218\3\2\2\2\u01f3\u01f4\7h\2\2\u01f4\u01f7\7")
        buf.write("j\2\2\u01f5\u01f7\7\u008d\2\2\u01f6\u01f3\3\2\2\2\u01f6")
        buf.write("\u01f5\3\2\2\2\u01f7\u01f9\3\2\2\2\u01f8\u01fa\5*\26\2")
        buf.write("\u01f9\u01f8\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u0218\3")
        buf.write("\2\2\2\u01fb\u01fc\7.\2\2\u01fc\u01fd\7\5\2\2\u01fd\u01fe")
        buf.write("\5B\"\2\u01fe\u01ff\7\6\2\2\u01ff\u0218\3\2\2\2\u0200")
        buf.write("\u0207\7:\2\2\u0201\u0208\5$\23\2\u0202\u0208\5F$\2\u0203")
        buf.write("\u0204\7\5\2\2\u0204\u0205\5B\"\2\u0205\u0206\7\6\2\2")
        buf.write("\u0206\u0208\3\2\2\2\u0207\u0201\3\2\2\2\u0207\u0202\3")
        buf.write("\2\2\2\u0207\u0203\3\2\2\2\u0208\u0218\3\2\2\2\u0209\u020a")
        buf.write("\7/\2\2\u020a\u0218\5\u00bc_\2\u020b\u0218\5(\25\2\u020c")
        buf.write("\u020d\7\u00aa\2\2\u020d\u020f\7\u00ab\2\2\u020e\u020c")
        buf.write("\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0210\3\2\2\2\u0210")
        buf.write("\u0211\7#\2\2\u0211\u0212\7\5\2\2\u0212\u0213\5B\"\2\u0213")
        buf.write("\u0215\7\6\2\2\u0214\u0216\t\5\2\2\u0215\u0214\3\2\2\2")
        buf.write("\u0215\u0216\3\2\2\2\u0216\u0218\3\2\2\2\u0217\u01e8\3")
        buf.write("\2\2\2\u0217\u01f6\3\2\2\2\u0217\u01fb\3\2\2\2\u0217\u0200")
        buf.write("\3\2\2\2\u0217\u0209\3\2\2\2\u0217\u020b\3\2\2\2\u0217")
        buf.write("\u020e\3\2\2\2\u0218#\3\2\2\2\u0219\u021b\t\6\2\2\u021a")
        buf.write("\u0219\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u021c\3\2\2\2")
        buf.write("\u021c\u021d\7\u00bb\2\2\u021d%\3\2\2\2\u021e\u021f\7")
        buf.write("\63\2\2\u021f\u0221\5\u00aeX\2\u0220\u021e\3\2\2\2\u0220")
        buf.write("\u0221\3\2\2\2\u0221\u0247\3\2\2\2\u0222\u0223\7s\2\2")
        buf.write("\u0223\u0226\7a\2\2\u0224\u0226\7\u008d\2\2\u0225\u0222")
        buf.write("\3\2\2\2\u0225\u0224\3\2\2\2\u0226\u0227\3\2\2\2\u0227")
        buf.write("\u0228\7\5\2\2\u0228\u022d\5\32\16\2\u0229\u022a\7\7\2")
        buf.write("\2\u022a\u022c\5\32\16\2\u022b\u0229\3\2\2\2\u022c\u022f")
        buf.write("\3\2\2\2\u022d\u022b\3\2\2\2\u022d\u022e\3\2\2\2\u022e")
        buf.write("\u0230\3\2\2\2\u022f\u022d\3\2\2\2\u0230\u0232\7\6\2\2")
        buf.write("\u0231\u0233\5*\26\2\u0232\u0231\3\2\2\2\u0232\u0233\3")
        buf.write("\2\2\2\u0233\u0248\3\2\2\2\u0234\u0235\7.\2\2\u0235\u0236")
        buf.write("\7\5\2\2\u0236\u0237\5B\"\2\u0237\u0238\7\6\2\2\u0238")
        buf.write("\u0248\3\2\2\2\u0239\u023a\7L\2\2\u023a\u023b\7a\2\2\u023b")
        buf.write("\u023c\7\5\2\2\u023c\u0241\5\u00ba^\2\u023d\u023e\7\7")
        buf.write("\2\2\u023e\u0240\5\u00ba^\2\u023f\u023d\3\2\2\2\u0240")
        buf.write("\u0243\3\2\2\2\u0241\u023f\3\2\2\2\u0241\u0242\3\2\2\2")
        buf.write("\u0242\u0244\3\2\2\2\u0243\u0241\3\2\2\2\u0244\u0245\7")
        buf.write("\6\2\2\u0245\u0246\5(\25\2\u0246\u0248\3\2\2\2\u0247\u0225")
        buf.write("\3\2\2\2\u0247\u0234\3\2\2\2\u0247\u0239\3\2\2\2\u0248")
        buf.write("\'\3\2\2\2\u0249\u024a\7w\2\2\u024a\u0256\5\u00be`\2\u024b")
        buf.write("\u024c\7\5\2\2\u024c\u0251\5\u00ba^\2\u024d\u024e\7\7")
        buf.write("\2\2\u024e\u0250\5\u00ba^\2\u024f\u024d\3\2\2\2\u0250")
        buf.write("\u0253\3\2\2\2\u0251\u024f\3\2\2\2\u0251\u0252\3\2\2\2")
        buf.write("\u0252\u0254\3\2\2\2\u0253\u0251\3\2\2\2\u0254\u0255\7")
        buf.write("\6\2\2\u0255\u0257\3\2\2\2\u0256\u024b\3\2\2\2\u0256\u0257")
        buf.write("\3\2\2\2\u0257\u0266\3\2\2\2\u0258\u0259\7m\2\2\u0259")
        buf.write("\u0260\t\7\2\2\u025a\u025b\7\u0084\2\2\u025b\u0261\t\b")
        buf.write("\2\2\u025c\u0261\7+\2\2\u025d\u0261\7}\2\2\u025e\u025f")
        buf.write("\7g\2\2\u025f\u0261\7\34\2\2\u0260\u025a\3\2\2\2\u0260")
        buf.write("\u025c\3\2\2\2\u0260\u025d\3\2\2\2\u0260\u025e\3\2\2\2")
        buf.write("\u0261\u0265\3\2\2\2\u0262\u0263\7e\2\2\u0263\u0265\5")
        buf.write("\u00aeX\2\u0264\u0258\3\2\2\2\u0264\u0262\3\2\2\2\u0265")
        buf.write("\u0268\3\2\2\2\u0266\u0264\3\2\2\2\u0266\u0267\3\2\2\2")
        buf.write("\u0267\u0271\3\2\2\2\u0268\u0266\3\2\2\2\u0269\u026b\7")
        buf.write("h\2\2\u026a\u0269\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026c")
        buf.write("\3\2\2\2\u026c\u026f\7;\2\2\u026d\u026e\7X\2\2\u026e\u0270")
        buf.write("\t\t\2\2\u026f\u026d\3\2\2\2\u026f\u0270\3\2\2\2\u0270")
        buf.write("\u0272\3\2\2\2\u0271\u026a\3\2\2\2\u0271\u0272\3\2\2\2")
        buf.write("\u0272)\3\2\2\2\u0273\u0274\7m\2\2\u0274\u0275\7\62\2")
        buf.write("\2\u0275\u0276\t\n\2\2\u0276+\3\2\2\2\u0277\u0279\7\64")
        buf.write("\2\2\u0278\u027a\t\4\2\2\u0279\u0278\3\2\2\2\u0279\u027a")
        buf.write("\3\2\2\2\u027a\u027b\3\2\2\2\u027b\u027f\7\u008b\2\2\u027c")
        buf.write("\u027d\7R\2\2\u027d\u027e\7h\2\2\u027e\u0280\7H\2\2\u027f")
        buf.write("\u027c\3\2\2\2\u027f\u0280\3\2\2\2\u0280\u0284\3\2\2\2")
        buf.write("\u0281\u0282\5\u00b2Z\2\u0282\u0283\7\4\2\2\u0283\u0285")
        buf.write("\3\2\2\2\u0284\u0281\3\2\2\2\u0284\u0285\3\2\2\2\u0285")
        buf.write("\u0286\3\2\2\2\u0286\u028b\5\u00c2b\2\u0287\u028c\7\'")
        buf.write("\2\2\u0288\u028c\7\36\2\2\u0289\u028a\7[\2\2\u028a\u028c")
        buf.write("\7k\2\2\u028b\u0287\3\2\2\2\u028b\u0288\3\2\2\2\u028b")
        buf.write("\u0289\3\2\2\2\u028b\u028c\3\2\2\2\u028c\u029b\3\2\2\2")
        buf.write("\u028d\u029c\7=\2\2\u028e\u029c\7Z\2\2\u028f\u0299\7\u008e")
        buf.write("\2\2\u0290\u0291\7k\2\2\u0291\u0296\5\u00ba^\2\u0292\u0293")
        buf.write("\7\7\2\2\u0293\u0295\5\u00ba^\2\u0294\u0292\3\2\2\2\u0295")
        buf.write("\u0298\3\2\2\2\u0296\u0294\3\2\2\2\u0296\u0297\3\2\2\2")
        buf.write("\u0297\u029a\3\2\2\2\u0298\u0296\3\2\2\2\u0299\u0290\3")
        buf.write("\2\2\2\u0299\u029a\3\2\2\2\u029a\u029c\3\2\2\2\u029b\u028d")
        buf.write("\3\2\2\2\u029b\u028e\3\2\2\2\u029b\u028f\3\2\2\2\u029c")
        buf.write("\u029d\3\2\2\2\u029d\u029e\7m\2\2\u029e\u02a2\5\u00b4")
        buf.write("[\2\u029f\u02a0\7K\2\2\u02a0\u02a1\7B\2\2\u02a1\u02a3")
        buf.write("\7\u0080\2\2\u02a2\u029f\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3")
        buf.write("\u02a6\3\2\2\2\u02a4\u02a5\7\u0094\2\2\u02a5\u02a7\5B")
        buf.write("\"\2\u02a6\u02a4\3\2\2\2\u02a6\u02a7\3\2\2\2\u02a7\u02a8")
        buf.write("\3\2\2\2\u02a8\u02b1\7(\2\2\u02a9\u02ae\5h\65\2\u02aa")
        buf.write("\u02ae\5H%\2\u02ab\u02ae\5:\36\2\u02ac\u02ae\5R*\2\u02ad")
        buf.write("\u02a9\3\2\2\2\u02ad\u02aa\3\2\2\2\u02ad\u02ab\3\2\2\2")
        buf.write("\u02ad\u02ac\3\2\2\2\u02ae\u02af\3\2\2\2\u02af\u02b0\7")
        buf.write("\3\2\2\u02b0\u02b2\3\2\2\2\u02b1\u02ad\3\2\2\2\u02b2\u02b3")
        buf.write("\3\2\2\2\u02b3\u02b1\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4")
        buf.write("\u02b5\3\2\2\2\u02b5\u02b6\7D\2\2\u02b6-\3\2\2\2\u02b7")
        buf.write("\u02b9\7\64\2\2\u02b8\u02ba\t\4\2\2\u02b9\u02b8\3\2\2")
        buf.write("\2\u02b9\u02ba\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bf")
        buf.write("\7\u0092\2\2\u02bc\u02bd\7R\2\2\u02bd\u02be\7h\2\2\u02be")
        buf.write("\u02c0\7H\2\2\u02bf\u02bc\3\2\2\2\u02bf\u02c0\3\2\2\2")
        buf.write("\u02c0\u02c4\3\2\2\2\u02c1\u02c2\5\u00b2Z\2\u02c2\u02c3")
        buf.write("\7\4\2\2\u02c3\u02c5\3\2\2\2\u02c4\u02c1\3\2\2\2\u02c4")
        buf.write("\u02c5\3\2\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02d2\5\u00c4")
        buf.write("c\2\u02c7\u02c8\7\5\2\2\u02c8\u02cd\5\u00ba^\2\u02c9\u02ca")
        buf.write("\7\7\2\2\u02ca\u02cc\5\u00ba^\2\u02cb\u02c9\3\2\2\2\u02cc")
        buf.write("\u02cf\3\2\2\2\u02cd\u02cb\3\2\2\2\u02cd\u02ce\3\2\2\2")
        buf.write("\u02ce\u02d0\3\2\2\2\u02cf\u02cd\3\2\2\2\u02d0\u02d1\7")
        buf.write("\6\2\2\u02d1\u02d3\3\2\2\2\u02d2\u02c7\3\2\2\2\u02d2\u02d3")
        buf.write("\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d5\7#\2\2\u02d5")
        buf.write("\u02d6\5R*\2\u02d6/\3\2\2\2\u02d7\u02d8\7\64\2\2\u02d8")
        buf.write("\u02d9\7\u0093\2\2\u02d9\u02dd\7\u0085\2\2\u02da\u02db")
        buf.write("\7R\2\2\u02db\u02dc\7h\2\2\u02dc\u02de\7H\2\2\u02dd\u02da")
        buf.write("\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\u02e2\3\2\2\2\u02df")
        buf.write("\u02e0\5\u00b2Z\2\u02e0\u02e1\7\4\2\2\u02e1\u02e3\3\2")
        buf.write("\2\2\u02e2\u02df\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e4")
        buf.write("\3\2\2\2\u02e4\u02e5\5\u00b4[\2\u02e5\u02e6\7\u008f\2")
        buf.write("\2\u02e6\u02f2\5\u00c6d\2\u02e7\u02e8\7\5\2\2\u02e8\u02ed")
        buf.write("\5\u00a8U\2\u02e9\u02ea\7\7\2\2\u02ea\u02ec\5\u00a8U\2")
        buf.write("\u02eb\u02e9\3\2\2\2\u02ec\u02ef\3\2\2\2\u02ed\u02eb\3")
        buf.write("\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02f0\3\2\2\2\u02ef\u02ed")
        buf.write("\3\2\2\2\u02f0\u02f1\7\6\2\2\u02f1\u02f3\3\2\2\2\u02f2")
        buf.write("\u02e7\3\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\61\3\2\2\2\u02f4")
        buf.write("\u02f6\7\u0096\2\2\u02f5\u02f7\7v\2\2\u02f6\u02f5\3\2")
        buf.write("\2\2\u02f6\u02f7\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\u02f9")
        buf.write("\5\64\33\2\u02f9\u02fa\7#\2\2\u02fa\u02fb\7\5\2\2\u02fb")
        buf.write("\u02fc\5R*\2\u02fc\u0306\7\6\2\2\u02fd\u02fe\7\7\2\2\u02fe")
        buf.write("\u02ff\5\64\33\2\u02ff\u0300\7#\2\2\u0300\u0301\7\5\2")
        buf.write("\2\u0301\u0302\5R*\2\u0302\u0303\7\6\2\2\u0303\u0305\3")
        buf.write("\2\2\2\u0304\u02fd\3\2\2\2\u0305\u0308\3\2\2\2\u0306\u0304")
        buf.write("\3\2\2\2\u0306\u0307\3\2\2\2\u0307\63\3\2\2\2\u0308\u0306")
        buf.write("\3\2\2\2\u0309\u0315\5\u00b4[\2\u030a\u030b\7\5\2\2\u030b")
        buf.write("\u0310\5\u00ba^\2\u030c\u030d\7\7\2\2\u030d\u030f\5\u00ba")
        buf.write("^\2\u030e\u030c\3\2\2\2\u030f\u0312\3\2\2\2\u0310\u030e")
        buf.write("\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u0313\3\2\2\2\u0312")
        buf.write("\u0310\3\2\2\2\u0313\u0314\7\6\2\2\u0314\u0316\3\2\2\2")
        buf.write("\u0315\u030a\3\2\2\2\u0315\u0316\3\2\2\2\u0316\65\3\2")
        buf.write("\2\2\u0317\u0318\5\64\33\2\u0318\u0319\7#\2\2\u0319\u031a")
        buf.write("\7\5\2\2\u031a\u031b\5\u00a0Q\2\u031b\u031d\7\u008c\2")
        buf.write("\2\u031c\u031e\7\37\2\2\u031d\u031c\3\2\2\2\u031d\u031e")
        buf.write("\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0320\5\u00a2R\2\u0320")
        buf.write("\u0321\7\6\2\2\u0321\67\3\2\2\2\u0322\u032e\5\u00b4[\2")
        buf.write("\u0323\u0324\7\5\2\2\u0324\u0329\5\u00ba^\2\u0325\u0326")
        buf.write("\7\7\2\2\u0326\u0328\5\u00ba^\2\u0327\u0325\3\2\2\2\u0328")
        buf.write("\u032b\3\2\2\2\u0329\u0327\3\2\2\2\u0329\u032a\3\2\2\2")
        buf.write("\u032a\u032c\3\2\2\2\u032b\u0329\3\2\2\2\u032c\u032d\7")
        buf.write("\6\2\2\u032d\u032f\3\2\2\2\u032e\u0323\3\2\2\2\u032e\u032f")
        buf.write("\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0331\7#\2\2\u0331")
        buf.write("\u0332\7\5\2\2\u0332\u0333\5R*\2\u0333\u0334\7\6\2\2\u0334")
        buf.write("9\3\2\2\2\u0335\u0337\5\62\32\2\u0336\u0335\3\2\2\2\u0336")
        buf.write("\u0337\3\2\2\2\u0337\u0338\3\2\2\2\u0338\u0339\7=\2\2")
        buf.write("\u0339\u033a\7M\2\2\u033a\u033d\5n8\2\u033b\u033c\7\u0095")
        buf.write("\2\2\u033c\u033e\5B\"\2\u033d\u033b\3\2\2\2\u033d\u033e")
        buf.write("\3\2\2\2\u033e;\3\2\2\2\u033f\u0341\5\62\32\2\u0340\u033f")
        buf.write("\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0342\3\2\2\2\u0342")
        buf.write("\u0343\7=\2\2\u0343\u0344\7M\2\2\u0344\u0347\5n8\2\u0345")
        buf.write("\u0346\7\u0095\2\2\u0346\u0348\5B\"\2\u0347\u0345\3\2")
        buf.write("\2\2\u0347\u0348\3\2\2\2\u0348\u034d\3\2\2\2\u0349\u034b")
        buf.write("\5\u0084C\2\u034a\u0349\3\2\2\2\u034a\u034b\3\2\2\2\u034b")
        buf.write("\u034c\3\2\2\2\u034c\u034e\5\u0086D\2\u034d\u034a\3\2")
        buf.write("\2\2\u034d\u034e\3\2\2\2\u034e=\3\2\2\2\u034f\u0351\7")
        buf.write("?\2\2\u0350\u0352\79\2\2\u0351\u0350\3\2\2\2\u0351\u0352")
        buf.write("\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0354\5\u00b2Z\2\u0354")
        buf.write("?\3\2\2\2\u0355\u0356\7A\2\2\u0356\u0359\t\13\2\2\u0357")
        buf.write("\u0358\7R\2\2\u0358\u035a\7H\2\2\u0359\u0357\3\2\2\2\u0359")
        buf.write("\u035a\3\2\2\2\u035a\u035e\3\2\2\2\u035b\u035c\5\u00b2")
        buf.write("Z\2\u035c\u035d\7\4\2\2\u035d\u035f\3\2\2\2\u035e\u035b")
        buf.write("\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360\3\2\2\2\u0360")
        buf.write("\u0361\5\u00dep\2\u0361A\3\2\2\2\u0362\u0363\b\"\1\2\u0363")
        buf.write("\u03bb\5F$\2\u0364\u03bb\7\u00bc\2\2\u0365\u0366\5\u00b2")
        buf.write("Z\2\u0366\u0367\7\4\2\2\u0367\u0369\3\2\2\2\u0368\u0365")
        buf.write("\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u036a\3\2\2\2\u036a")
        buf.write("\u036b\5\u00b4[\2\u036b\u036c\7\4\2\2\u036c\u036e\3\2")
        buf.write("\2\2\u036d\u0368\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u036f")
        buf.write("\3\2\2\2\u036f\u03bb\5\u00ba^\2\u0370\u0371\5\u00a4S\2")
        buf.write("\u0371\u0372\5B\"\27\u0372\u03bb\3\2\2\2\u0373\u0374\5")
        buf.write("\u00b0Y\2\u0374\u0381\7\5\2\2\u0375\u0377\7@\2\2\u0376")
        buf.write("\u0375\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u0378\3\2\2\2")
        buf.write("\u0378\u037d\5B\"\2\u0379\u037a\7\7\2\2\u037a\u037c\5")
        buf.write("B\"\2\u037b\u0379\3\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b")
        buf.write("\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u0382\3\2\2\2\u037f")
        buf.write("\u037d\3\2\2\2\u0380\u0382\7\t\2\2\u0381\u0376\3\2\2\2")
        buf.write("\u0381\u0380\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0383\3")
        buf.write("\2\2\2\u0383\u0385\7\6\2\2\u0384\u0386\5r:\2\u0385\u0384")
        buf.write("\3\2\2\2\u0385\u0386\3\2\2\2\u0386\u0388\3\2\2\2\u0387")
        buf.write("\u0389\5v<\2\u0388\u0387\3\2\2\2\u0388\u0389\3\2\2\2\u0389")
        buf.write("\u03bb\3\2\2\2\u038a\u038b\7\5\2\2\u038b\u0390\5B\"\2")
        buf.write("\u038c\u038d\7\7\2\2\u038d\u038f\5B\"\2\u038e\u038c\3")
        buf.write("\2\2\2\u038f\u0392\3\2\2\2\u0390\u038e\3\2\2\2\u0390\u0391")
        buf.write("\3\2\2\2\u0391\u0393\3\2\2\2\u0392\u0390\3\2\2\2\u0393")
        buf.write("\u0394\7\6\2\2\u0394\u03bb\3\2\2\2\u0395\u0396\7-\2\2")
        buf.write("\u0396\u0397\7\5\2\2\u0397\u0398\5B\"\2\u0398\u0399\7")
        buf.write("#\2\2\u0399\u039a\5 \21\2\u039a\u039b\7\6\2\2\u039b\u03bb")
        buf.write("\3\2\2\2\u039c\u039e\7h\2\2\u039d\u039c\3\2\2\2\u039d")
        buf.write("\u039e\3\2\2\2\u039e\u039f\3\2\2\2\u039f\u03a1\7H\2\2")
        buf.write("\u03a0\u039d\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2\3")
        buf.write("\2\2\2\u03a2\u03a3\7\5\2\2\u03a3\u03a4\5R*\2\u03a4\u03a5")
        buf.write("\7\6\2\2\u03a5\u03bb\3\2\2\2\u03a6\u03a8\7,\2\2\u03a7")
        buf.write("\u03a9\5B\"\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9\3\2\2\2")
        buf.write("\u03a9\u03af\3\2\2\2\u03aa\u03ab\7\u0094\2\2\u03ab\u03ac")
        buf.write("\5B\"\2\u03ac\u03ad\7\u0088\2\2\u03ad\u03ae\5B\"\2\u03ae")
        buf.write("\u03b0\3\2\2\2\u03af\u03aa\3\2\2\2\u03b0\u03b1\3\2\2\2")
        buf.write("\u03b1\u03af\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b5\3")
        buf.write("\2\2\2\u03b3\u03b4\7C\2\2\u03b4\u03b6\5B\"\2\u03b5\u03b3")
        buf.write("\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7")
        buf.write("\u03b8\7D\2\2\u03b8\u03bb\3\2\2\2\u03b9\u03bb\5D#\2\u03ba")
        buf.write("\u0362\3\2\2\2\u03ba\u0364\3\2\2\2\u03ba\u036d\3\2\2\2")
        buf.write("\u03ba\u0370\3\2\2\2\u03ba\u0373\3\2\2\2\u03ba\u038a\3")
        buf.write("\2\2\2\u03ba\u0395\3\2\2\2\u03ba\u03a0\3\2\2\2\u03ba\u03a6")
        buf.write("\3\2\2\2\u03ba\u03b9\3\2\2\2\u03bb\u0433\3\2\2\2\u03bc")
        buf.write("\u03bd\f\26\2\2\u03bd\u03be\7\r\2\2\u03be\u0432\5B\"\27")
        buf.write("\u03bf\u03c0\f\25\2\2\u03c0\u03c1\t\f\2\2\u03c1\u0432")
        buf.write("\5B\"\26\u03c2\u03c3\f\24\2\2\u03c3\u03c4\t\6\2\2\u03c4")
        buf.write("\u0432\5B\"\25\u03c5\u03c6\f\23\2\2\u03c6\u03c7\t\r\2")
        buf.write("\2\u03c7\u0432\5B\"\24\u03c8\u03c9\f\22\2\2\u03c9\u03ca")
        buf.write("\t\16\2\2\u03ca\u0432\5B\"\23\u03cb\u03d8\f\21\2\2\u03cc")
        buf.write("\u03d9\7\b\2\2\u03cd\u03d9\7\30\2\2\u03ce\u03d9\7\31\2")
        buf.write("\2\u03cf\u03d9\7\32\2\2\u03d0\u03d9\7^\2\2\u03d1\u03d2")
        buf.write("\7^\2\2\u03d2\u03d9\7h\2\2\u03d3\u03d9\7U\2\2\u03d4\u03d9")
        buf.write("\7c\2\2\u03d5\u03d9\7O\2\2\u03d6\u03d9\7e\2\2\u03d7\u03d9")
        buf.write("\7x\2\2\u03d8\u03cc\3\2\2\2\u03d8\u03cd\3\2\2\2\u03d8")
        buf.write("\u03ce\3\2\2\2\u03d8\u03cf\3\2\2\2\u03d8\u03d0\3\2\2\2")
        buf.write("\u03d8\u03d1\3\2\2\2\u03d8\u03d3\3\2\2\2\u03d8\u03d4\3")
        buf.write("\2\2\2\u03d8\u03d5\3\2\2\2\u03d8\u03d6\3\2\2\2\u03d8\u03d7")
        buf.write("\3\2\2\2\u03d9\u03da\3\2\2\2\u03da\u0432\5B\"\22\u03db")
        buf.write("\u03dc\f\20\2\2\u03dc\u03dd\7\"\2\2\u03dd\u0432\5B\"\21")
        buf.write("\u03de\u03df\f\17\2\2\u03df\u03e0\7n\2\2\u03e0\u0432\5")
        buf.write("B\"\20\u03e1\u03e2\f\b\2\2\u03e2\u03e4\7^\2\2\u03e3\u03e5")
        buf.write("\7h\2\2\u03e4\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5")
        buf.write("\u03e6\3\2\2\2\u03e6\u0432\5B\"\t\u03e7\u03e9\f\7\2\2")
        buf.write("\u03e8\u03ea\7h\2\2\u03e9\u03e8\3\2\2\2\u03e9\u03ea\3")
        buf.write("\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ec\7)\2\2\u03ec\u03ed")
        buf.write("\5B\"\2\u03ed\u03ee\7\"\2\2\u03ee\u03ef\5B\"\b\u03ef\u0432")
        buf.write("\3\2\2\2\u03f0\u03f1\f\13\2\2\u03f1\u03f2\7/\2\2\u03f2")
        buf.write("\u0432\5\u00bc_\2\u03f3\u03f5\f\n\2\2\u03f4\u03f6\7h\2")
        buf.write("\2\u03f5\u03f4\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7")
        buf.write("\3\2\2\2\u03f7\u03f8\t\17\2\2\u03f8\u03fb\5B\"\2\u03f9")
        buf.write("\u03fa\7E\2\2\u03fa\u03fc\5B\"\2\u03fb\u03f9\3\2\2\2\u03fb")
        buf.write("\u03fc\3\2\2\2\u03fc\u0432\3\2\2\2\u03fd\u0402\f\t\2\2")
        buf.write("\u03fe\u0403\7_\2\2\u03ff\u0403\7i\2\2\u0400\u0401\7h")
        buf.write("\2\2\u0401\u0403\7j\2\2\u0402\u03fe\3\2\2\2\u0402\u03ff")
        buf.write("\3\2\2\2\u0402\u0400\3\2\2\2\u0403\u0432\3\2\2\2\u0404")
        buf.write("\u0406\f\6\2\2\u0405\u0407\7h\2\2\u0406\u0405\3\2\2\2")
        buf.write("\u0406\u0407\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u042f\7")
        buf.write("U\2\2\u0409\u0413\7\5\2\2\u040a\u0414\5R*\2\u040b\u0410")
        buf.write("\5B\"\2\u040c\u040d\7\7\2\2\u040d\u040f\5B\"\2\u040e\u040c")
        buf.write("\3\2\2\2\u040f\u0412\3\2\2\2\u0410\u040e\3\2\2\2\u0410")
        buf.write("\u0411\3\2\2\2\u0411\u0414\3\2\2\2\u0412\u0410\3\2\2\2")
        buf.write("\u0413\u040a\3\2\2\2\u0413\u040b\3\2\2\2\u0413\u0414\3")
        buf.write("\2\2\2\u0414\u0415\3\2\2\2\u0415\u0430\7\6\2\2\u0416\u0417")
        buf.write("\5\u00b2Z\2\u0417\u0418\7\4\2\2\u0418\u041a\3\2\2\2\u0419")
        buf.write("\u0416\3\2\2\2\u0419\u041a\3\2\2\2\u041a\u041b\3\2\2\2")
        buf.write("\u041b\u0430\5\u00b4[\2\u041c\u041d\5\u00b2Z\2\u041d\u041e")
        buf.write("\7\4\2\2\u041e\u0420\3\2\2\2\u041f\u041c\3\2\2\2\u041f")
        buf.write("\u0420\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0422\5\u00dc")
        buf.write("o\2\u0422\u042b\7\5\2\2\u0423\u0428\5B\"\2\u0424\u0425")
        buf.write("\7\7\2\2\u0425\u0427\5B\"\2\u0426\u0424\3\2\2\2\u0427")
        buf.write("\u042a\3\2\2\2\u0428\u0426\3\2\2\2\u0428\u0429\3\2\2\2")
        buf.write("\u0429\u042c\3\2\2\2\u042a\u0428\3\2\2\2\u042b\u0423\3")
        buf.write("\2\2\2\u042b\u042c\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u042e")
        buf.write("\7\6\2\2\u042e\u0430\3\2\2\2\u042f\u0409\3\2\2\2\u042f")
        buf.write("\u0419\3\2\2\2\u042f\u041f\3\2\2\2\u0430\u0432\3\2\2\2")
        buf.write("\u0431\u03bc\3\2\2\2\u0431\u03bf\3\2\2\2\u0431\u03c2\3")
        buf.write("\2\2\2\u0431\u03c5\3\2\2\2\u0431\u03c8\3\2\2\2\u0431\u03cb")
        buf.write("\3\2\2\2\u0431\u03db\3\2\2\2\u0431\u03de\3\2\2\2\u0431")
        buf.write("\u03e1\3\2\2\2\u0431\u03e7\3\2\2\2\u0431\u03f0\3\2\2\2")
        buf.write("\u0431\u03f3\3\2\2\2\u0431\u03fd\3\2\2\2\u0431\u0404\3")
        buf.write("\2\2\2\u0432\u0435\3\2\2\2\u0433\u0431\3\2\2\2\u0433\u0434")
        buf.write("\3\2\2\2\u0434C\3\2\2\2\u0435\u0433\3\2\2\2\u0436\u0437")
        buf.write("\7u\2\2\u0437\u043c\7\5\2\2\u0438\u043d\7S\2\2\u0439\u043a")
        buf.write("\t\20\2\2\u043a\u043b\7\7\2\2\u043b\u043d\5\u00a6T\2\u043c")
        buf.write("\u0438\3\2\2\2\u043c\u0439\3\2\2\2\u043d\u043e\3\2\2\2")
        buf.write("\u043e\u043f\7\6\2\2\u043fE\3\2\2\2\u0440\u0441\t\21\2")
        buf.write("\2\u0441G\3\2\2\2\u0442\u0444\5\62\32\2\u0443\u0442\3")
        buf.write("\2\2\2\u0443\u0444\3\2\2\2\u0444\u044a\3\2\2\2\u0445\u044b")
        buf.write("\7Z\2\2\u0446\u044b\7|\2\2\u0447\u0448\7Z\2\2\u0448\u0449")
        buf.write("\7n\2\2\u0449\u044b\t\n\2\2\u044a\u0445\3\2\2\2\u044a")
        buf.write("\u0446\3\2\2\2\u044a\u0447\3\2\2\2\u044b\u044c\3\2\2\2")
        buf.write("\u044c\u0450\7]\2\2\u044d\u044e\5\u00b2Z\2\u044e\u044f")
        buf.write("\7\4\2\2\u044f\u0451\3\2\2\2\u0450\u044d\3\2\2\2\u0450")
        buf.write("\u0451\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0455\5\u00b4")
        buf.write("[\2\u0453\u0454\7#\2\2\u0454\u0456\5\u00ccg\2\u0455\u0453")
        buf.write("\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u0462\3\2\2\2\u0457")
        buf.write("\u0458\7\5\2\2\u0458\u045d\5\u00ba^\2\u0459\u045a\7\7")
        buf.write("\2\2\u045a\u045c\5\u00ba^\2\u045b\u0459\3\2\2\2\u045c")
        buf.write("\u045f\3\2\2\2\u045d\u045b\3\2\2\2\u045d\u045e\3\2\2\2")
        buf.write("\u045e\u0460\3\2\2\2\u045f\u045d\3\2\2\2\u0460\u0461\7")
        buf.write("\6\2\2\u0461\u0463\3\2\2\2\u0462\u0457\3\2\2\2\u0462\u0463")
        buf.write("\3\2\2\2\u0463\u0481\3\2\2\2\u0464\u0465\7\u0091\2\2\u0465")
        buf.write("\u0466\7\5\2\2\u0466\u046b\5B\"\2\u0467\u0468\7\7\2\2")
        buf.write("\u0468\u046a\5B\"\2\u0469\u0467\3\2\2\2\u046a\u046d\3")
        buf.write("\2\2\2\u046b\u0469\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e")
        buf.write("\3\2\2\2\u046d\u046b\3\2\2\2\u046e\u047d\7\6\2\2\u046f")
        buf.write("\u0470\7\7\2\2\u0470\u0471\7\5\2\2\u0471\u0476\5B\"\2")
        buf.write("\u0472\u0473\7\7\2\2\u0473\u0475\5B\"\2\u0474\u0472\3")
        buf.write("\2\2\2\u0475\u0478\3\2\2\2\u0476\u0474\3\2\2\2\u0476\u0477")
        buf.write("\3\2\2\2\u0477\u0479\3\2\2\2\u0478\u0476\3\2\2\2\u0479")
        buf.write("\u047a\7\6\2\2\u047a\u047c\3\2\2\2\u047b\u046f\3\2\2\2")
        buf.write("\u047c\u047f\3\2\2\2\u047d\u047b\3\2\2\2\u047d\u047e\3")
        buf.write("\2\2\2\u047e\u0482\3\2\2\2\u047f\u047d\3\2\2\2\u0480\u0482")
        buf.write("\5R*\2\u0481\u0464\3\2\2\2\u0481\u0480\3\2\2\2\u0482\u0484")
        buf.write("\3\2\2\2\u0483\u0485\5J&\2\u0484\u0483\3\2\2\2\u0484\u0485")
        buf.write("\3\2\2\2\u0485\u0489\3\2\2\2\u0486\u0487\7:\2\2\u0487")
        buf.write("\u0489\7\u0091\2\2\u0488\u0443\3\2\2\2\u0488\u0486\3\2")
        buf.write("\2\2\u0489I\3\2\2\2\u048a\u048b\7m\2\2\u048b\u049a\7\62")
        buf.write("\2\2\u048c\u048d\7\5\2\2\u048d\u0492\5\32\16\2\u048e\u048f")
        buf.write("\7\7\2\2\u048f\u0491\5\32\16\2\u0490\u048e\3\2\2\2\u0491")
        buf.write("\u0494\3\2\2\2\u0492\u0490\3\2\2\2\u0492\u0493\3\2\2\2")
        buf.write("\u0493\u0495\3\2\2\2\u0494\u0492\3\2\2\2\u0495\u0498\7")
        buf.write("\6\2\2\u0496\u0497\7\u0095\2\2\u0497\u0499\5B\"\2\u0498")
        buf.write("\u0496\3\2\2\2\u0498\u0499\3\2\2\2\u0499\u049b\3\2\2\2")
        buf.write("\u049a\u048c\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049c\3")
        buf.write("\2\2\2\u049c\u04b7\7\u00b8\2\2\u049d\u04b8\7\u00b9\2\2")
        buf.write("\u049e\u049f\7\u008e\2\2\u049f\u04a2\7\u0084\2\2\u04a0")
        buf.write("\u04a3\5\u00ba^\2\u04a1\u04a3\5j\66\2\u04a2\u04a0\3\2")
        buf.write("\2\2\u04a2\u04a1\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a5")
        buf.write("\7\30\2\2\u04a5\u04b0\5B\"\2\u04a6\u04a9\7\7\2\2\u04a7")
        buf.write("\u04aa\5\u00ba^\2\u04a8\u04aa\5j\66\2\u04a9\u04a7\3\2")
        buf.write("\2\2\u04a9\u04a8\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04ac")
        buf.write("\7\30\2\2\u04ac\u04ad\5B\"\2\u04ad\u04af\3\2\2\2\u04ae")
        buf.write("\u04a6\3\2\2\2\u04af\u04b2\3\2\2\2\u04b0\u04ae\3\2\2\2")
        buf.write("\u04b0\u04b1\3\2\2\2\u04b1\u04b5\3\2\2\2\u04b2\u04b0\3")
        buf.write("\2\2\2\u04b3\u04b4\7\u0095\2\2\u04b4\u04b6\5B\"\2\u04b5")
        buf.write("\u04b3\3\2\2\2\u04b5\u04b6\3\2\2\2\u04b6\u04b8\3\2\2\2")
        buf.write("\u04b7\u049d\3\2\2\2\u04b7\u049e\3\2\2\2\u04b8K\3\2\2")
        buf.write("\2\u04b9\u04bd\7r\2\2\u04ba\u04bb\5\u00b2Z\2\u04bb\u04bc")
        buf.write("\7\4\2\2\u04bc\u04be\3\2\2\2\u04bd\u04ba\3\2\2\2\u04bd")
        buf.write("\u04be\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c6\5\u00c8")
        buf.write("e\2\u04c0\u04c1\7\b\2\2\u04c1\u04c7\5N(\2\u04c2\u04c3")
        buf.write("\7\5\2\2\u04c3\u04c4\5N(\2\u04c4\u04c5\7\6\2\2\u04c5\u04c7")
        buf.write("\3\2\2\2\u04c6\u04c0\3\2\2\2\u04c6\u04c2\3\2\2\2\u04c6")
        buf.write("\u04c7\3\2\2\2\u04c7M\3\2\2\2\u04c8\u04cc\5$\23\2\u04c9")
        buf.write("\u04cc\5\u00aeX\2\u04ca\u04cc\7\u00bd\2\2\u04cb\u04c8")
        buf.write("\3\2\2\2\u04cb\u04c9\3\2\2\2\u04cb\u04ca\3\2\2\2\u04cc")
        buf.write("O\3\2\2\2\u04cd\u04d8\7y\2\2\u04ce\u04d9\5\u00bc_\2\u04cf")
        buf.write("\u04d0\5\u00b2Z\2\u04d0\u04d1\7\4\2\2\u04d1\u04d3\3\2")
        buf.write("\2\2\u04d2\u04cf\3\2\2\2\u04d2\u04d3\3\2\2\2\u04d3\u04d6")
        buf.write("\3\2\2\2\u04d4\u04d7\5\u00b4[\2\u04d5\u04d7\5\u00c0a\2")
        buf.write("\u04d6\u04d4\3\2\2\2\u04d6\u04d5\3\2\2\2\u04d7\u04d9\3")
        buf.write("\2\2\2\u04d8\u04ce\3\2\2\2\u04d8\u04d2\3\2\2\2\u04d8\u04d9")
        buf.write("\3\2\2\2\u04d9Q\3\2\2\2\u04da\u04dc\5\u0082B\2\u04db\u04da")
        buf.write("\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd")
        buf.write("\u04e3\5V,\2\u04de\u04df\5f\64\2\u04df\u04e0\5V,\2\u04e0")
        buf.write("\u04e2\3\2\2\2\u04e1\u04de\3\2\2\2\u04e2\u04e5\3\2\2\2")
        buf.write("\u04e3\u04e1\3\2\2\2\u04e3\u04e4\3\2\2\2\u04e4\u04e7\3")
        buf.write("\2\2\2\u04e5\u04e3\3\2\2\2\u04e6\u04e8\5\u0084C\2\u04e7")
        buf.write("\u04e6\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04ea\3\2\2\2")
        buf.write("\u04e9\u04eb\5\u0086D\2\u04ea\u04e9\3\2\2\2\u04ea\u04eb")
        buf.write("\3\2\2\2\u04ebS\3\2\2\2\u04ec\u04f4\5^\60\2\u04ed\u04ee")
        buf.write("\5b\62\2\u04ee\u04f0\5^\60\2\u04ef\u04f1\5d\63\2\u04f0")
        buf.write("\u04ef\3\2\2\2\u04f0\u04f1\3\2\2\2\u04f1\u04f3\3\2\2\2")
        buf.write("\u04f2\u04ed\3\2\2\2\u04f3\u04f6\3\2\2\2\u04f4\u04f2\3")
        buf.write("\2\2\2\u04f4\u04f5\3\2\2\2\u04f5U\3\2\2\2\u04f6\u04f4")
        buf.write("\3\2\2\2\u04f7\u04f9\7\u0083\2\2\u04f8\u04fa\t\22\2\2")
        buf.write("\u04f9\u04f8\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa\u04fb\3")
        buf.write("\2\2\2\u04fb\u0500\5`\61\2\u04fc\u04fd\7\7\2\2\u04fd\u04ff")
        buf.write("\5`\61\2\u04fe\u04fc\3\2\2\2\u04ff\u0502\3\2\2\2\u0500")
        buf.write("\u04fe\3\2\2\2\u0500\u0501\3\2\2\2\u0501\u050f\3\2\2\2")
        buf.write("\u0502\u0500\3\2\2\2\u0503\u050d\7M\2\2\u0504\u0509\5")
        buf.write("^\60\2\u0505\u0506\7\7\2\2\u0506\u0508\5^\60\2\u0507\u0505")
        buf.write("\3\2\2\2\u0508\u050b\3\2\2\2\u0509\u0507\3\2\2\2\u0509")
        buf.write("\u050a\3\2\2\2\u050a\u050e\3\2\2\2\u050b\u0509\3\2\2\2")
        buf.write("\u050c\u050e\5T+\2\u050d\u0504\3\2\2\2\u050d\u050c\3\2")
        buf.write("\2\2\u050e\u0510\3\2\2\2\u050f\u0503\3\2\2\2\u050f\u0510")
        buf.write("\3\2\2\2\u0510\u0513\3\2\2\2\u0511\u0512\7\u0095\2\2\u0512")
        buf.write("\u0514\5B\"\2\u0513\u0511\3\2\2\2\u0513\u0514\3\2\2\2")
        buf.write("\u0514\u0523\3\2\2\2\u0515\u0516\7P\2\2\u0516\u0517\7")
        buf.write("*\2\2\u0517\u051c\5B\"\2\u0518\u0519\7\7\2\2\u0519\u051b")
        buf.write("\5B\"\2\u051a\u0518\3\2\2\2\u051b\u051e\3\2\2\2\u051c")
        buf.write("\u051a\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u0521\3\2\2\2")
        buf.write("\u051e\u051c\3\2\2\2\u051f\u0520\7Q\2\2\u0520\u0522\5")
        buf.write("B\"\2\u0521\u051f\3\2\2\2\u0521\u0522\3\2\2\2\u0522\u0524")
        buf.write("\3\2\2\2\u0523\u0515\3\2\2\2\u0523\u0524\3\2\2\2\u0524")
        buf.write("\u0533\3\2\2\2\u0525\u0526\7\u00af\2\2\u0526\u0527\5\u00d0")
        buf.write("i\2\u0527\u0528\7#\2\2\u0528\u0530\5t;\2\u0529\u052a\7")
        buf.write("\7\2\2\u052a\u052b\5\u00d0i\2\u052b\u052c\7#\2\2\u052c")
        buf.write("\u052d\5t;\2\u052d\u052f\3\2\2\2\u052e\u0529\3\2\2\2\u052f")
        buf.write("\u0532\3\2\2\2\u0530\u052e\3\2\2\2\u0530\u0531\3\2\2\2")
        buf.write("\u0531\u0534\3\2\2\2\u0532\u0530\3\2\2\2\u0533\u0525\3")
        buf.write("\2\2\2\u0533\u0534\3\2\2\2\u0534\u0552\3\2\2\2\u0535\u0536")
        buf.write("\7\u0091\2\2\u0536\u0537\7\5\2\2\u0537\u053c\5B\"\2\u0538")
        buf.write("\u0539\7\7\2\2\u0539\u053b\5B\"\2\u053a\u0538\3\2\2\2")
        buf.write("\u053b\u053e\3\2\2\2\u053c\u053a\3\2\2\2\u053c\u053d\3")
        buf.write("\2\2\2\u053d\u053f\3\2\2\2\u053e\u053c\3\2\2\2\u053f\u054e")
        buf.write("\7\6\2\2\u0540\u0541\7\7\2\2\u0541\u0542\7\5\2\2\u0542")
        buf.write("\u0547\5B\"\2\u0543\u0544\7\7\2\2\u0544\u0546\5B\"\2\u0545")
        buf.write("\u0543\3\2\2\2\u0546\u0549\3\2\2\2\u0547\u0545\3\2\2\2")
        buf.write("\u0547\u0548\3\2\2\2\u0548\u054a\3\2\2\2\u0549\u0547\3")
        buf.write("\2\2\2\u054a\u054b\7\6\2\2\u054b\u054d\3\2\2\2\u054c\u0540")
        buf.write("\3\2\2\2\u054d\u0550\3\2\2\2\u054e\u054c\3\2\2\2\u054e")
        buf.write("\u054f\3\2\2\2\u054f\u0552\3\2\2\2\u0550\u054e\3\2\2\2")
        buf.write("\u0551\u04f7\3\2\2\2\u0551\u0535\3\2\2\2\u0552W\3\2\2")
        buf.write("\2\u0553\u0554\5R*\2\u0554Y\3\2\2\2\u0555\u0557\5\u0082")
        buf.write("B\2\u0556\u0555\3\2\2\2\u0556\u0557\3\2\2\2\u0557\u0558")
        buf.write("\3\2\2\2\u0558\u055a\5V,\2\u0559\u055b\5\u0084C\2\u055a")
        buf.write("\u0559\3\2\2\2\u055a\u055b\3\2\2\2\u055b\u055d\3\2\2\2")
        buf.write("\u055c\u055e\5\u0086D\2\u055d\u055c\3\2\2\2\u055d\u055e")
        buf.write("\3\2\2\2\u055e[\3\2\2\2\u055f\u0561\5\u0082B\2\u0560\u055f")
        buf.write("\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0562\3\2\2\2\u0562")
        buf.write("\u056c\5V,\2\u0563\u0565\7\u008c\2\2\u0564\u0566\7\37")
        buf.write("\2\2\u0565\u0564\3\2\2\2\u0565\u0566\3\2\2\2\u0566\u056a")
        buf.write("\3\2\2\2\u0567\u056a\7\\\2\2\u0568\u056a\7F\2\2\u0569")
        buf.write("\u0563\3\2\2\2\u0569\u0567\3\2\2\2\u0569\u0568\3\2\2\2")
        buf.write("\u056a\u056b\3\2\2\2\u056b\u056d\5V,\2\u056c\u0569\3\2")
        buf.write("\2\2\u056d\u056e\3\2\2\2\u056e\u056c\3\2\2\2\u056e\u056f")
        buf.write("\3\2\2\2\u056f\u0571\3\2\2\2\u0570\u0572\5\u0084C\2\u0571")
        buf.write("\u0570\3\2\2\2\u0571\u0572\3\2\2\2\u0572\u0574\3\2\2\2")
        buf.write("\u0573\u0575\5\u0086D\2\u0574\u0573\3\2\2\2\u0574\u0575")
        buf.write("\3\2\2\2\u0575]\3\2\2\2\u0576\u0577\5\u00b2Z\2\u0577\u0578")
        buf.write("\7\4\2\2\u0578\u057a\3\2\2\2\u0579\u0576\3\2\2\2\u0579")
        buf.write("\u057a\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u0580\5\u00b4")
        buf.write("[\2\u057c\u057e\7#\2\2\u057d\u057c\3\2\2\2\u057d\u057e")
        buf.write("\3\2\2\2\u057e\u057f\3\2\2\2\u057f\u0581\5\u00ccg\2\u0580")
        buf.write("\u057d\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0587\3\2\2\2")
        buf.write("\u0582\u0583\7W\2\2\u0583\u0584\7*\2\2\u0584\u0588\5\u00c0")
        buf.write("a\2\u0585\u0586\7h\2\2\u0586\u0588\7W\2\2\u0587\u0582")
        buf.write("\3\2\2\2\u0587\u0585\3\2\2\2\u0587\u0588\3\2\2\2\u0588")
        buf.write("\u05b7\3\2\2\2\u0589\u058a\5\u00b2Z\2\u058a\u058b\7\4")
        buf.write("\2\2\u058b\u058d\3\2\2\2\u058c\u0589\3\2\2\2\u058c\u058d")
        buf.write("\3\2\2\2\u058d\u058e\3\2\2\2\u058e\u058f\5\u00dco\2\u058f")
        buf.write("\u0590\7\5\2\2\u0590\u0595\5B\"\2\u0591\u0592\7\7\2\2")
        buf.write("\u0592\u0594\5B\"\2\u0593\u0591\3\2\2\2\u0594\u0597\3")
        buf.write("\2\2\2\u0595\u0593\3\2\2\2\u0595\u0596\3\2\2\2\u0596\u0598")
        buf.write("\3\2\2\2\u0597\u0595\3\2\2\2\u0598\u059d\7\6\2\2\u0599")
        buf.write("\u059b\7#\2\2\u059a\u0599\3\2\2\2\u059a\u059b\3\2\2\2")
        buf.write("\u059b\u059c\3\2\2\2\u059c\u059e\5\u00ccg\2\u059d\u059a")
        buf.write("\3\2\2\2\u059d\u059e\3\2\2\2\u059e\u05b7\3\2\2\2\u059f")
        buf.write("\u05a9\7\5\2\2\u05a0\u05a5\5^\60\2\u05a1\u05a2\7\7\2\2")
        buf.write("\u05a2\u05a4\5^\60\2\u05a3\u05a1\3\2\2\2\u05a4\u05a7\3")
        buf.write("\2\2\2\u05a5\u05a3\3\2\2\2\u05a5\u05a6\3\2\2\2\u05a6\u05aa")
        buf.write("\3\2\2\2\u05a7\u05a5\3\2\2\2\u05a8\u05aa\5T+\2\u05a9\u05a0")
        buf.write("\3\2\2\2\u05a9\u05a8\3\2\2\2\u05aa\u05ab\3\2\2\2\u05ab")
        buf.write("\u05ac\7\6\2\2\u05ac\u05b7\3\2\2\2\u05ad\u05ae\7\5\2\2")
        buf.write("\u05ae\u05af\5R*\2\u05af\u05b4\7\6\2\2\u05b0\u05b2\7#")
        buf.write("\2\2\u05b1\u05b0\3\2\2\2\u05b1\u05b2\3\2\2\2\u05b2\u05b3")
        buf.write("\3\2\2\2\u05b3\u05b5\5\u00ccg\2\u05b4\u05b1\3\2\2\2\u05b4")
        buf.write("\u05b5\3\2\2\2\u05b5\u05b7\3\2\2\2\u05b6\u0579\3\2\2\2")
        buf.write("\u05b6\u058c\3\2\2\2\u05b6\u059f\3\2\2\2\u05b6\u05ad\3")
        buf.write("\2\2\2\u05b7_\3\2\2\2\u05b8\u05c5\7\t\2\2\u05b9\u05ba")
        buf.write("\5\u00b4[\2\u05ba\u05bb\7\4\2\2\u05bb\u05bc\7\t\2\2\u05bc")
        buf.write("\u05c5\3\2\2\2\u05bd\u05c2\5B\"\2\u05be\u05c0\7#\2\2\u05bf")
        buf.write("\u05be\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0\u05c1\3\2\2\2")
        buf.write("\u05c1\u05c3\5\u00aaV\2\u05c2\u05bf\3\2\2\2\u05c2\u05c3")
        buf.write("\3\2\2\2\u05c3\u05c5\3\2\2\2\u05c4\u05b8\3\2\2\2\u05c4")
        buf.write("\u05b9\3\2\2\2\u05c4\u05bd\3\2\2\2\u05c5a\3\2\2\2\u05c6")
        buf.write("\u05d4\7\7\2\2\u05c7\u05c9\7f\2\2\u05c8\u05c7\3\2\2\2")
        buf.write("\u05c8\u05c9\3\2\2\2\u05c9\u05d0\3\2\2\2\u05ca\u05cc\7")
        buf.write("b\2\2\u05cb\u05cd\7p\2\2\u05cc\u05cb\3\2\2\2\u05cc\u05cd")
        buf.write("\3\2\2\2\u05cd\u05d1\3\2\2\2\u05ce\u05d1\7Y\2\2\u05cf")
        buf.write("\u05d1\7\65\2\2\u05d0\u05ca\3\2\2\2\u05d0\u05ce\3\2\2")
        buf.write("\2\u05d0\u05cf\3\2\2\2\u05d0\u05d1\3\2\2\2\u05d1\u05d2")
        buf.write("\3\2\2\2\u05d2\u05d4\7`\2\2\u05d3\u05c6\3\2\2\2\u05d3")
        buf.write("\u05c8\3\2\2\2\u05d4c\3\2\2\2\u05d5\u05d6\7m\2\2\u05d6")
        buf.write("\u05e4\5B\"\2\u05d7\u05d8\7\u008f\2\2\u05d8\u05d9\7\5")
        buf.write("\2\2\u05d9\u05de\5\u00ba^\2\u05da\u05db\7\7\2\2\u05db")
        buf.write("\u05dd\5\u00ba^\2\u05dc\u05da\3\2\2\2\u05dd\u05e0\3\2")
        buf.write("\2\2\u05de\u05dc\3\2\2\2\u05de\u05df\3\2\2\2\u05df\u05e1")
        buf.write("\3\2\2\2\u05e0\u05de\3\2\2\2\u05e1\u05e2\7\6\2\2\u05e2")
        buf.write("\u05e4\3\2\2\2\u05e3\u05d5\3\2\2\2\u05e3\u05d7\3\2\2\2")
        buf.write("\u05e4e\3\2\2\2\u05e5\u05e7\7\u008c\2\2\u05e6\u05e8\7")
        buf.write("\37\2\2\u05e7\u05e6\3\2\2\2\u05e7\u05e8\3\2\2\2\u05e8")
        buf.write("\u05ec\3\2\2\2\u05e9\u05ec\7\\\2\2\u05ea\u05ec\7F\2\2")
        buf.write("\u05eb\u05e5\3\2\2\2\u05eb\u05e9\3\2\2\2\u05eb\u05ea\3")
        buf.write("\2\2\2\u05ecg\3\2\2\2\u05ed\u05ef\5\62\32\2\u05ee\u05ed")
        buf.write("\3\2\2\2\u05ee\u05ef\3\2\2\2\u05ef\u05f0\3\2\2\2\u05f0")
        buf.write("\u05f3\7\u008e\2\2\u05f1\u05f2\7n\2\2\u05f2\u05f4\t\n")
        buf.write("\2\2\u05f3\u05f1\3\2\2\2\u05f3\u05f4\3\2\2\2\u05f4\u05f5")
        buf.write("\3\2\2\2\u05f5\u05f6\5n8\2\u05f6\u05f9\7\u0084\2\2\u05f7")
        buf.write("\u05fa\5\u00ba^\2\u05f8\u05fa\5j\66\2\u05f9\u05f7\3\2")
        buf.write("\2\2\u05f9\u05f8\3\2\2\2\u05fa\u05fb\3\2\2\2\u05fb\u05fc")
        buf.write("\7\b\2\2\u05fc\u0607\5B\"\2\u05fd\u0600\7\7\2\2\u05fe")
        buf.write("\u0601\5\u00ba^\2\u05ff\u0601\5j\66\2\u0600\u05fe\3\2")
        buf.write("\2\2\u0600\u05ff\3\2\2\2\u0601\u0602\3\2\2\2\u0602\u0603")
        buf.write("\7\b\2\2\u0603\u0604\5B\"\2\u0604\u0606\3\2\2\2\u0605")
        buf.write("\u05fd\3\2\2\2\u0606\u0609\3\2\2\2\u0607\u0605\3\2\2\2")
        buf.write("\u0607\u0608\3\2\2\2\u0608\u060c\3\2\2\2\u0609\u0607\3")
        buf.write("\2\2\2\u060a\u060b\7\u0095\2\2\u060b\u060d\5B\"\2\u060c")
        buf.write("\u060a\3\2\2\2\u060c\u060d\3\2\2\2\u060di\3\2\2\2\u060e")
        buf.write("\u060f\7\5\2\2\u060f\u0614\5\u00ba^\2\u0610\u0611\7\7")
        buf.write("\2\2\u0611\u0613\5\u00ba^\2\u0612\u0610\3\2\2\2\u0613")
        buf.write("\u0616\3\2\2\2\u0614\u0612\3\2\2\2\u0614\u0615\3\2\2\2")
        buf.write("\u0615\u0617\3\2\2\2\u0616\u0614\3\2\2\2\u0617\u0618\7")
        buf.write("\6\2\2\u0618k\3\2\2\2\u0619\u061b\5\62\32\2\u061a\u0619")
        buf.write("\3\2\2\2\u061a\u061b\3\2\2\2\u061b\u061c\3\2\2\2\u061c")
        buf.write("\u061f\7\u008e\2\2\u061d\u061e\7n\2\2\u061e\u0620\t\n")
        buf.write("\2\2\u061f\u061d\3\2\2\2\u061f\u0620\3\2\2\2\u0620\u0621")
        buf.write("\3\2\2\2\u0621\u0622\5n8\2\u0622\u0625\7\u0084\2\2\u0623")
        buf.write("\u0626\5\u00ba^\2\u0624\u0626\5j\66\2\u0625\u0623\3\2")
        buf.write("\2\2\u0625\u0624\3\2\2\2\u0626\u0627\3\2\2\2\u0627\u0628")
        buf.write("\7\b\2\2\u0628\u0633\5B\"\2\u0629\u062c\7\7\2\2\u062a")
        buf.write("\u062d\5\u00ba^\2\u062b\u062d\5j\66\2\u062c\u062a\3\2")
        buf.write("\2\2\u062c\u062b\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u062f")
        buf.write("\7\b\2\2\u062f\u0630\5B\"\2\u0630\u0632\3\2\2\2\u0631")
        buf.write("\u0629\3\2\2\2\u0632\u0635\3\2\2\2\u0633\u0631\3\2\2\2")
        buf.write("\u0633\u0634\3\2\2\2\u0634\u0638\3\2\2\2\u0635\u0633\3")
        buf.write("\2\2\2\u0636\u0637\7\u0095\2\2\u0637\u0639\5B\"\2\u0638")
        buf.write("\u0636\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u063e\3\2\2\2")
        buf.write("\u063a\u063c\5\u0084C\2\u063b\u063a\3\2\2\2\u063b\u063c")
        buf.write("\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063f\5\u0086D\2\u063e")
        buf.write("\u063b\3\2\2\2\u063e\u063f\3\2\2\2\u063fm\3\2\2\2\u0640")
        buf.write("\u0641\5\u00b2Z\2\u0641\u0642\7\4\2\2\u0642\u0644\3\2")
        buf.write("\2\2\u0643\u0640\3\2\2\2\u0643\u0644\3\2\2\2\u0644\u0645")
        buf.write("\3\2\2\2\u0645\u0648\5\u00b4[\2\u0646\u0647\7#\2\2\u0647")
        buf.write("\u0649\5\u00d2j\2\u0648\u0646\3\2\2\2\u0648\u0649\3\2")
        buf.write("\2\2\u0649\u064f\3\2\2\2\u064a\u064b\7W\2\2\u064b\u064c")
        buf.write("\7*\2\2\u064c\u0650\5\u00c0a\2\u064d\u064e\7h\2\2\u064e")
        buf.write("\u0650\7W\2\2\u064f\u064a\3\2\2\2\u064f\u064d\3\2\2\2")
        buf.write("\u064f\u0650\3\2\2\2\u0650o\3\2\2\2\u0651\u0653\7\u0090")
        buf.write("\2\2\u0652\u0654\5\u00b2Z\2\u0653\u0652\3\2\2\2\u0653")
        buf.write("\u0654\3\2\2\2\u0654\u0657\3\2\2\2\u0655\u0656\7]\2\2")
        buf.write("\u0656\u0658\5\u00d4k\2\u0657\u0655\3\2\2\2\u0657\u0658")
        buf.write("\3\2\2\2\u0658q\3\2\2\2\u0659\u065a\7\u00b3\2\2\u065a")
        buf.write("\u065b\7\5\2\2\u065b\u065c\7\u0095\2\2\u065c\u065d\5B")
        buf.write("\"\2\u065d\u065e\7\6\2\2\u065es\3\2\2\2\u065f\u0661\7")
        buf.write("\5\2\2\u0660\u0662\5\u00d6l\2\u0661\u0660\3\2\2\2\u0661")
        buf.write("\u0662\3\2\2\2\u0662\u066d\3\2\2\2\u0663\u0664\7\u009a")
        buf.write("\2\2\u0664\u0665\7*\2\2\u0665\u066a\5B\"\2\u0666\u0667")
        buf.write("\7\7\2\2\u0667\u0669\5B\"\2\u0668\u0666\3\2\2\2\u0669")
        buf.write("\u066c\3\2\2\2\u066a\u0668\3\2\2\2\u066a\u066b\3\2\2\2")
        buf.write("\u066b\u066e\3\2\2\2\u066c\u066a\3\2\2\2\u066d\u0663\3")
        buf.write("\2\2\2\u066d\u066e\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u0670")
        buf.write("\7o\2\2\u0670\u0671\7*\2\2\u0671\u0676\5\u0088E\2\u0672")
        buf.write("\u0673\7\7\2\2\u0673\u0675\5\u0088E\2\u0674\u0672\3\2")
        buf.write("\2\2\u0675\u0678\3\2\2\2\u0676\u0674\3\2\2\2\u0676\u0677")
        buf.write("\3\2\2\2\u0677\u067a\3\2\2\2\u0678\u0676\3\2\2\2\u0679")
        buf.write("\u067b\5x=\2\u067a\u0679\3\2\2\2\u067a\u067b\3\2\2\2\u067b")
        buf.write("\u067c\3\2\2\2\u067c\u067d\7\6\2\2\u067du\3\2\2\2\u067e")
        buf.write("\u06a0\7\u0099\2\2\u067f\u06a1\5\u00d0i\2\u0680\u0682")
        buf.write("\7\5\2\2\u0681\u0683\5\u00d6l\2\u0682\u0681\3\2\2\2\u0682")
        buf.write("\u0683\3\2\2\2\u0683\u068e\3\2\2\2\u0684\u0685\7\u009a")
        buf.write("\2\2\u0685\u0686\7*\2\2\u0686\u068b\5B\"\2\u0687\u0688")
        buf.write("\7\7\2\2\u0688\u068a\5B\"\2\u0689\u0687\3\2\2\2\u068a")
        buf.write("\u068d\3\2\2\2\u068b\u0689\3\2\2\2\u068b\u068c\3\2\2\2")
        buf.write("\u068c\u068f\3\2\2\2\u068d\u068b\3\2\2\2\u068e\u0684\3")
        buf.write("\2\2\2\u068e\u068f\3\2\2\2\u068f\u069a\3\2\2\2\u0690\u0691")
        buf.write("\7o\2\2\u0691\u0692\7*\2\2\u0692\u0697\5\u0088E\2\u0693")
        buf.write("\u0694\7\7\2\2\u0694\u0696\5\u0088E\2\u0695\u0693\3\2")
        buf.write("\2\2\u0696\u0699\3\2\2\2\u0697\u0695\3\2\2\2\u0697\u0698")
        buf.write("\3\2\2\2\u0698\u069b\3\2\2\2\u0699\u0697\3\2\2\2\u069a")
        buf.write("\u0690\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u069d\3\2\2\2")
        buf.write("\u069c\u069e\5x=\2\u069d\u069c\3\2\2\2\u069d\u069e\3\2")
        buf.write("\2\2\u069e\u069f\3\2\2\2\u069f\u06a1\7\6\2\2\u06a0\u067f")
        buf.write("\3\2\2\2\u06a0\u0680\3\2\2\2\u06a1w\3\2\2\2\u06a2\u06aa")
        buf.write("\5z>\2\u06a3\u06a4\7\u00b5\2\2\u06a4\u06a5\7g\2\2\u06a5")
        buf.write("\u06ab\7\u00b7\2\2\u06a6\u06a7\7\u009e\2\2\u06a7\u06ab")
        buf.write("\7\u0080\2\2\u06a8\u06ab\7P\2\2\u06a9\u06ab\7\u00b6\2")
        buf.write("\2\u06aa\u06a3\3\2\2\2\u06aa\u06a6\3\2\2\2\u06aa\u06a8")
        buf.write("\3\2\2\2\u06aa\u06a9\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab")
        buf.write("y\3\2\2\2\u06ac\u06b3\t\23\2\2\u06ad\u06b4\5\u0090I\2")
        buf.write("\u06ae\u06af\7)\2\2\u06af\u06b0\5\u008cG\2\u06b0\u06b1")
        buf.write("\7\"\2\2\u06b1\u06b2\5\u008eH\2\u06b2\u06b4\3\2\2\2\u06b3")
        buf.write("\u06ad\3\2\2\2\u06b3\u06ae\3\2\2\2\u06b4{\3\2\2\2\u06b5")
        buf.write("\u06b6\5\u00d8m\2\u06b6\u06c0\7\5\2\2\u06b7\u06bc\5B\"")
        buf.write("\2\u06b8\u06b9\7\7\2\2\u06b9\u06bb\5B\"\2\u06ba\u06b8")
        buf.write("\3\2\2\2\u06bb\u06be\3\2\2\2\u06bc\u06ba\3\2\2\2\u06bc")
        buf.write("\u06bd\3\2\2\2\u06bd\u06c1\3\2\2\2\u06be\u06bc\3\2\2\2")
        buf.write("\u06bf\u06c1\7\t\2\2\u06c0\u06b7\3\2\2\2\u06c0\u06bf\3")
        buf.write("\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06c3\7\6\2\2\u06c3}")
        buf.write("\3\2\2\2\u06c4\u06c5\5\u00dan\2\u06c5\u06d2\7\5\2\2\u06c6")
        buf.write("\u06c8\7@\2\2\u06c7\u06c6\3\2\2\2\u06c7\u06c8\3\2\2\2")
        buf.write("\u06c8\u06c9\3\2\2\2\u06c9\u06ce\5B\"\2\u06ca\u06cb\7")
        buf.write("\7\2\2\u06cb\u06cd\5B\"\2\u06cc\u06ca\3\2\2\2\u06cd\u06d0")
        buf.write("\3\2\2\2\u06ce\u06cc\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cf")
        buf.write("\u06d3\3\2\2\2\u06d0\u06ce\3\2\2\2\u06d1\u06d3\7\t\2\2")
        buf.write("\u06d2\u06c7\3\2\2\2\u06d2\u06d1\3\2\2\2\u06d2\u06d3\3")
        buf.write("\2\2\2\u06d3\u06d4\3\2\2\2\u06d4\u06d6\7\6\2\2\u06d5\u06d7")
        buf.write("\5r:\2\u06d6\u06d5\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7\177")
        buf.write("\3\2\2\2\u06d8\u06d9\5\u0092J\2\u06d9\u06e3\7\5\2\2\u06da")
        buf.write("\u06df\5B\"\2\u06db\u06dc\7\7\2\2\u06dc\u06de\5B\"\2\u06dd")
        buf.write("\u06db\3\2\2\2\u06de\u06e1\3\2\2\2\u06df\u06dd\3\2\2\2")
        buf.write("\u06df\u06e0\3\2\2\2\u06e0\u06e4\3\2\2\2\u06e1\u06df\3")
        buf.write("\2\2\2\u06e2\u06e4\7\t\2\2\u06e3\u06da\3\2\2\2\u06e3\u06e2")
        buf.write("\3\2\2\2\u06e3\u06e4\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5")
        buf.write("\u06e7\7\6\2\2\u06e6\u06e8\5r:\2\u06e7\u06e6\3\2\2\2\u06e7")
        buf.write("\u06e8\3\2\2\2\u06e8\u06e9\3\2\2\2\u06e9\u06ec\7\u0099")
        buf.write("\2\2\u06ea\u06ed\5t;\2\u06eb\u06ed\5\u00d0i\2\u06ec\u06ea")
        buf.write("\3\2\2\2\u06ec\u06eb\3\2\2\2\u06ed\u0081\3\2\2\2\u06ee")
        buf.write("\u06f0\7\u0096\2\2\u06ef\u06f1\7v\2\2\u06f0\u06ef\3\2")
        buf.write("\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f7")
        buf.write("\58\35\2\u06f3\u06f4\7\7\2\2\u06f4\u06f6\58\35\2\u06f5")
        buf.write("\u06f3\3\2\2\2\u06f6\u06f9\3\2\2\2\u06f7\u06f5\3\2\2\2")
        buf.write("\u06f7\u06f8\3\2\2\2\u06f8\u0083\3\2\2\2\u06f9\u06f7\3")
        buf.write("\2\2\2\u06fa\u06fb\7o\2\2\u06fb\u06fc\7*\2\2\u06fc\u0701")
        buf.write("\5\u0088E\2\u06fd\u06fe\7\7\2\2\u06fe\u0700\5\u0088E\2")
        buf.write("\u06ff\u06fd\3\2\2\2\u0700\u0703\3\2\2\2\u0701\u06ff\3")
        buf.write("\2\2\2\u0701\u0702\3\2\2\2\u0702\u0085\3\2\2\2\u0703\u0701")
        buf.write("\3\2\2\2\u0704\u0705\7d\2\2\u0705\u0708\5B\"\2\u0706\u0707")
        buf.write("\t\24\2\2\u0707\u0709\5B\"\2\u0708\u0706\3\2\2\2\u0708")
        buf.write("\u0709\3\2\2\2\u0709\u0087\3\2\2\2\u070a\u070d\5B\"\2")
        buf.write("\u070b\u070c\7/\2\2\u070c\u070e\5\u00bc_\2\u070d\u070b")
        buf.write("\3\2\2\2\u070d\u070e\3\2\2\2\u070e\u0710\3\2\2\2\u070f")
        buf.write("\u0711\5\u008aF\2\u0710\u070f\3\2\2\2\u0710\u0711\3\2")
        buf.write("\2\2\u0711\u0714\3\2\2\2\u0712\u0713\7\u00b0\2\2\u0713")
        buf.write("\u0715\t\25\2\2\u0714\u0712\3\2\2\2\u0714\u0715\3\2\2")
        buf.write("\2\u0715\u0089\3\2\2\2\u0716\u0717\t\26\2\2\u0717\u008b")
        buf.write("\3\2\2\2\u0718\u0719\5B\"\2\u0719\u071a\7\u009c\2\2\u071a")
        buf.write("\u0723\3\2\2\2\u071b\u071c\5B\"\2\u071c\u071d\7\u009f")
        buf.write("\2\2\u071d\u0723\3\2\2\2\u071e\u071f\7\u009e\2\2\u071f")
        buf.write("\u0723\7\u0080\2\2\u0720\u0721\7\u009d\2\2\u0721\u0723")
        buf.write("\7\u009c\2\2\u0722\u0718\3\2\2\2\u0722\u071b\3\2\2\2\u0722")
        buf.write("\u071e\3\2\2\2\u0722\u0720\3\2\2\2\u0723\u008d\3\2\2\2")
        buf.write("\u0724\u0725\5B\"\2\u0725\u0726\7\u009c\2\2\u0726\u072f")
        buf.write("\3\2\2\2\u0727\u0728\5B\"\2\u0728\u0729\7\u009f\2\2\u0729")
        buf.write("\u072f\3\2\2\2\u072a\u072b\7\u009e\2\2\u072b\u072f\7\u0080")
        buf.write("\2\2\u072c\u072d\7\u009d\2\2\u072d\u072f\7\u009f\2\2\u072e")
        buf.write("\u0724\3\2\2\2\u072e\u0727\3\2\2\2\u072e\u072a\3\2\2\2")
        buf.write("\u072e\u072c\3\2\2\2\u072f\u008f\3\2\2\2\u0730\u0731\5")
        buf.write("B\"\2\u0731\u0732\7\u009c\2\2\u0732\u0738\3\2\2\2\u0733")
        buf.write("\u0734\7\u009d\2\2\u0734\u0738\7\u009c\2\2\u0735\u0736")
        buf.write("\7\u009e\2\2\u0736\u0738\7\u0080\2\2\u0737\u0730\3\2\2")
        buf.write("\2\u0737\u0733\3\2\2\2\u0737\u0735\3\2\2\2\u0738\u0091")
        buf.write("\3\2\2\2\u0739\u073a\t\27\2\2\u073a\u073b\7\5\2\2\u073b")
        buf.write("\u073c\5B\"\2\u073c\u073d\7\6\2\2\u073d\u073e\7\u0099")
        buf.write("\2\2\u073e\u0740\7\5\2\2\u073f\u0741\5\u0098M\2\u0740")
        buf.write("\u073f\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u0742\3\2\2\2")
        buf.write("\u0742\u0744\5\u009cO\2\u0743\u0745\5z>\2\u0744\u0743")
        buf.write("\3\2\2\2\u0744\u0745\3\2\2\2\u0745\u0746\3\2\2\2\u0746")
        buf.write("\u0747\7\6\2\2\u0747\u078f\3\2\2\2\u0748\u0749\t\30\2")
        buf.write("\2\u0749\u074a\7\5\2\2\u074a\u074b\7\6\2\2\u074b\u074c")
        buf.write("\7\u0099\2\2\u074c\u074e\7\5\2\2\u074d\u074f\5\u0098M")
        buf.write("\2\u074e\u074d\3\2\2\2\u074e\u074f\3\2\2\2\u074f\u0751")
        buf.write("\3\2\2\2\u0750\u0752\5\u009aN\2\u0751\u0750\3\2\2\2\u0751")
        buf.write("\u0752\3\2\2\2\u0752\u0753\3\2\2\2\u0753\u078f\7\6\2\2")
        buf.write("\u0754\u0755\t\31\2\2\u0755\u0756\7\5\2\2\u0756\u0757")
        buf.write("\7\6\2\2\u0757\u0758\7\u0099\2\2\u0758\u075a\7\5\2\2\u0759")
        buf.write("\u075b\5\u0098M\2\u075a\u0759\3\2\2\2\u075a\u075b\3\2")
        buf.write("\2\2\u075b\u075c\3\2\2\2\u075c\u075d\5\u009cO\2\u075d")
        buf.write("\u075e\7\6\2\2\u075e\u078f\3\2\2\2\u075f\u0760\t\32\2")
        buf.write("\2\u0760\u0761\7\5\2\2\u0761\u0763\5B\"\2\u0762\u0764")
        buf.write("\5\u0094K\2\u0763\u0762\3\2\2\2\u0763\u0764\3\2\2\2\u0764")
        buf.write("\u0766\3\2\2\2\u0765\u0767\5\u0096L\2\u0766\u0765\3\2")
        buf.write("\2\2\u0766\u0767\3\2\2\2\u0767\u0768\3\2\2\2\u0768\u0769")
        buf.write("\7\6\2\2\u0769\u076a\7\u0099\2\2\u076a\u076c\7\5\2\2\u076b")
        buf.write("\u076d\5\u0098M\2\u076c\u076b\3\2\2\2\u076c\u076d\3\2")
        buf.write("\2\2\u076d\u076e\3\2\2\2\u076e\u076f\5\u009cO\2\u076f")
        buf.write("\u0770\7\6\2\2\u0770\u078f\3\2\2\2\u0771\u0772\7\u00a5")
        buf.write("\2\2\u0772\u0773\7\5\2\2\u0773\u0774\5B\"\2\u0774\u0775")
        buf.write("\7\7\2\2\u0775\u0776\5$\23\2\u0776\u0777\7\6\2\2\u0777")
        buf.write("\u0778\7\u0099\2\2\u0778\u077a\7\5\2\2\u0779\u077b\5\u0098")
        buf.write("M\2\u077a\u0779\3\2\2\2\u077a\u077b\3\2\2\2\u077b\u077c")
        buf.write("\3\2\2\2\u077c\u077e\5\u009cO\2\u077d\u077f\5z>\2\u077e")
        buf.write("\u077d\3\2\2\2\u077e\u077f\3\2\2\2\u077f\u0780\3\2\2\2")
        buf.write("\u0780\u0781\7\6\2\2\u0781\u078f\3\2\2\2\u0782\u0783\7")
        buf.write("\u00a6\2\2\u0783\u0784\7\5\2\2\u0784\u0785\5B\"\2\u0785")
        buf.write("\u0786\7\6\2\2\u0786\u0787\7\u0099\2\2\u0787\u0789\7\5")
        buf.write("\2\2\u0788\u078a\5\u0098M\2\u0789\u0788\3\2\2\2\u0789")
        buf.write("\u078a\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078c\5\u009c")
        buf.write("O\2\u078c\u078d\7\6\2\2\u078d\u078f\3\2\2\2\u078e\u0739")
        buf.write("\3\2\2\2\u078e\u0748\3\2\2\2\u078e\u0754\3\2\2\2\u078e")
        buf.write("\u075f\3\2\2\2\u078e\u0771\3\2\2\2\u078e\u0782\3\2\2\2")
        buf.write("\u078f\u0093\3\2\2\2\u0790\u0791\7\7\2\2\u0791\u0792\5")
        buf.write("$\23\2\u0792\u0095\3\2\2\2\u0793\u0794\7\7\2\2\u0794\u0795")
        buf.write("\5$\23\2\u0795\u0097\3\2\2\2\u0796\u0797\7\u009a\2\2\u0797")
        buf.write("\u0799\7*\2\2\u0798\u079a\5B\"\2\u0799\u0798\3\2\2\2\u079a")
        buf.write("\u079b\3\2\2\2\u079b\u0799\3\2\2\2\u079b\u079c\3\2\2\2")
        buf.write("\u079c\u0099\3\2\2\2\u079d\u079e\7o\2\2\u079e\u07a0\7")
        buf.write("*\2\2\u079f\u07a1\5B\"\2\u07a0\u079f\3\2\2\2\u07a1\u07a2")
        buf.write("\3\2\2\2\u07a2\u07a0\3\2\2\2\u07a2\u07a3\3\2\2\2\u07a3")
        buf.write("\u009b\3\2\2\2\u07a4\u07a5\7o\2\2\u07a5\u07a6\7*\2\2\u07a6")
        buf.write("\u07a7\5\u009eP\2\u07a7\u009d\3\2\2\2\u07a8\u07aa\5B\"")
        buf.write("\2\u07a9\u07ab\5\u008aF\2\u07aa\u07a9\3\2\2\2\u07aa\u07ab")
        buf.write("\3\2\2\2\u07ab\u07b3\3\2\2\2\u07ac\u07ad\7\7\2\2\u07ad")
        buf.write("\u07af\5B\"\2\u07ae\u07b0\5\u008aF\2\u07af\u07ae\3\2\2")
        buf.write("\2\u07af\u07b0\3\2\2\2\u07b0\u07b2\3\2\2\2\u07b1\u07ac")
        buf.write("\3\2\2\2\u07b2\u07b5\3\2\2\2\u07b3\u07b1\3\2\2\2\u07b3")
        buf.write("\u07b4\3\2\2\2\u07b4\u009f\3\2\2\2\u07b5\u07b3\3\2\2\2")
        buf.write("\u07b6\u07b7\5R*\2\u07b7\u00a1\3\2\2\2\u07b8\u07b9\5R")
        buf.write("*\2\u07b9\u00a3\3\2\2\2\u07ba\u07bb\t\33\2\2\u07bb\u00a5")
        buf.write("\3\2\2\2\u07bc\u07bd\7\u00bd\2\2\u07bd\u00a7\3\2\2\2\u07be")
        buf.write("\u07c1\5B\"\2\u07bf\u07c1\5\36\20\2\u07c0\u07be\3\2\2")
        buf.write("\2\u07c0\u07bf\3\2\2\2\u07c1\u00a9\3\2\2\2\u07c2\u07c3")
        buf.write("\t\34\2\2\u07c3\u00ab\3\2\2\2\u07c4\u07c5\t\35\2\2\u07c5")
        buf.write("\u00ad\3\2\2\2\u07c6\u07c7\5\u00dep\2\u07c7\u00af\3\2")
        buf.write("\2\2\u07c8\u07c9\5\u00dep\2\u07c9\u00b1\3\2\2\2\u07ca")
        buf.write("\u07cb\5\u00dep\2\u07cb\u00b3\3\2\2\2\u07cc\u07cd\5\u00de")
        buf.write("p\2\u07cd\u00b5\3\2\2\2\u07ce\u07cf\5\u00dep\2\u07cf\u00b7")
        buf.write("\3\2\2\2\u07d0\u07d1\5\u00dep\2\u07d1\u00b9\3\2\2\2\u07d2")
        buf.write("\u07d3\5\u00dep\2\u07d3\u00bb\3\2\2\2\u07d4\u07d5\5\u00de")
        buf.write("p\2\u07d5\u00bd\3\2\2\2\u07d6\u07d7\5\u00dep\2\u07d7\u00bf")
        buf.write("\3\2\2\2\u07d8\u07d9\5\u00dep\2\u07d9\u00c1\3\2\2\2\u07da")
        buf.write("\u07db\5\u00dep\2\u07db\u00c3\3\2\2\2\u07dc\u07dd\5\u00de")
        buf.write("p\2\u07dd\u00c5\3\2\2\2\u07de\u07df\5\u00dep\2\u07df\u00c7")
        buf.write("\3\2\2\2\u07e0\u07e1\5\u00dep\2\u07e1\u00c9\3\2\2\2\u07e2")
        buf.write("\u07e3\5\u00dep\2\u07e3\u00cb\3\2\2\2\u07e4\u07e5\5\u00de")
        buf.write("p\2\u07e5\u00cd\3\2\2\2\u07e6\u07e7\5\u00dep\2\u07e7\u00cf")
        buf.write("\3\2\2\2\u07e8\u07e9\5\u00dep\2\u07e9\u00d1\3\2\2\2\u07ea")
        buf.write("\u07eb\5\u00dep\2\u07eb\u00d3\3\2\2\2\u07ec\u07ed\5\u00de")
        buf.write("p\2\u07ed\u00d5\3\2\2\2\u07ee\u07ef\5\u00dep\2\u07ef\u00d7")
        buf.write("\3\2\2\2\u07f0\u07f1\5\u00dep\2\u07f1\u00d9\3\2\2\2\u07f2")
        buf.write("\u07f3\5\u00dep\2\u07f3\u00db\3\2\2\2\u07f4\u07f5\5\u00de")
        buf.write("p\2\u07f5\u00dd\3\2\2\2\u07f6\u07fe\7\u00ba\2\2\u07f7")
        buf.write("\u07fe\5\u00acW\2\u07f8\u07fe\7\u00bd\2\2\u07f9\u07fa")
        buf.write("\7\5\2\2\u07fa\u07fb\5\u00dep\2\u07fb\u07fc\7\6\2\2\u07fc")
        buf.write("\u07fe\3\2\2\2\u07fd\u07f6\3\2\2\2\u07fd\u07f7\3\2\2\2")
        buf.write("\u07fd\u07f8\3\2\2\2\u07fd\u07f9\3\2\2\2\u07fe\u00df\3")
        buf.write("\2\2\2\u0123\u00e3\u00eb\u00f2\u00f7\u00fd\u0103\u0105")
        buf.write("\u011f\u0126\u012d\u0133\u0137\u013c\u013f\u0146\u0149")
        buf.write("\u014d\u0155\u0159\u015b\u015f\u0163\u0167\u016a\u0171")
        buf.write("\u0177\u017d\u0182\u018d\u0193\u0197\u019b\u019e\u01a2")
        buf.write("\u01a8\u01ad\u01b6\u01bd\u01c3\u01c7\u01cb\u01d0\u01d6")
        buf.write("\u01e2\u01e6\u01eb\u01ee\u01f1\u01f6\u01f9\u0207\u020e")
        buf.write("\u0215\u0217\u021a\u0220\u0225\u022d\u0232\u0241\u0247")
        buf.write("\u0251\u0256\u0260\u0264\u0266\u026a\u026f\u0271\u0279")
        buf.write("\u027f\u0284\u028b\u0296\u0299\u029b\u02a2\u02a6\u02ad")
        buf.write("\u02b3\u02b9\u02bf\u02c4\u02cd\u02d2\u02dd\u02e2\u02ed")
        buf.write("\u02f2\u02f6\u0306\u0310\u0315\u031d\u0329\u032e\u0336")
        buf.write("\u033d\u0340\u0347\u034a\u034d\u0351\u0359\u035e\u0368")
        buf.write("\u036d\u0376\u037d\u0381\u0385\u0388\u0390\u039d\u03a0")
        buf.write("\u03a8\u03b1\u03b5\u03ba\u03d8\u03e4\u03e9\u03f5\u03fb")
        buf.write("\u0402\u0406\u0410\u0413\u0419\u041f\u0428\u042b\u042f")
        buf.write("\u0431\u0433\u043c\u0443\u044a\u0450\u0455\u045d\u0462")
        buf.write("\u046b\u0476\u047d\u0481\u0484\u0488\u0492\u0498\u049a")
        buf.write("\u04a2\u04a9\u04b0\u04b5\u04b7\u04bd\u04c6\u04cb\u04d2")
        buf.write("\u04d6\u04d8\u04db\u04e3\u04e7\u04ea\u04f0\u04f4\u04f9")
        buf.write("\u0500\u0509\u050d\u050f\u0513\u051c\u0521\u0523\u0530")
        buf.write("\u0533\u053c\u0547\u054e\u0551\u0556\u055a\u055d\u0560")
        buf.write("\u0565\u0569\u056e\u0571\u0574\u0579\u057d\u0580\u0587")
        buf.write("\u058c\u0595\u059a\u059d\u05a5\u05a9\u05b1\u05b4\u05b6")
        buf.write("\u05bf\u05c2\u05c4\u05c8\u05cc\u05d0\u05d3\u05de\u05e3")
        buf.write("\u05e7\u05eb\u05ee\u05f3\u05f9\u0600\u0607\u060c\u0614")
        buf.write("\u061a\u061f\u0625\u062c\u0633\u0638\u063b\u063e\u0643")
        buf.write("\u0648\u064f\u0653\u0657\u0661\u066a\u066d\u0676\u067a")
        buf.write("\u0682\u068b\u068e\u0697\u069a\u069d\u06a0\u06aa\u06b3")
        buf.write("\u06bc\u06c0\u06c7\u06ce\u06d2\u06d6\u06df\u06e3\u06e7")
        buf.write("\u06ec\u06f0\u06f7\u0701\u0708\u070d\u0710\u0714\u0722")
        buf.write("\u072e\u0737\u0740\u0744\u074e\u0751\u075a\u0763\u0766")
        buf.write("\u076c\u077a\u077e\u0789\u078e\u079b\u07a2\u07aa\u07af")
        buf.write("\u07b3\u07c0\u07fd")
        return buf.getvalue()


class SQLiteParser ( Parser ):

    grammarFileName = "SQLiteParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "ABORT_", "ACTION_", "ADD_", "AFTER_", "ALL_", "ALTER_", 
                      "ANALYZE_", "AND_", "AS_", "ASC_", "ATTACH_", "AUTOINCREMENT_", 
                      "BEFORE_", "BEGIN_", "BETWEEN_", "BY_", "CASCADE_", 
                      "CASE_", "CAST_", "CHECK_", "COLLATE_", "COLUMN_", 
                      "COMMIT_", "CONFLICT_", "CONSTRAINT_", "CREATE_", 
                      "CROSS_", "CURRENT_DATE_", "CURRENT_TIME_", "CURRENT_TIMESTAMP_", 
                      "DATABASE_", "DEFAULT_", "DEFERRABLE_", "DEFERRED_", 
                      "DELETE_", "DESC_", "DETACH_", "DISTINCT_", "DROP_", 
                      "EACH_", "ELSE_", "END_", "ESCAPE_", "EXCEPT_", "EXCLUSIVE_", 
                      "EXISTS_", "EXPLAIN_", "FAIL_", "FOR_", "FOREIGN_", 
                      "FROM_", "FULL_", "GLOB_", "GROUP_", "HAVING_", "IF_", 
                      "IGNORE_", "IMMEDIATE_", "IN_", "INDEX_", "INDEXED_", 
                      "INITIALLY_", "INNER_", "INSERT_", "INSTEAD_", "INTERSECT_", 
                      "INTO_", "IS_", "ISNULL_", "JOIN_", "KEY_", "LEFT_", 
                      "LIKE_", "LIMIT_", "MATCH_", "NATURAL_", "NO_", "NOT_", 
                      "NOTNULL_", "NULL_", "OF_", "OFFSET_", "ON_", "OR_", 
                      "ORDER_", "OUTER_", "PLAN_", "PRAGMA_", "PRIMARY_", 
                      "QUERY_", "RAISE_", "RECURSIVE_", "REFERENCES_", "REGEXP_", 
                      "REINDEX_", "RELEASE_", "RENAME_", "REPLACE_", "RESTRICT_", 
                      "RIGHT_", "ROLLBACK_", "ROW_", "ROWS_", "SAVEPOINT_", 
                      "SELECT_", "SET_", "TABLE_", "TEMP_", "TEMPORARY_", 
                      "THEN_", "TO_", "TRANSACTION_", "TRIGGER_", "UNION_", 
                      "UNIQUE_", "UPDATE_", "USING_", "VACUUM_", "VALUES_", 
                      "VIEW_", "VIRTUAL_", "WHEN_", "WHERE_", "WITH_", "WITHOUT_", 
                      "FIRST_VALUE_", "OVER_", "PARTITION_", "RANGE_", "PRECEDING_", 
                      "UNBOUNDED_", "CURRENT_", "FOLLOWING_", "CUME_DIST_", 
                      "DENSE_RANK_", "LAG_", "LAST_VALUE_", "LEAD_", "NTH_VALUE_", 
                      "NTILE_", "PERCENT_RANK_", "RANK_", "ROW_NUMBER_", 
                      "GENERATED_", "ALWAYS_", "STORED_", "TRUE_", "FALSE_", 
                      "WINDOW_", "NULLS_", "FIRST_", "LAST_", "FILTER_", 
                      "GROUPS_", "EXCLUDE_", "TIES_", "OTHERS_", "DO_", 
                      "NOTHING_", "IDENTIFIER", "NUMERIC_LITERAL", "BIND_PARAMETER", 
                      "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                      "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_sql_stmt_list = 1
    RULE_sql_stmt = 2
    RULE_alter_table_stmt = 3
    RULE_analyze_stmt = 4
    RULE_attach_stmt = 5
    RULE_begin_stmt = 6
    RULE_commit_stmt = 7
    RULE_rollback_stmt = 8
    RULE_savepoint_stmt = 9
    RULE_release_stmt = 10
    RULE_create_index_stmt = 11
    RULE_indexed_column = 12
    RULE_create_table_stmt = 13
    RULE_column_def = 14
    RULE_type_name = 15
    RULE_column_constraint = 16
    RULE_signed_number = 17
    RULE_table_constraint = 18
    RULE_foreign_key_clause = 19
    RULE_conflict_clause = 20
    RULE_create_trigger_stmt = 21
    RULE_create_view_stmt = 22
    RULE_create_virtual_table_stmt = 23
    RULE_with_clause = 24
    RULE_cte_table_name = 25
    RULE_recursive_cte = 26
    RULE_common_table_expression = 27
    RULE_delete_stmt = 28
    RULE_delete_stmt_limited = 29
    RULE_detach_stmt = 30
    RULE_drop_stmt = 31
    RULE_expr = 32
    RULE_raise_function = 33
    RULE_literal_value = 34
    RULE_insert_stmt = 35
    RULE_upsert_clause = 36
    RULE_pragma_stmt = 37
    RULE_pragma_value = 38
    RULE_reindex_stmt = 39
    RULE_select_stmt = 40
    RULE_join_clause = 41
    RULE_select_core = 42
    RULE_factored_select_stmt = 43
    RULE_simple_select_stmt = 44
    RULE_compound_select_stmt = 45
    RULE_table_or_subquery = 46
    RULE_result_column = 47
    RULE_join_operator = 48
    RULE_join_constraint = 49
    RULE_compound_operator = 50
    RULE_update_stmt = 51
    RULE_column_name_list = 52
    RULE_update_stmt_limited = 53
    RULE_qualified_table_name = 54
    RULE_vacuum_stmt = 55
    RULE_filter_clause = 56
    RULE_window_defn = 57
    RULE_over_clause = 58
    RULE_frame_spec = 59
    RULE_frame_clause = 60
    RULE_simple_function_invocation = 61
    RULE_aggregate_function_invocation = 62
    RULE_window_function_invocation = 63
    RULE_common_table_stmt = 64
    RULE_order_by_stmt = 65
    RULE_limit_stmt = 66
    RULE_ordering_term = 67
    RULE_asc_desc = 68
    RULE_frame_left = 69
    RULE_frame_right = 70
    RULE_frame_single = 71
    RULE_window_function = 72
    RULE_of_OF_fset = 73
    RULE_default_DEFAULT__value = 74
    RULE_partition_by = 75
    RULE_order_by_expr = 76
    RULE_order_by_expr_asc_desc = 77
    RULE_expr_asc_desc = 78
    RULE_initial_select = 79
    RULE_recursive__select = 80
    RULE_unary_operator = 81
    RULE_error_message = 82
    RULE_module_argument = 83
    RULE_column_alias = 84
    RULE_keyword = 85
    RULE_name = 86
    RULE_function_name = 87
    RULE_schema_name = 88
    RULE_table_name = 89
    RULE_table_or_index_name = 90
    RULE_new_table_name = 91
    RULE_column_name = 92
    RULE_collation_name = 93
    RULE_foreign_table = 94
    RULE_index_name = 95
    RULE_trigger_name = 96
    RULE_view_name = 97
    RULE_module_name = 98
    RULE_pragma_name = 99
    RULE_savepoint_name = 100
    RULE_table_alias = 101
    RULE_transaction_name = 102
    RULE_window_name = 103
    RULE_alias = 104
    RULE_filename = 105
    RULE_base_window_name = 106
    RULE_simple_func = 107
    RULE_aggregate_func = 108
    RULE_table_function_name = 109
    RULE_any_name = 110

    ruleNames =  [ "parse", "sql_stmt_list", "sql_stmt", "alter_table_stmt", 
                   "analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", 
                   "rollback_stmt", "savepoint_stmt", "release_stmt", "create_index_stmt", 
                   "indexed_column", "create_table_stmt", "column_def", 
                   "type_name", "column_constraint", "signed_number", "table_constraint", 
                   "foreign_key_clause", "conflict_clause", "create_trigger_stmt", 
                   "create_view_stmt", "create_virtual_table_stmt", "with_clause", 
                   "cte_table_name", "recursive_cte", "common_table_expression", 
                   "delete_stmt", "delete_stmt_limited", "detach_stmt", 
                   "drop_stmt", "expr", "raise_function", "literal_value", 
                   "insert_stmt", "upsert_clause", "pragma_stmt", "pragma_value", 
                   "reindex_stmt", "select_stmt", "join_clause", "select_core", 
                   "factored_select_stmt", "simple_select_stmt", "compound_select_stmt", 
                   "table_or_subquery", "result_column", "join_operator", 
                   "join_constraint", "compound_operator", "update_stmt", 
                   "column_name_list", "update_stmt_limited", "qualified_table_name", 
                   "vacuum_stmt", "filter_clause", "window_defn", "over_clause", 
                   "frame_spec", "frame_clause", "simple_function_invocation", 
                   "aggregate_function_invocation", "window_function_invocation", 
                   "common_table_stmt", "order_by_stmt", "limit_stmt", "ordering_term", 
                   "asc_desc", "frame_left", "frame_right", "frame_single", 
                   "window_function", "of_OF_fset", "default_DEFAULT__value", 
                   "partition_by", "order_by_expr", "order_by_expr_asc_desc", 
                   "expr_asc_desc", "initial_select", "recursive__select", 
                   "unary_operator", "error_message", "module_argument", 
                   "column_alias", "keyword", "name", "function_name", "schema_name", 
                   "table_name", "table_or_index_name", "new_table_name", 
                   "column_name", "collation_name", "foreign_table", "index_name", 
                   "trigger_name", "view_name", "module_name", "pragma_name", 
                   "savepoint_name", "table_alias", "transaction_name", 
                   "window_name", "alias", "filename", "base_window_name", 
                   "simple_func", "aggregate_func", "table_function_name", 
                   "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    ABORT_=25
    ACTION_=26
    ADD_=27
    AFTER_=28
    ALL_=29
    ALTER_=30
    ANALYZE_=31
    AND_=32
    AS_=33
    ASC_=34
    ATTACH_=35
    AUTOINCREMENT_=36
    BEFORE_=37
    BEGIN_=38
    BETWEEN_=39
    BY_=40
    CASCADE_=41
    CASE_=42
    CAST_=43
    CHECK_=44
    COLLATE_=45
    COLUMN_=46
    COMMIT_=47
    CONFLICT_=48
    CONSTRAINT_=49
    CREATE_=50
    CROSS_=51
    CURRENT_DATE_=52
    CURRENT_TIME_=53
    CURRENT_TIMESTAMP_=54
    DATABASE_=55
    DEFAULT_=56
    DEFERRABLE_=57
    DEFERRED_=58
    DELETE_=59
    DESC_=60
    DETACH_=61
    DISTINCT_=62
    DROP_=63
    EACH_=64
    ELSE_=65
    END_=66
    ESCAPE_=67
    EXCEPT_=68
    EXCLUSIVE_=69
    EXISTS_=70
    EXPLAIN_=71
    FAIL_=72
    FOR_=73
    FOREIGN_=74
    FROM_=75
    FULL_=76
    GLOB_=77
    GROUP_=78
    HAVING_=79
    IF_=80
    IGNORE_=81
    IMMEDIATE_=82
    IN_=83
    INDEX_=84
    INDEXED_=85
    INITIALLY_=86
    INNER_=87
    INSERT_=88
    INSTEAD_=89
    INTERSECT_=90
    INTO_=91
    IS_=92
    ISNULL_=93
    JOIN_=94
    KEY_=95
    LEFT_=96
    LIKE_=97
    LIMIT_=98
    MATCH_=99
    NATURAL_=100
    NO_=101
    NOT_=102
    NOTNULL_=103
    NULL_=104
    OF_=105
    OFFSET_=106
    ON_=107
    OR_=108
    ORDER_=109
    OUTER_=110
    PLAN_=111
    PRAGMA_=112
    PRIMARY_=113
    QUERY_=114
    RAISE_=115
    RECURSIVE_=116
    REFERENCES_=117
    REGEXP_=118
    REINDEX_=119
    RELEASE_=120
    RENAME_=121
    REPLACE_=122
    RESTRICT_=123
    RIGHT_=124
    ROLLBACK_=125
    ROW_=126
    ROWS_=127
    SAVEPOINT_=128
    SELECT_=129
    SET_=130
    TABLE_=131
    TEMP_=132
    TEMPORARY_=133
    THEN_=134
    TO_=135
    TRANSACTION_=136
    TRIGGER_=137
    UNION_=138
    UNIQUE_=139
    UPDATE_=140
    USING_=141
    VACUUM_=142
    VALUES_=143
    VIEW_=144
    VIRTUAL_=145
    WHEN_=146
    WHERE_=147
    WITH_=148
    WITHOUT_=149
    FIRST_VALUE_=150
    OVER_=151
    PARTITION_=152
    RANGE_=153
    PRECEDING_=154
    UNBOUNDED_=155
    CURRENT_=156
    FOLLOWING_=157
    CUME_DIST_=158
    DENSE_RANK_=159
    LAG_=160
    LAST_VALUE_=161
    LEAD_=162
    NTH_VALUE_=163
    NTILE_=164
    PERCENT_RANK_=165
    RANK_=166
    ROW_NUMBER_=167
    GENERATED_=168
    ALWAYS_=169
    STORED_=170
    TRUE_=171
    FALSE_=172
    WINDOW_=173
    NULLS_=174
    FIRST_=175
    LAST_=176
    FILTER_=177
    GROUPS_=178
    EXCLUDE_=179
    TIES_=180
    OTHERS_=181
    DO_=182
    NOTHING_=183
    IDENTIFIER=184
    NUMERIC_LITERAL=185
    BIND_PARAMETER=186
    STRING_LITERAL=187
    BLOB_LITERAL=188
    SINGLE_LINE_COMMENT=189
    MULTILINE_COMMENT=190
    SPACES=191
    UNEXPECTED_CHAR=192

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.3")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ParseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLiteParser.EOF, 0)

        def sql_stmt_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmt_listContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_parse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParse" ):
                listener.enterParse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParse" ):
                listener.exitParse(self)




    def parse(self):

        localctx = SQLiteParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.SCOL) | (1 << SQLiteParser.ALTER_) | (1 << SQLiteParser.ANALYZE_) | (1 << SQLiteParser.ATTACH_) | (1 << SQLiteParser.BEGIN_) | (1 << SQLiteParser.COMMIT_) | (1 << SQLiteParser.CREATE_) | (1 << SQLiteParser.DEFAULT_) | (1 << SQLiteParser.DELETE_) | (1 << SQLiteParser.DETACH_) | (1 << SQLiteParser.DROP_))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (SQLiteParser.END_ - 66)) | (1 << (SQLiteParser.EXPLAIN_ - 66)) | (1 << (SQLiteParser.INSERT_ - 66)) | (1 << (SQLiteParser.PRAGMA_ - 66)) | (1 << (SQLiteParser.REINDEX_ - 66)) | (1 << (SQLiteParser.RELEASE_ - 66)) | (1 << (SQLiteParser.REPLACE_ - 66)) | (1 << (SQLiteParser.ROLLBACK_ - 66)) | (1 << (SQLiteParser.SAVEPOINT_ - 66)) | (1 << (SQLiteParser.SELECT_ - 66)))) != 0) or ((((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & ((1 << (SQLiteParser.UPDATE_ - 140)) | (1 << (SQLiteParser.VACUUM_ - 140)) | (1 << (SQLiteParser.VALUES_ - 140)) | (1 << (SQLiteParser.WITH_ - 140)))) != 0):
                self.state = 222
                self.sql_stmt_list()
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 228
            self.match(SQLiteParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmtContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_list" ):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_list" ):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = SQLiteParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.SCOL:
                self.state = 230
                self.match(SQLiteParser.SCOL)
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 236
            self.sql_stmt()
            self.state = 245
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 238 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 237
                        self.match(SQLiteParser.SCOL)
                        self.state = 240 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==SQLiteParser.SCOL):
                            break

                    self.state = 242
                    self.sql_stmt() 
                self.state = 247
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 251
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 248
                    self.match(SQLiteParser.SCOL) 
                self.state = 253
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Alter_table_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Analyze_stmtContext,0)


        def attach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Attach_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Commit_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_table_stmtContext,0)


        def create_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_trigger_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_view_stmtContext,0)


        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_virtual_table_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,0)


        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmt_limitedContext,0)


        def detach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Detach_stmtContext,0)


        def drop_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,0)


        def pragma_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Reindex_stmtContext,0)


        def release_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Release_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Rollback_stmtContext,0)


        def savepoint_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmt_limitedContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Vacuum_stmtContext,0)


        def EXPLAIN_(self):
            return self.getToken(SQLiteParser.EXPLAIN_, 0)

        def QUERY_(self):
            return self.getToken(SQLiteParser.QUERY_, 0)

        def PLAN_(self):
            return self.getToken(SQLiteParser.PLAN_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = SQLiteParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.EXPLAIN_:
                self.state = 254
                self.match(SQLiteParser.EXPLAIN_)
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.QUERY_:
                    self.state = 255
                    self.match(SQLiteParser.QUERY_)
                    self.state = 256
                    self.match(SQLiteParser.PLAN_)




            self.state = 285
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 261
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 262
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 263
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 264
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 265
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 266
                self.create_index_stmt()
                pass

            elif la_ == 7:
                self.state = 267
                self.create_table_stmt()
                pass

            elif la_ == 8:
                self.state = 268
                self.create_trigger_stmt()
                pass

            elif la_ == 9:
                self.state = 269
                self.create_view_stmt()
                pass

            elif la_ == 10:
                self.state = 270
                self.create_virtual_table_stmt()
                pass

            elif la_ == 11:
                self.state = 271
                self.delete_stmt()
                pass

            elif la_ == 12:
                self.state = 272
                self.delete_stmt_limited()
                pass

            elif la_ == 13:
                self.state = 273
                self.detach_stmt()
                pass

            elif la_ == 14:
                self.state = 274
                self.drop_stmt()
                pass

            elif la_ == 15:
                self.state = 275
                self.insert_stmt()
                pass

            elif la_ == 16:
                self.state = 276
                self.pragma_stmt()
                pass

            elif la_ == 17:
                self.state = 277
                self.reindex_stmt()
                pass

            elif la_ == 18:
                self.state = 278
                self.release_stmt()
                pass

            elif la_ == 19:
                self.state = 279
                self.rollback_stmt()
                pass

            elif la_ == 20:
                self.state = 280
                self.savepoint_stmt()
                pass

            elif la_ == 21:
                self.state = 281
                self.select_stmt()
                pass

            elif la_ == 22:
                self.state = 282
                self.update_stmt()
                pass

            elif la_ == 23:
                self.state = 283
                self.update_stmt_limited()
                pass

            elif la_ == 24:
                self.state = 284
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_column_name = None # Column_nameContext
            self.new_column_name = None # Column_nameContext

        def ALTER_(self):
            return self.getToken(SQLiteParser.ALTER_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def RENAME_(self):
            return self.getToken(SQLiteParser.RENAME_, 0)

        def ADD_(self):
            return self.getToken(SQLiteParser.ADD_, 0)

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def DROP_(self):
            return self.getToken(SQLiteParser.DROP_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def TO_(self):
            return self.getToken(SQLiteParser.TO_, 0)

        def new_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.New_table_nameContext,0)


        def COLUMN_(self):
            return self.getToken(SQLiteParser.COLUMN_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = SQLiteParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(SQLiteParser.ALTER_)
            self.state = 288
            self.match(SQLiteParser.TABLE_)
            self.state = 292
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 289
                self.schema_name()
                self.state = 290
                self.match(SQLiteParser.DOT)


            self.state = 294
            self.table_name()
            self.state = 317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.RENAME_]:
                self.state = 295
                self.match(SQLiteParser.RENAME_)
                self.state = 305
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 296
                    self.match(SQLiteParser.TO_)
                    self.state = 297
                    self.new_table_name()
                    pass

                elif la_ == 2:
                    self.state = 299
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 298
                        self.match(SQLiteParser.COLUMN_)


                    self.state = 301
                    localctx.old_column_name = self.column_name()
                    self.state = 302
                    self.match(SQLiteParser.TO_)
                    self.state = 303
                    localctx.new_column_name = self.column_name()
                    pass


                pass
            elif token in [SQLiteParser.ADD_]:
                self.state = 307
                self.match(SQLiteParser.ADD_)
                self.state = 309
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 308
                    self.match(SQLiteParser.COLUMN_)


                self.state = 311
                self.column_def()
                pass
            elif token in [SQLiteParser.DROP_]:
                self.state = 312
                self.match(SQLiteParser.DROP_)
                self.state = 314
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 313
                    self.match(SQLiteParser.COLUMN_)


                self.state = 316
                self.column_name()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE_(self):
            return self.getToken(SQLiteParser.ANALYZE_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def table_or_index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_or_index_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_analyze_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_stmt" ):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_stmt" ):
                listener.exitAnalyze_stmt(self)




    def analyze_stmt(self):

        localctx = SQLiteParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(SQLiteParser.ANALYZE_)
            self.state = 327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 320
                self.schema_name()

            elif la_ == 2:
                self.state = 324
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 321
                    self.schema_name()
                    self.state = 322
                    self.match(SQLiteParser.DOT)


                self.state = 326
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH_(self):
            return self.getToken(SQLiteParser.ATTACH_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE_(self):
            return self.getToken(SQLiteParser.DATABASE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_attach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttach_stmt" ):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttach_stmt" ):
                listener.exitAttach_stmt(self)




    def attach_stmt(self):

        localctx = SQLiteParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self.match(SQLiteParser.ATTACH_)
            self.state = 331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 330
                self.match(SQLiteParser.DATABASE_)


            self.state = 333
            self.expr(0)
            self.state = 334
            self.match(SQLiteParser.AS_)
            self.state = 335
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN_(self):
            return self.getToken(SQLiteParser.BEGIN_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def DEFERRED_(self):
            return self.getToken(SQLiteParser.DEFERRED_, 0)

        def IMMEDIATE_(self):
            return self.getToken(SQLiteParser.IMMEDIATE_, 0)

        def EXCLUSIVE_(self):
            return self.getToken(SQLiteParser.EXCLUSIVE_, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_begin_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_stmt" ):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_stmt" ):
                listener.exitBegin_stmt(self)




    def begin_stmt(self):

        localctx = SQLiteParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 337
            self.match(SQLiteParser.BEGIN_)
            self.state = 339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (SQLiteParser.DEFERRED_ - 58)) | (1 << (SQLiteParser.EXCLUSIVE_ - 58)) | (1 << (SQLiteParser.IMMEDIATE_ - 58)))) != 0):
                self.state = 338
                _la = self._input.LA(1)
                if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (SQLiteParser.DEFERRED_ - 58)) | (1 << (SQLiteParser.EXCLUSIVE_ - 58)) | (1 << (SQLiteParser.IMMEDIATE_ - 58)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION_:
                self.state = 341
                self.match(SQLiteParser.TRANSACTION_)
                self.state = 343
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 342
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT_(self):
            return self.getToken(SQLiteParser.COMMIT_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_commit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stmt" ):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stmt" ):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = SQLiteParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 347
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.COMMIT_ or _la==SQLiteParser.END_):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION_:
                self.state = 348
                self.match(SQLiteParser.TRANSACTION_)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def TO_(self):
            return self.getToken(SQLiteParser.TO_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_rollback_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stmt" ):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stmt" ):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = SQLiteParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_rollback_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(SQLiteParser.ROLLBACK_)
            self.state = 353
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION_:
                self.state = 352
                self.match(SQLiteParser.TRANSACTION_)


            self.state = 360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TO_:
                self.state = 355
                self.match(SQLiteParser.TO_)
                self.state = 357
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 356
                    self.match(SQLiteParser.SAVEPOINT_)


                self.state = 359
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_stmt" ):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_stmt" ):
                listener.exitSavepoint_stmt(self)




    def savepoint_stmt(self):

        localctx = SQLiteParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.match(SQLiteParser.SAVEPOINT_)
            self.state = 363
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Release_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE_(self):
            return self.getToken(SQLiteParser.RELEASE_, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_release_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelease_stmt" ):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelease_stmt" ):
                listener.exitRelease_stmt(self)




    def release_stmt(self):

        localctx = SQLiteParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(SQLiteParser.RELEASE_)
            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 366
                self.match(SQLiteParser.SAVEPOINT_)


            self.state = 369
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def INDEX_(self):
            return self.getToken(SQLiteParser.INDEX_, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)




    def create_index_stmt(self):

        localctx = SQLiteParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(SQLiteParser.CREATE_)
            self.state = 373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.UNIQUE_:
                self.state = 372
                self.match(SQLiteParser.UNIQUE_)


            self.state = 375
            self.match(SQLiteParser.INDEX_)
            self.state = 379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 376
                self.match(SQLiteParser.IF_)
                self.state = 377
                self.match(SQLiteParser.NOT_)
                self.state = 378
                self.match(SQLiteParser.EXISTS_)


            self.state = 384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 381
                self.schema_name()
                self.state = 382
                self.match(SQLiteParser.DOT)


            self.state = 386
            self.index_name()
            self.state = 387
            self.match(SQLiteParser.ON_)
            self.state = 388
            self.table_name()
            self.state = 389
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 390
            self.indexed_column()
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 391
                self.match(SQLiteParser.COMMA)
                self.state = 392
                self.indexed_column()
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 398
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE_:
                self.state = 399
                self.match(SQLiteParser.WHERE_)
                self.state = 400
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_indexed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexed_column" ):
                listener.enterIndexed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexed_column" ):
                listener.exitIndexed_column(self)




    def indexed_column(self):

        localctx = SQLiteParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 405
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 403
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 404
                self.expr(0)
                pass


            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COLLATE_:
                self.state = 407
                self.match(SQLiteParser.COLLATE_)
                self.state = 408
                self.collation_name()


            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC_ or _la==SQLiteParser.DESC_:
                self.state = 411
                self.asc_desc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.row_ROW_ID = None # Token

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_defContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_defContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_constraintContext,i)


        def WITHOUT_(self):
            return self.getToken(SQLiteParser.WITHOUT_, 0)

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = SQLiteParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(SQLiteParser.CREATE_)
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP_ or _la==SQLiteParser.TEMPORARY_:
                self.state = 415
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP_ or _la==SQLiteParser.TEMPORARY_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 418
            self.match(SQLiteParser.TABLE_)
            self.state = 422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 419
                self.match(SQLiteParser.IF_)
                self.state = 420
                self.match(SQLiteParser.NOT_)
                self.state = 421
                self.match(SQLiteParser.EXISTS_)


            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 424
                self.schema_name()
                self.state = 425
                self.match(SQLiteParser.DOT)


            self.state = 429
            self.table_name()
            self.state = 453
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR]:
                self.state = 430
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 431
                self.column_def()
                self.state = 436
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 432
                        self.match(SQLiteParser.COMMA)
                        self.state = 433
                        self.column_def() 
                    self.state = 438
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 439
                    self.match(SQLiteParser.COMMA)
                    self.state = 440
                    self.table_constraint()
                    self.state = 445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 446
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WITHOUT_:
                    self.state = 447
                    self.match(SQLiteParser.WITHOUT_)
                    self.state = 448
                    localctx.row_ROW_ID = self.match(SQLiteParser.IDENTIFIER)


                pass
            elif token in [SQLiteParser.AS_]:
                self.state = 451
                self.match(SQLiteParser.AS_)
                self.state = 452
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = SQLiteParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_column_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.column_name()
            self.state = 457
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 456
                self.type_name()


            self.state = 462
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 459
                    self.column_constraint() 
                self.state = 464
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = SQLiteParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 465
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 468 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 470
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 471
                self.signed_number()
                self.state = 472
                self.match(SQLiteParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 474
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 475
                self.signed_number()
                self.state = 476
                self.match(SQLiteParser.COMMA)
                self.state = 477
                self.signed_number()
                self.state = 478
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK_(self):
            return self.getToken(SQLiteParser.CHECK_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def DEFAULT_(self):
            return self.getToken(SQLiteParser.DEFAULT_, 0)

        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def CONSTRAINT_(self):
            return self.getToken(SQLiteParser.CONSTRAINT_, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def PRIMARY_(self):
            return self.getToken(SQLiteParser.PRIMARY_, 0)

        def KEY_(self):
            return self.getToken(SQLiteParser.KEY_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def GENERATED_(self):
            return self.getToken(SQLiteParser.GENERATED_, 0)

        def ALWAYS_(self):
            return self.getToken(SQLiteParser.ALWAYS_, 0)

        def STORED_(self):
            return self.getToken(SQLiteParser.STORED_, 0)

        def VIRTUAL_(self):
            return self.getToken(SQLiteParser.VIRTUAL_, 0)

        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def AUTOINCREMENT_(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = SQLiteParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.CONSTRAINT_:
                self.state = 482
                self.match(SQLiteParser.CONSTRAINT_)
                self.state = 483
                self.name()


            self.state = 533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.PRIMARY_]:
                self.state = 486
                self.match(SQLiteParser.PRIMARY_)
                self.state = 487
                self.match(SQLiteParser.KEY_)
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ASC_ or _la==SQLiteParser.DESC_:
                    self.state = 488
                    self.asc_desc()


                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON_:
                    self.state = 491
                    self.conflict_clause()


                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AUTOINCREMENT_:
                    self.state = 494
                    self.match(SQLiteParser.AUTOINCREMENT_)


                pass
            elif token in [SQLiteParser.NOT_, SQLiteParser.UNIQUE_]:
                self.state = 500
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.NOT_]:
                    self.state = 497
                    self.match(SQLiteParser.NOT_)
                    self.state = 498
                    self.match(SQLiteParser.NULL_)
                    pass
                elif token in [SQLiteParser.UNIQUE_]:
                    self.state = 499
                    self.match(SQLiteParser.UNIQUE_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON_:
                    self.state = 502
                    self.conflict_clause()


                pass
            elif token in [SQLiteParser.CHECK_]:
                self.state = 505
                self.match(SQLiteParser.CHECK_)
                self.state = 506
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 507
                self.expr(0)
                self.state = 508
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.DEFAULT_]:
                self.state = 510
                self.match(SQLiteParser.DEFAULT_)
                self.state = 517
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 511
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 512
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 513
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 514
                    self.expr(0)
                    self.state = 515
                    self.match(SQLiteParser.CLOSE_PAR)
                    pass


                pass
            elif token in [SQLiteParser.COLLATE_]:
                self.state = 519
                self.match(SQLiteParser.COLLATE_)
                self.state = 520
                self.collation_name()
                pass
            elif token in [SQLiteParser.REFERENCES_]:
                self.state = 521
                self.foreign_key_clause()
                pass
            elif token in [SQLiteParser.AS_, SQLiteParser.GENERATED_]:
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.GENERATED_:
                    self.state = 522
                    self.match(SQLiteParser.GENERATED_)
                    self.state = 523
                    self.match(SQLiteParser.ALWAYS_)


                self.state = 526
                self.match(SQLiteParser.AS_)
                self.state = 527
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 528
                self.expr(0)
                self.state = 529
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.VIRTUAL_ or _la==SQLiteParser.STORED_:
                    self.state = 530
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.VIRTUAL_ or _la==SQLiteParser.STORED_):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = SQLiteParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS:
                self.state = 535
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 538
            self.match(SQLiteParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def CHECK_(self):
            return self.getToken(SQLiteParser.CHECK_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def FOREIGN_(self):
            return self.getToken(SQLiteParser.FOREIGN_, 0)

        def KEY_(self):
            return self.getToken(SQLiteParser.KEY_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def CONSTRAINT_(self):
            return self.getToken(SQLiteParser.CONSTRAINT_, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def PRIMARY_(self):
            return self.getToken(SQLiteParser.PRIMARY_, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = SQLiteParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.CONSTRAINT_:
                self.state = 540
                self.match(SQLiteParser.CONSTRAINT_)
                self.state = 541
                self.name()


            self.state = 581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.PRIMARY_, SQLiteParser.UNIQUE_]:
                self.state = 547
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.PRIMARY_]:
                    self.state = 544
                    self.match(SQLiteParser.PRIMARY_)
                    self.state = 545
                    self.match(SQLiteParser.KEY_)
                    pass
                elif token in [SQLiteParser.UNIQUE_]:
                    self.state = 546
                    self.match(SQLiteParser.UNIQUE_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 549
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 550
                self.indexed_column()
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 551
                    self.match(SQLiteParser.COMMA)
                    self.state = 552
                    self.indexed_column()
                    self.state = 557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 558
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON_:
                    self.state = 559
                    self.conflict_clause()


                pass
            elif token in [SQLiteParser.CHECK_]:
                self.state = 562
                self.match(SQLiteParser.CHECK_)
                self.state = 563
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 564
                self.expr(0)
                self.state = 565
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.FOREIGN_]:
                self.state = 567
                self.match(SQLiteParser.FOREIGN_)
                self.state = 568
                self.match(SQLiteParser.KEY_)
                self.state = 569
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 570
                self.column_name()
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 571
                    self.match(SQLiteParser.COMMA)
                    self.state = 572
                    self.column_name()
                    self.state = 577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 578
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 579
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCES_(self):
            return self.getToken(SQLiteParser.REFERENCES_, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ON_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ON_)
            else:
                return self.getToken(SQLiteParser.ON_, i)

        def MATCH_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.MATCH_)
            else:
                return self.getToken(SQLiteParser.MATCH_, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def DEFERRABLE_(self):
            return self.getToken(SQLiteParser.DEFERRABLE_, 0)

        def DELETE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DELETE_)
            else:
                return self.getToken(SQLiteParser.DELETE_, i)

        def UPDATE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UPDATE_)
            else:
                return self.getToken(SQLiteParser.UPDATE_, i)

        def SET_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SET_)
            else:
                return self.getToken(SQLiteParser.SET_, i)

        def CASCADE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CASCADE_)
            else:
                return self.getToken(SQLiteParser.CASCADE_, i)

        def RESTRICT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.RESTRICT_)
            else:
                return self.getToken(SQLiteParser.RESTRICT_, i)

        def NO_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NO_)
            else:
                return self.getToken(SQLiteParser.NO_, i)

        def ACTION_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ACTION_)
            else:
                return self.getToken(SQLiteParser.ACTION_, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NULL_)
            else:
                return self.getToken(SQLiteParser.NULL_, i)

        def DEFAULT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DEFAULT_)
            else:
                return self.getToken(SQLiteParser.DEFAULT_, i)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def INITIALLY_(self):
            return self.getToken(SQLiteParser.INITIALLY_, 0)

        def DEFERRED_(self):
            return self.getToken(SQLiteParser.DEFERRED_, 0)

        def IMMEDIATE_(self):
            return self.getToken(SQLiteParser.IMMEDIATE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = SQLiteParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(SQLiteParser.REFERENCES_)
            self.state = 584
            self.foreign_table()
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 585
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 586
                self.column_name()
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 587
                    self.match(SQLiteParser.COMMA)
                    self.state = 588
                    self.column_name()
                    self.state = 593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 594
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 612
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.MATCH_ or _la==SQLiteParser.ON_:
                self.state = 610
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.ON_]:
                    self.state = 598
                    self.match(SQLiteParser.ON_)
                    self.state = 599
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.DELETE_ or _la==SQLiteParser.UPDATE_):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 606
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SQLiteParser.SET_]:
                        self.state = 600
                        self.match(SQLiteParser.SET_)
                        self.state = 601
                        _la = self._input.LA(1)
                        if not(_la==SQLiteParser.DEFAULT_ or _la==SQLiteParser.NULL_):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [SQLiteParser.CASCADE_]:
                        self.state = 602
                        self.match(SQLiteParser.CASCADE_)
                        pass
                    elif token in [SQLiteParser.RESTRICT_]:
                        self.state = 603
                        self.match(SQLiteParser.RESTRICT_)
                        pass
                    elif token in [SQLiteParser.NO_]:
                        self.state = 604
                        self.match(SQLiteParser.NO_)
                        self.state = 605
                        self.match(SQLiteParser.ACTION_)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [SQLiteParser.MATCH_]:
                    self.state = 608
                    self.match(SQLiteParser.MATCH_)
                    self.state = 609
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.NOT_:
                    self.state = 615
                    self.match(SQLiteParser.NOT_)


                self.state = 618
                self.match(SQLiteParser.DEFERRABLE_)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.INITIALLY_:
                    self.state = 619
                    self.match(SQLiteParser.INITIALLY_)
                    self.state = 620
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.DEFERRED_ or _la==SQLiteParser.IMMEDIATE_):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def CONFLICT_(self):
            return self.getToken(SQLiteParser.CONFLICT_, 0)

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_conflict_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflict_clause" ):
                listener.enterConflict_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflict_clause" ):
                listener.exitConflict_clause(self)




    def conflict_clause(self):

        localctx = SQLiteParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self.match(SQLiteParser.ON_)
            self.state = 626
            self.match(SQLiteParser.CONFLICT_)
            self.state = 627
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.ABORT_ or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.FAIL_ - 72)) | (1 << (SQLiteParser.IGNORE_ - 72)) | (1 << (SQLiteParser.REPLACE_ - 72)) | (1 << (SQLiteParser.ROLLBACK_ - 72)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_trigger_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def TRIGGER_(self):
            return self.getToken(SQLiteParser.TRIGGER_, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def BEGIN_(self):
            return self.getToken(SQLiteParser.BEGIN_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def INSERT_(self):
            return self.getToken(SQLiteParser.INSERT_, 0)

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def BEFORE_(self):
            return self.getToken(SQLiteParser.BEFORE_, 0)

        def AFTER_(self):
            return self.getToken(SQLiteParser.AFTER_, 0)

        def INSTEAD_(self):
            return self.getToken(SQLiteParser.INSTEAD_, 0)

        def OF_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OF_)
            else:
                return self.getToken(SQLiteParser.OF_, i)

        def FOR_(self):
            return self.getToken(SQLiteParser.FOR_, 0)

        def EACH_(self):
            return self.getToken(SQLiteParser.EACH_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def WHEN_(self):
            return self.getToken(SQLiteParser.WHEN_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def update_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,i)


        def insert_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,i)


        def delete_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,i)


        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_trigger_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger_stmt" ):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger_stmt" ):
                listener.exitCreate_trigger_stmt(self)




    def create_trigger_stmt(self):

        localctx = SQLiteParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_create_trigger_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 629
            self.match(SQLiteParser.CREATE_)
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP_ or _la==SQLiteParser.TEMPORARY_:
                self.state = 630
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP_ or _la==SQLiteParser.TEMPORARY_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 633
            self.match(SQLiteParser.TRIGGER_)
            self.state = 637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 634
                self.match(SQLiteParser.IF_)
                self.state = 635
                self.match(SQLiteParser.NOT_)
                self.state = 636
                self.match(SQLiteParser.EXISTS_)


            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 639
                self.schema_name()
                self.state = 640
                self.match(SQLiteParser.DOT)


            self.state = 644
            self.trigger_name()
            self.state = 649
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.BEFORE_]:
                self.state = 645
                self.match(SQLiteParser.BEFORE_)
                pass
            elif token in [SQLiteParser.AFTER_]:
                self.state = 646
                self.match(SQLiteParser.AFTER_)
                pass
            elif token in [SQLiteParser.INSTEAD_]:
                self.state = 647
                self.match(SQLiteParser.INSTEAD_)
                self.state = 648
                self.match(SQLiteParser.OF_)
                pass
            elif token in [SQLiteParser.DELETE_, SQLiteParser.INSERT_, SQLiteParser.UPDATE_]:
                pass
            else:
                pass
            self.state = 665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.DELETE_]:
                self.state = 651
                self.match(SQLiteParser.DELETE_)
                pass
            elif token in [SQLiteParser.INSERT_]:
                self.state = 652
                self.match(SQLiteParser.INSERT_)
                pass
            elif token in [SQLiteParser.UPDATE_]:
                self.state = 653
                self.match(SQLiteParser.UPDATE_)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OF_:
                    self.state = 654
                    self.match(SQLiteParser.OF_)
                    self.state = 655
                    self.column_name()
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 656
                        self.match(SQLiteParser.COMMA)
                        self.state = 657
                        self.column_name()
                        self.state = 662
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

            self.state = 667
            self.match(SQLiteParser.ON_)
            self.state = 668
            self.table_name()
            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FOR_:
                self.state = 669
                self.match(SQLiteParser.FOR_)
                self.state = 670
                self.match(SQLiteParser.EACH_)
                self.state = 671
                self.match(SQLiteParser.ROW_)


            self.state = 676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHEN_:
                self.state = 674
                self.match(SQLiteParser.WHEN_)
                self.state = 675
                self.expr(0)


            self.state = 678
            self.match(SQLiteParser.BEGIN_)
            self.state = 687 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 679
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 680
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 681
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 682
                    self.select_stmt()
                    pass


                self.state = 685
                self.match(SQLiteParser.SCOL)
                self.state = 689 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.DEFAULT_ or _la==SQLiteParser.DELETE_ or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (SQLiteParser.INSERT_ - 88)) | (1 << (SQLiteParser.REPLACE_ - 88)) | (1 << (SQLiteParser.SELECT_ - 88)) | (1 << (SQLiteParser.UPDATE_ - 88)) | (1 << (SQLiteParser.VALUES_ - 88)) | (1 << (SQLiteParser.WITH_ - 88)))) != 0)):
                    break

            self.state = 691
            self.match(SQLiteParser.END_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_view_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def VIEW_(self):
            return self.getToken(SQLiteParser.VIEW_, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_view_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view_stmt" ):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view_stmt" ):
                listener.exitCreate_view_stmt(self)




    def create_view_stmt(self):

        localctx = SQLiteParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(SQLiteParser.CREATE_)
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP_ or _la==SQLiteParser.TEMPORARY_:
                self.state = 694
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP_ or _la==SQLiteParser.TEMPORARY_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 697
            self.match(SQLiteParser.VIEW_)
            self.state = 701
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 698
                self.match(SQLiteParser.IF_)
                self.state = 699
                self.match(SQLiteParser.NOT_)
                self.state = 700
                self.match(SQLiteParser.EXISTS_)


            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 703
                self.schema_name()
                self.state = 704
                self.match(SQLiteParser.DOT)


            self.state = 708
            self.view_name()
            self.state = 720
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 709
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 710
                self.column_name()
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 711
                    self.match(SQLiteParser.COMMA)
                    self.state = 712
                    self.column_name()
                    self.state = 717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 718
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 722
            self.match(SQLiteParser.AS_)
            self.state = 723
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_virtual_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def VIRTUAL_(self):
            return self.getToken(SQLiteParser.VIRTUAL_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def USING_(self):
            return self.getToken(SQLiteParser.USING_, 0)

        def module_name(self):
            return self.getTypedRuleContext(SQLiteParser.Module_nameContext,0)


        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def module_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Module_argumentContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_virtual_table_stmt" ):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_virtual_table_stmt" ):
                listener.exitCreate_virtual_table_stmt(self)




    def create_virtual_table_stmt(self):

        localctx = SQLiteParser.Create_virtual_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_create_virtual_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 725
            self.match(SQLiteParser.CREATE_)
            self.state = 726
            self.match(SQLiteParser.VIRTUAL_)
            self.state = 727
            self.match(SQLiteParser.TABLE_)
            self.state = 731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 728
                self.match(SQLiteParser.IF_)
                self.state = 729
                self.match(SQLiteParser.NOT_)
                self.state = 730
                self.match(SQLiteParser.EXISTS_)


            self.state = 736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 733
                self.schema_name()
                self.state = 734
                self.match(SQLiteParser.DOT)


            self.state = 738
            self.table_name()
            self.state = 739
            self.match(SQLiteParser.USING_)
            self.state = 740
            self.module_name()
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 741
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 742
                self.module_argument()
                self.state = 747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 743
                    self.match(SQLiteParser.COMMA)
                    self.state = 744
                    self.module_argument()
                    self.state = 749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 750
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(SQLiteParser.WITH_, 0)

        def cte_table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Cte_table_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,i)


        def AS_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS_)
            else:
                return self.getToken(SQLiteParser.AS_, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def RECURSIVE_(self):
            return self.getToken(SQLiteParser.RECURSIVE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)




    def with_clause(self):

        localctx = SQLiteParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(SQLiteParser.WITH_)
            self.state = 756
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 755
                self.match(SQLiteParser.RECURSIVE_)


            self.state = 758
            self.cte_table_name()
            self.state = 759
            self.match(SQLiteParser.AS_)
            self.state = 760
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 761
            self.select_stmt()
            self.state = 762
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 763
                self.match(SQLiteParser.COMMA)
                self.state = 764
                self.cte_table_name()
                self.state = 765
                self.match(SQLiteParser.AS_)
                self.state = 766
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 767
                self.select_stmt()
                self.state = 768
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_cte_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_table_name" ):
                listener.enterCte_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_table_name" ):
                listener.exitCte_table_name(self)




    def cte_table_name(self):

        localctx = SQLiteParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_cte_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.table_name()
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 776
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 777
                self.column_name()
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 778
                    self.match(SQLiteParser.COMMA)
                    self.state = 779
                    self.column_name()
                    self.state = 784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 785
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_cteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cte_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def initial_select(self):
            return self.getTypedRuleContext(SQLiteParser.Initial_selectContext,0)


        def UNION_(self):
            return self.getToken(SQLiteParser.UNION_, 0)

        def recursive__select(self):
            return self.getTypedRuleContext(SQLiteParser.Recursive__selectContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte" ):
                listener.enterRecursive_cte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte" ):
                listener.exitRecursive_cte(self)




    def recursive_cte(self):

        localctx = SQLiteParser.Recursive_cteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_recursive_cte)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.cte_table_name()
            self.state = 790
            self.match(SQLiteParser.AS_)
            self.state = 791
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 792
            self.initial_select()
            self.state = 793
            self.match(SQLiteParser.UNION_)
            self.state = 795
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ALL_:
                self.state = 794
                self.match(SQLiteParser.ALL_)


            self.state = 797
            self.recursive__select()
            self.state = 798
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = SQLiteParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.table_name()
            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 801
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 802
                self.column_name()
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 803
                    self.match(SQLiteParser.COMMA)
                    self.state = 804
                    self.column_name()
                    self.state = 809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 810
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 814
            self.match(SQLiteParser.AS_)
            self.state = 815
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 816
            self.select_stmt()
            self.state = 817
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = SQLiteParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 819
                self.with_clause()


            self.state = 822
            self.match(SQLiteParser.DELETE_)
            self.state = 823
            self.match(SQLiteParser.FROM_)
            self.state = 824
            self.qualified_table_name()
            self.state = 827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE_:
                self.state = 825
                self.match(SQLiteParser.WHERE_)
                self.state = 826
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt_limited" ):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt_limited" ):
                listener.exitDelete_stmt_limited(self)




    def delete_stmt_limited(self):

        localctx = SQLiteParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 829
                self.with_clause()


            self.state = 832
            self.match(SQLiteParser.DELETE_)
            self.state = 833
            self.match(SQLiteParser.FROM_)
            self.state = 834
            self.qualified_table_name()
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE_:
                self.state = 835
                self.match(SQLiteParser.WHERE_)
                self.state = 836
                self.expr(0)


            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT_ or _la==SQLiteParser.ORDER_:
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER_:
                    self.state = 839
                    self.order_by_stmt()


                self.state = 842
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Detach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETACH_(self):
            return self.getToken(SQLiteParser.DETACH_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE_(self):
            return self.getToken(SQLiteParser.DATABASE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_detach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetach_stmt" ):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetach_stmt" ):
                listener.exitDetach_stmt(self)




    def detach_stmt(self):

        localctx = SQLiteParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(SQLiteParser.DETACH_)
            self.state = 847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 846
                self.match(SQLiteParser.DATABASE_)


            self.state = 849
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.object = None # Token

        def DROP_(self):
            return self.getToken(SQLiteParser.DROP_, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def INDEX_(self):
            return self.getToken(SQLiteParser.INDEX_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def TRIGGER_(self):
            return self.getToken(SQLiteParser.TRIGGER_, 0)

        def VIEW_(self):
            return self.getToken(SQLiteParser.VIEW_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stmt" ):
                listener.enterDrop_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stmt" ):
                listener.exitDrop_stmt(self)




    def drop_stmt(self):

        localctx = SQLiteParser.Drop_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_drop_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(SQLiteParser.DROP_)
            self.state = 852
            localctx.object = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (SQLiteParser.INDEX_ - 84)) | (1 << (SQLiteParser.TABLE_ - 84)) | (1 << (SQLiteParser.TRIGGER_ - 84)) | (1 << (SQLiteParser.VIEW_ - 84)))) != 0)):
                localctx.object = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 853
                self.match(SQLiteParser.IF_)
                self.state = 854
                self.match(SQLiteParser.EXISTS_)


            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 857
                self.schema_name()
                self.state = 858
                self.match(SQLiteParser.DOT)


            self.state = 862
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(SQLiteParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Over_clauseContext,0)


        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def CAST_(self):
            return self.getToken(SQLiteParser.CAST_, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def CASE_(self):
            return self.getToken(SQLiteParser.CASE_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def WHEN_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHEN_)
            else:
                return self.getToken(SQLiteParser.WHEN_, i)

        def THEN_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.THEN_)
            else:
                return self.getToken(SQLiteParser.THEN_, i)

        def ELSE_(self):
            return self.getToken(SQLiteParser.ELSE_, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SQLiteParser.Raise_functionContext,0)


        def PIPE2(self):
            return self.getToken(SQLiteParser.PIPE2, 0)

        def DIV(self):
            return self.getToken(SQLiteParser.DIV, 0)

        def MOD(self):
            return self.getToken(SQLiteParser.MOD, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def LT2(self):
            return self.getToken(SQLiteParser.LT2, 0)

        def GT2(self):
            return self.getToken(SQLiteParser.GT2, 0)

        def AMP(self):
            return self.getToken(SQLiteParser.AMP, 0)

        def PIPE(self):
            return self.getToken(SQLiteParser.PIPE, 0)

        def LT(self):
            return self.getToken(SQLiteParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(SQLiteParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(SQLiteParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(SQLiteParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(SQLiteParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(SQLiteParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(SQLiteParser.NOT_EQ2, 0)

        def IS_(self):
            return self.getToken(SQLiteParser.IS_, 0)

        def IN_(self):
            return self.getToken(SQLiteParser.IN_, 0)

        def LIKE_(self):
            return self.getToken(SQLiteParser.LIKE_, 0)

        def GLOB_(self):
            return self.getToken(SQLiteParser.GLOB_, 0)

        def MATCH_(self):
            return self.getToken(SQLiteParser.MATCH_, 0)

        def REGEXP_(self):
            return self.getToken(SQLiteParser.REGEXP_, 0)

        def AND_(self):
            return self.getToken(SQLiteParser.AND_, 0)

        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def BETWEEN_(self):
            return self.getToken(SQLiteParser.BETWEEN_, 0)

        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def ESCAPE_(self):
            return self.getToken(SQLiteParser.ESCAPE_, 0)

        def ISNULL_(self):
            return self.getToken(SQLiteParser.ISNULL_, 0)

        def NOTNULL_(self):
            return self.getToken(SQLiteParser.NOTNULL_, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLiteParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 865
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 866
                self.match(SQLiteParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 875
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 870
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                    if la_ == 1:
                        self.state = 867
                        self.schema_name()
                        self.state = 868
                        self.match(SQLiteParser.DOT)


                    self.state = 872
                    self.table_name()
                    self.state = 873
                    self.match(SQLiteParser.DOT)


                self.state = 877
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 878
                self.unary_operator()
                self.state = 879
                self.expr(21)
                pass

            elif la_ == 5:
                self.state = 881
                self.function_name()
                self.state = 882
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 895
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT_, SQLiteParser.ACTION_, SQLiteParser.ADD_, SQLiteParser.AFTER_, SQLiteParser.ALL_, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.AND_, SQLiteParser.AS_, SQLiteParser.ASC_, SQLiteParser.ATTACH_, SQLiteParser.AUTOINCREMENT_, SQLiteParser.BEFORE_, SQLiteParser.BEGIN_, SQLiteParser.BETWEEN_, SQLiteParser.BY_, SQLiteParser.CASCADE_, SQLiteParser.CASE_, SQLiteParser.CAST_, SQLiteParser.CHECK_, SQLiteParser.COLLATE_, SQLiteParser.COLUMN_, SQLiteParser.COMMIT_, SQLiteParser.CONFLICT_, SQLiteParser.CONSTRAINT_, SQLiteParser.CREATE_, SQLiteParser.CROSS_, SQLiteParser.CURRENT_DATE_, SQLiteParser.CURRENT_TIME_, SQLiteParser.CURRENT_TIMESTAMP_, SQLiteParser.DATABASE_, SQLiteParser.DEFAULT_, SQLiteParser.DEFERRABLE_, SQLiteParser.DEFERRED_, SQLiteParser.DELETE_, SQLiteParser.DESC_, SQLiteParser.DETACH_, SQLiteParser.DISTINCT_, SQLiteParser.DROP_, SQLiteParser.EACH_, SQLiteParser.ELSE_, SQLiteParser.END_, SQLiteParser.ESCAPE_, SQLiteParser.EXCEPT_, SQLiteParser.EXCLUSIVE_, SQLiteParser.EXISTS_, SQLiteParser.EXPLAIN_, SQLiteParser.FAIL_, SQLiteParser.FOR_, SQLiteParser.FOREIGN_, SQLiteParser.FROM_, SQLiteParser.FULL_, SQLiteParser.GLOB_, SQLiteParser.GROUP_, SQLiteParser.HAVING_, SQLiteParser.IF_, SQLiteParser.IGNORE_, SQLiteParser.IMMEDIATE_, SQLiteParser.IN_, SQLiteParser.INDEX_, SQLiteParser.INDEXED_, SQLiteParser.INITIALLY_, SQLiteParser.INNER_, SQLiteParser.INSERT_, SQLiteParser.INSTEAD_, SQLiteParser.INTERSECT_, SQLiteParser.INTO_, SQLiteParser.IS_, SQLiteParser.ISNULL_, SQLiteParser.JOIN_, SQLiteParser.KEY_, SQLiteParser.LEFT_, SQLiteParser.LIKE_, SQLiteParser.LIMIT_, SQLiteParser.MATCH_, SQLiteParser.NATURAL_, SQLiteParser.NO_, SQLiteParser.NOT_, SQLiteParser.NOTNULL_, SQLiteParser.NULL_, SQLiteParser.OF_, SQLiteParser.OFFSET_, SQLiteParser.ON_, SQLiteParser.OR_, SQLiteParser.ORDER_, SQLiteParser.OUTER_, SQLiteParser.PLAN_, SQLiteParser.PRAGMA_, SQLiteParser.PRIMARY_, SQLiteParser.QUERY_, SQLiteParser.RAISE_, SQLiteParser.RECURSIVE_, SQLiteParser.REFERENCES_, SQLiteParser.REGEXP_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.RENAME_, SQLiteParser.REPLACE_, SQLiteParser.RESTRICT_, SQLiteParser.RIGHT_, SQLiteParser.ROLLBACK_, SQLiteParser.ROW_, SQLiteParser.ROWS_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.SET_, SQLiteParser.TABLE_, SQLiteParser.TEMP_, SQLiteParser.TEMPORARY_, SQLiteParser.THEN_, SQLiteParser.TO_, SQLiteParser.TRANSACTION_, SQLiteParser.TRIGGER_, SQLiteParser.UNION_, SQLiteParser.UNIQUE_, SQLiteParser.UPDATE_, SQLiteParser.USING_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.VIEW_, SQLiteParser.VIRTUAL_, SQLiteParser.WHEN_, SQLiteParser.WHERE_, SQLiteParser.WITH_, SQLiteParser.WITHOUT_, SQLiteParser.FIRST_VALUE_, SQLiteParser.OVER_, SQLiteParser.PARTITION_, SQLiteParser.RANGE_, SQLiteParser.PRECEDING_, SQLiteParser.UNBOUNDED_, SQLiteParser.CURRENT_, SQLiteParser.FOLLOWING_, SQLiteParser.CUME_DIST_, SQLiteParser.DENSE_RANK_, SQLiteParser.LAG_, SQLiteParser.LAST_VALUE_, SQLiteParser.LEAD_, SQLiteParser.NTH_VALUE_, SQLiteParser.NTILE_, SQLiteParser.PERCENT_RANK_, SQLiteParser.RANK_, SQLiteParser.ROW_NUMBER_, SQLiteParser.GENERATED_, SQLiteParser.ALWAYS_, SQLiteParser.STORED_, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW_, SQLiteParser.NULLS_, SQLiteParser.FIRST_, SQLiteParser.LAST_, SQLiteParser.FILTER_, SQLiteParser.GROUPS_, SQLiteParser.EXCLUDE_, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                    self.state = 884
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                    if la_ == 1:
                        self.state = 883
                        self.match(SQLiteParser.DISTINCT_)


                    self.state = 886
                    self.expr(0)
                    self.state = 891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 887
                        self.match(SQLiteParser.COMMA)
                        self.state = 888
                        self.expr(0)
                        self.state = 893
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SQLiteParser.STAR]:
                    self.state = 894
                    self.match(SQLiteParser.STAR)
                    pass
                elif token in [SQLiteParser.CLOSE_PAR]:
                    pass
                else:
                    pass
                self.state = 897
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 899
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 898
                    self.filter_clause()


                self.state = 902
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 901
                    self.over_clause()


                pass

            elif la_ == 6:
                self.state = 904
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 905
                self.expr(0)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 906
                    self.match(SQLiteParser.COMMA)
                    self.state = 907
                    self.expr(0)
                    self.state = 912
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 913
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 915
                self.match(SQLiteParser.CAST_)
                self.state = 916
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 917
                self.expr(0)
                self.state = 918
                self.match(SQLiteParser.AS_)
                self.state = 919
                self.type_name()
                self.state = 920
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.EXISTS_ or _la==SQLiteParser.NOT_:
                    self.state = 923
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.NOT_:
                        self.state = 922
                        self.match(SQLiteParser.NOT_)


                    self.state = 925
                    self.match(SQLiteParser.EXISTS_)


                self.state = 928
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 929
                self.select_stmt()
                self.state = 930
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 932
                self.match(SQLiteParser.CASE_)
                self.state = 934
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 933
                    self.expr(0)


                self.state = 941 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 936
                    self.match(SQLiteParser.WHEN_)
                    self.state = 937
                    self.expr(0)
                    self.state = 938
                    self.match(SQLiteParser.THEN_)
                    self.state = 939
                    self.expr(0)
                    self.state = 943 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLiteParser.WHEN_):
                        break

                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ELSE_:
                    self.state = 945
                    self.match(SQLiteParser.ELSE_)
                    self.state = 946
                    self.expr(0)


                self.state = 949
                self.match(SQLiteParser.END_)
                pass

            elif la_ == 10:
                self.state = 951
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1073
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1071
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                    if la_ == 1:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 954
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 955
                        self.match(SQLiteParser.PIPE2)
                        self.state = 956
                        self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 957
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 958
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.STAR) | (1 << SQLiteParser.DIV) | (1 << SQLiteParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 959
                        self.expr(20)
                        pass

                    elif la_ == 3:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 960
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 961
                        _la = self._input.LA(1)
                        if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 962
                        self.expr(19)
                        pass

                    elif la_ == 4:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 963
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 964
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT2) | (1 << SQLiteParser.GT2) | (1 << SQLiteParser.AMP) | (1 << SQLiteParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 965
                        self.expr(18)
                        pass

                    elif la_ == 5:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 966
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 967
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT) | (1 << SQLiteParser.LT_EQ) | (1 << SQLiteParser.GT) | (1 << SQLiteParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 968
                        self.expr(17)
                        pass

                    elif la_ == 6:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 969
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 982
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                        if la_ == 1:
                            self.state = 970
                            self.match(SQLiteParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 971
                            self.match(SQLiteParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 972
                            self.match(SQLiteParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 973
                            self.match(SQLiteParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 974
                            self.match(SQLiteParser.IS_)
                            pass

                        elif la_ == 6:
                            self.state = 975
                            self.match(SQLiteParser.IS_)
                            self.state = 976
                            self.match(SQLiteParser.NOT_)
                            pass

                        elif la_ == 7:
                            self.state = 977
                            self.match(SQLiteParser.IN_)
                            pass

                        elif la_ == 8:
                            self.state = 978
                            self.match(SQLiteParser.LIKE_)
                            pass

                        elif la_ == 9:
                            self.state = 979
                            self.match(SQLiteParser.GLOB_)
                            pass

                        elif la_ == 10:
                            self.state = 980
                            self.match(SQLiteParser.MATCH_)
                            pass

                        elif la_ == 11:
                            self.state = 981
                            self.match(SQLiteParser.REGEXP_)
                            pass


                        self.state = 984
                        self.expr(16)
                        pass

                    elif la_ == 7:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 985
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 986
                        self.match(SQLiteParser.AND_)
                        self.state = 987
                        self.expr(15)
                        pass

                    elif la_ == 8:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 988
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 989
                        self.match(SQLiteParser.OR_)
                        self.state = 990
                        self.expr(14)
                        pass

                    elif la_ == 9:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 991
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 992
                        self.match(SQLiteParser.IS_)
                        self.state = 994
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                        if la_ == 1:
                            self.state = 993
                            self.match(SQLiteParser.NOT_)


                        self.state = 996
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 997
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 999
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT_:
                            self.state = 998
                            self.match(SQLiteParser.NOT_)


                        self.state = 1001
                        self.match(SQLiteParser.BETWEEN_)
                        self.state = 1002
                        self.expr(0)
                        self.state = 1003
                        self.match(SQLiteParser.AND_)
                        self.state = 1004
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1006
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1007
                        self.match(SQLiteParser.COLLATE_)
                        self.state = 1008
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1009
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1011
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT_:
                            self.state = 1010
                            self.match(SQLiteParser.NOT_)


                        self.state = 1013
                        _la = self._input.LA(1)
                        if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (SQLiteParser.GLOB_ - 77)) | (1 << (SQLiteParser.LIKE_ - 77)) | (1 << (SQLiteParser.MATCH_ - 77)) | (1 << (SQLiteParser.REGEXP_ - 77)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1014
                        self.expr(0)
                        self.state = 1017
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                        if la_ == 1:
                            self.state = 1015
                            self.match(SQLiteParser.ESCAPE_)
                            self.state = 1016
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1019
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1024
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [SQLiteParser.ISNULL_]:
                            self.state = 1020
                            self.match(SQLiteParser.ISNULL_)
                            pass
                        elif token in [SQLiteParser.NOTNULL_]:
                            self.state = 1021
                            self.match(SQLiteParser.NOTNULL_)
                            pass
                        elif token in [SQLiteParser.NOT_]:
                            self.state = 1022
                            self.match(SQLiteParser.NOT_)
                            self.state = 1023
                            self.match(SQLiteParser.NULL_)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1026
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1028
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT_:
                            self.state = 1027
                            self.match(SQLiteParser.NOT_)


                        self.state = 1030
                        self.match(SQLiteParser.IN_)
                        self.state = 1069
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                        if la_ == 1:
                            self.state = 1031
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1041
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                            if la_ == 1:
                                self.state = 1032
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1033
                                self.expr(0)
                                self.state = 1038
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SQLiteParser.COMMA:
                                    self.state = 1034
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1035
                                    self.expr(0)
                                    self.state = 1040
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1043
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1047
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                            if la_ == 1:
                                self.state = 1044
                                self.schema_name()
                                self.state = 1045
                                self.match(SQLiteParser.DOT)


                            self.state = 1049
                            self.table_name()
                            pass

                        elif la_ == 3:
                            self.state = 1053
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                            if la_ == 1:
                                self.state = 1050
                                self.schema_name()
                                self.state = 1051
                                self.match(SQLiteParser.DOT)


                            self.state = 1055
                            self.table_function_name()
                            self.state = 1056
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1065
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.ABORT_) | (1 << SQLiteParser.ACTION_) | (1 << SQLiteParser.ADD_) | (1 << SQLiteParser.AFTER_) | (1 << SQLiteParser.ALL_) | (1 << SQLiteParser.ALTER_) | (1 << SQLiteParser.ANALYZE_) | (1 << SQLiteParser.AND_) | (1 << SQLiteParser.AS_) | (1 << SQLiteParser.ASC_) | (1 << SQLiteParser.ATTACH_) | (1 << SQLiteParser.AUTOINCREMENT_) | (1 << SQLiteParser.BEFORE_) | (1 << SQLiteParser.BEGIN_) | (1 << SQLiteParser.BETWEEN_) | (1 << SQLiteParser.BY_) | (1 << SQLiteParser.CASCADE_) | (1 << SQLiteParser.CASE_) | (1 << SQLiteParser.CAST_) | (1 << SQLiteParser.CHECK_) | (1 << SQLiteParser.COLLATE_) | (1 << SQLiteParser.COLUMN_) | (1 << SQLiteParser.COMMIT_) | (1 << SQLiteParser.CONFLICT_) | (1 << SQLiteParser.CONSTRAINT_) | (1 << SQLiteParser.CREATE_) | (1 << SQLiteParser.CROSS_) | (1 << SQLiteParser.CURRENT_DATE_) | (1 << SQLiteParser.CURRENT_TIME_) | (1 << SQLiteParser.CURRENT_TIMESTAMP_) | (1 << SQLiteParser.DATABASE_) | (1 << SQLiteParser.DEFAULT_) | (1 << SQLiteParser.DEFERRABLE_) | (1 << SQLiteParser.DEFERRED_) | (1 << SQLiteParser.DELETE_) | (1 << SQLiteParser.DESC_) | (1 << SQLiteParser.DETACH_) | (1 << SQLiteParser.DISTINCT_) | (1 << SQLiteParser.DROP_))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.EACH_ - 64)) | (1 << (SQLiteParser.ELSE_ - 64)) | (1 << (SQLiteParser.END_ - 64)) | (1 << (SQLiteParser.ESCAPE_ - 64)) | (1 << (SQLiteParser.EXCEPT_ - 64)) | (1 << (SQLiteParser.EXCLUSIVE_ - 64)) | (1 << (SQLiteParser.EXISTS_ - 64)) | (1 << (SQLiteParser.EXPLAIN_ - 64)) | (1 << (SQLiteParser.FAIL_ - 64)) | (1 << (SQLiteParser.FOR_ - 64)) | (1 << (SQLiteParser.FOREIGN_ - 64)) | (1 << (SQLiteParser.FROM_ - 64)) | (1 << (SQLiteParser.FULL_ - 64)) | (1 << (SQLiteParser.GLOB_ - 64)) | (1 << (SQLiteParser.GROUP_ - 64)) | (1 << (SQLiteParser.HAVING_ - 64)) | (1 << (SQLiteParser.IF_ - 64)) | (1 << (SQLiteParser.IGNORE_ - 64)) | (1 << (SQLiteParser.IMMEDIATE_ - 64)) | (1 << (SQLiteParser.IN_ - 64)) | (1 << (SQLiteParser.INDEX_ - 64)) | (1 << (SQLiteParser.INDEXED_ - 64)) | (1 << (SQLiteParser.INITIALLY_ - 64)) | (1 << (SQLiteParser.INNER_ - 64)) | (1 << (SQLiteParser.INSERT_ - 64)) | (1 << (SQLiteParser.INSTEAD_ - 64)) | (1 << (SQLiteParser.INTERSECT_ - 64)) | (1 << (SQLiteParser.INTO_ - 64)) | (1 << (SQLiteParser.IS_ - 64)) | (1 << (SQLiteParser.ISNULL_ - 64)) | (1 << (SQLiteParser.JOIN_ - 64)) | (1 << (SQLiteParser.KEY_ - 64)) | (1 << (SQLiteParser.LEFT_ - 64)) | (1 << (SQLiteParser.LIKE_ - 64)) | (1 << (SQLiteParser.LIMIT_ - 64)) | (1 << (SQLiteParser.MATCH_ - 64)) | (1 << (SQLiteParser.NATURAL_ - 64)) | (1 << (SQLiteParser.NO_ - 64)) | (1 << (SQLiteParser.NOT_ - 64)) | (1 << (SQLiteParser.NOTNULL_ - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF_ - 64)) | (1 << (SQLiteParser.OFFSET_ - 64)) | (1 << (SQLiteParser.ON_ - 64)) | (1 << (SQLiteParser.OR_ - 64)) | (1 << (SQLiteParser.ORDER_ - 64)) | (1 << (SQLiteParser.OUTER_ - 64)) | (1 << (SQLiteParser.PLAN_ - 64)) | (1 << (SQLiteParser.PRAGMA_ - 64)) | (1 << (SQLiteParser.PRIMARY_ - 64)) | (1 << (SQLiteParser.QUERY_ - 64)) | (1 << (SQLiteParser.RAISE_ - 64)) | (1 << (SQLiteParser.RECURSIVE_ - 64)) | (1 << (SQLiteParser.REFERENCES_ - 64)) | (1 << (SQLiteParser.REGEXP_ - 64)) | (1 << (SQLiteParser.REINDEX_ - 64)) | (1 << (SQLiteParser.RELEASE_ - 64)) | (1 << (SQLiteParser.RENAME_ - 64)) | (1 << (SQLiteParser.REPLACE_ - 64)) | (1 << (SQLiteParser.RESTRICT_ - 64)) | (1 << (SQLiteParser.RIGHT_ - 64)) | (1 << (SQLiteParser.ROLLBACK_ - 64)) | (1 << (SQLiteParser.ROW_ - 64)) | (1 << (SQLiteParser.ROWS_ - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.SAVEPOINT_ - 128)) | (1 << (SQLiteParser.SELECT_ - 128)) | (1 << (SQLiteParser.SET_ - 128)) | (1 << (SQLiteParser.TABLE_ - 128)) | (1 << (SQLiteParser.TEMP_ - 128)) | (1 << (SQLiteParser.TEMPORARY_ - 128)) | (1 << (SQLiteParser.THEN_ - 128)) | (1 << (SQLiteParser.TO_ - 128)) | (1 << (SQLiteParser.TRANSACTION_ - 128)) | (1 << (SQLiteParser.TRIGGER_ - 128)) | (1 << (SQLiteParser.UNION_ - 128)) | (1 << (SQLiteParser.UNIQUE_ - 128)) | (1 << (SQLiteParser.UPDATE_ - 128)) | (1 << (SQLiteParser.USING_ - 128)) | (1 << (SQLiteParser.VACUUM_ - 128)) | (1 << (SQLiteParser.VALUES_ - 128)) | (1 << (SQLiteParser.VIEW_ - 128)) | (1 << (SQLiteParser.VIRTUAL_ - 128)) | (1 << (SQLiteParser.WHEN_ - 128)) | (1 << (SQLiteParser.WHERE_ - 128)) | (1 << (SQLiteParser.WITH_ - 128)) | (1 << (SQLiteParser.WITHOUT_ - 128)) | (1 << (SQLiteParser.FIRST_VALUE_ - 128)) | (1 << (SQLiteParser.OVER_ - 128)) | (1 << (SQLiteParser.PARTITION_ - 128)) | (1 << (SQLiteParser.RANGE_ - 128)) | (1 << (SQLiteParser.PRECEDING_ - 128)) | (1 << (SQLiteParser.UNBOUNDED_ - 128)) | (1 << (SQLiteParser.CURRENT_ - 128)) | (1 << (SQLiteParser.FOLLOWING_ - 128)) | (1 << (SQLiteParser.CUME_DIST_ - 128)) | (1 << (SQLiteParser.DENSE_RANK_ - 128)) | (1 << (SQLiteParser.LAG_ - 128)) | (1 << (SQLiteParser.LAST_VALUE_ - 128)) | (1 << (SQLiteParser.LEAD_ - 128)) | (1 << (SQLiteParser.NTH_VALUE_ - 128)) | (1 << (SQLiteParser.NTILE_ - 128)) | (1 << (SQLiteParser.PERCENT_RANK_ - 128)) | (1 << (SQLiteParser.RANK_ - 128)) | (1 << (SQLiteParser.ROW_NUMBER_ - 128)) | (1 << (SQLiteParser.GENERATED_ - 128)) | (1 << (SQLiteParser.ALWAYS_ - 128)) | (1 << (SQLiteParser.STORED_ - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW_ - 128)) | (1 << (SQLiteParser.NULLS_ - 128)) | (1 << (SQLiteParser.FIRST_ - 128)) | (1 << (SQLiteParser.LAST_ - 128)) | (1 << (SQLiteParser.FILTER_ - 128)) | (1 << (SQLiteParser.GROUPS_ - 128)) | (1 << (SQLiteParser.EXCLUDE_ - 128)) | (1 << (SQLiteParser.IDENTIFIER - 128)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 128)) | (1 << (SQLiteParser.BIND_PARAMETER - 128)) | (1 << (SQLiteParser.STRING_LITERAL - 128)) | (1 << (SQLiteParser.BLOB_LITERAL - 128)))) != 0):
                                self.state = 1057
                                self.expr(0)
                                self.state = 1062
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SQLiteParser.COMMA:
                                    self.state = 1058
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1059
                                    self.expr(0)
                                    self.state = 1064
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1067
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass


                        pass

             
                self.state = 1075
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Raise_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE_(self):
            return self.getToken(SQLiteParser.RAISE_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def error_message(self):
            return self.getTypedRuleContext(SQLiteParser.Error_messageContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_raise_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_function" ):
                listener.enterRaise_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_function" ):
                listener.exitRaise_function(self)




    def raise_function(self):

        localctx = SQLiteParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1076
            self.match(SQLiteParser.RAISE_)
            self.state = 1077
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1082
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IGNORE_]:
                self.state = 1078
                self.match(SQLiteParser.IGNORE_)
                pass
            elif token in [SQLiteParser.ABORT_, SQLiteParser.FAIL_, SQLiteParser.ROLLBACK_]:
                self.state = 1079
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT_ or _la==SQLiteParser.FAIL_ or _la==SQLiteParser.ROLLBACK_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1080
                self.match(SQLiteParser.COMMA)
                self.state = 1081
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1084
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SQLiteParser.BLOB_LITERAL, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def CURRENT_TIME_(self):
            return self.getToken(SQLiteParser.CURRENT_TIME_, 0)

        def CURRENT_DATE_(self):
            return self.getToken(SQLiteParser.CURRENT_DATE_, 0)

        def CURRENT_TIMESTAMP_(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = SQLiteParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1086
            _la = self._input.LA(1)
            if not(((((_la - 52)) & ~0x3f) == 0 and ((1 << (_la - 52)) & ((1 << (SQLiteParser.CURRENT_DATE_ - 52)) | (1 << (SQLiteParser.CURRENT_TIME_ - 52)) | (1 << (SQLiteParser.CURRENT_TIMESTAMP_ - 52)) | (1 << (SQLiteParser.NULL_ - 52)))) != 0) or ((((_la - 171)) & ~0x3f) == 0 and ((1 << (_la - 171)) & ((1 << (SQLiteParser.TRUE_ - 171)) | (1 << (SQLiteParser.FALSE_ - 171)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 171)) | (1 << (SQLiteParser.STRING_LITERAL - 171)) | (1 << (SQLiteParser.BLOB_LITERAL - 171)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO_(self):
            return self.getToken(SQLiteParser.INTO_, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def INSERT_(self):
            return self.getToken(SQLiteParser.INSERT_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def VALUES_(self):
            return self.getToken(SQLiteParser.VALUES_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def upsert_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Upsert_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def DEFAULT_(self):
            return self.getToken(SQLiteParser.DEFAULT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = SQLiteParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.state = 1158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.INSERT_, SQLiteParser.REPLACE_, SQLiteParser.WITH_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WITH_:
                    self.state = 1088
                    self.with_clause()


                self.state = 1096
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1091
                    self.match(SQLiteParser.INSERT_)
                    pass

                elif la_ == 2:
                    self.state = 1092
                    self.match(SQLiteParser.REPLACE_)
                    pass

                elif la_ == 3:
                    self.state = 1093
                    self.match(SQLiteParser.INSERT_)
                    self.state = 1094
                    self.match(SQLiteParser.OR_)
                    self.state = 1095
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.ABORT_ or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.FAIL_ - 72)) | (1 << (SQLiteParser.IGNORE_ - 72)) | (1 << (SQLiteParser.REPLACE_ - 72)) | (1 << (SQLiteParser.ROLLBACK_ - 72)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                self.state = 1098
                self.match(SQLiteParser.INTO_)
                self.state = 1102
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 1099
                    self.schema_name()
                    self.state = 1100
                    self.match(SQLiteParser.DOT)


                self.state = 1104
                self.table_name()
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AS_:
                    self.state = 1105
                    self.match(SQLiteParser.AS_)
                    self.state = 1106
                    self.table_alias()


                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OPEN_PAR:
                    self.state = 1109
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1110
                    self.column_name()
                    self.state = 1115
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1111
                        self.match(SQLiteParser.COMMA)
                        self.state = 1112
                        self.column_name()
                        self.state = 1117
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1118
                    self.match(SQLiteParser.CLOSE_PAR)


                self.state = 1151
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1122
                    self.match(SQLiteParser.VALUES_)
                    self.state = 1123
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1124
                    self.expr(0)
                    self.state = 1129
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1125
                        self.match(SQLiteParser.COMMA)
                        self.state = 1126
                        self.expr(0)
                        self.state = 1131
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1132
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1133
                        self.match(SQLiteParser.COMMA)
                        self.state = 1134
                        self.match(SQLiteParser.OPEN_PAR)
                        self.state = 1135
                        self.expr(0)
                        self.state = 1140
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 1136
                            self.match(SQLiteParser.COMMA)
                            self.state = 1137
                            self.expr(0)
                            self.state = 1142
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1143
                        self.match(SQLiteParser.CLOSE_PAR)
                        self.state = 1149
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1150
                    self.select_stmt()
                    pass


                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON_:
                    self.state = 1153
                    self.upsert_clause()


                pass
            elif token in [SQLiteParser.DEFAULT_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1156
                self.match(SQLiteParser.DEFAULT_)
                self.state = 1157
                self.match(SQLiteParser.VALUES_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upsert_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def CONFLICT_(self):
            return self.getToken(SQLiteParser.CONFLICT_, 0)

        def DO_(self):
            return self.getToken(SQLiteParser.DO_, 0)

        def NOTHING_(self):
            return self.getToken(SQLiteParser.NOTHING_, 0)

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.EQ)
            else:
                return self.getToken(SQLiteParser.EQ, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHERE_)
            else:
                return self.getToken(SQLiteParser.WHERE_, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_upsert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpsert_clause" ):
                listener.enterUpsert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpsert_clause" ):
                listener.exitUpsert_clause(self)




    def upsert_clause(self):

        localctx = SQLiteParser.Upsert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_upsert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(SQLiteParser.ON_)
            self.state = 1161
            self.match(SQLiteParser.CONFLICT_)
            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 1162
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1163
                self.indexed_column()
                self.state = 1168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1164
                    self.match(SQLiteParser.COMMA)
                    self.state = 1165
                    self.indexed_column()
                    self.state = 1170
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1171
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE_:
                    self.state = 1172
                    self.match(SQLiteParser.WHERE_)
                    self.state = 1173
                    self.expr(0)




            self.state = 1178
            self.match(SQLiteParser.DO_)
            self.state = 1205
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.NOTHING_]:
                self.state = 1179
                self.match(SQLiteParser.NOTHING_)
                pass
            elif token in [SQLiteParser.UPDATE_]:
                self.state = 1180
                self.match(SQLiteParser.UPDATE_)
                self.state = 1181
                self.match(SQLiteParser.SET_)

                self.state = 1184
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1182
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1183
                    self.column_name_list()
                    pass


                self.state = 1186
                self.match(SQLiteParser.EQ)
                self.state = 1187
                self.expr(0)
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1188
                    self.match(SQLiteParser.COMMA)
                    self.state = 1191
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                    if la_ == 1:
                        self.state = 1189
                        self.column_name()
                        pass

                    elif la_ == 2:
                        self.state = 1190
                        self.column_name_list()
                        pass


                    self.state = 1193
                    self.match(SQLiteParser.EQ)
                    self.state = 1194
                    self.expr(0)
                    self.state = 1200
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE_:
                    self.state = 1201
                    self.match(SQLiteParser.WHERE_)
                    self.state = 1202
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA_(self):
            return self.getToken(SQLiteParser.PRAGMA_, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def pragma_value(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_valueContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_stmt" ):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_stmt" ):
                listener.exitPragma_stmt(self)




    def pragma_stmt(self):

        localctx = SQLiteParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1207
            self.match(SQLiteParser.PRAGMA_)
            self.state = 1211
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1208
                self.schema_name()
                self.state = 1209
                self.match(SQLiteParser.DOT)


            self.state = 1213
            self.pragma_name()
            self.state = 1220
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ASSIGN]:
                self.state = 1214
                self.match(SQLiteParser.ASSIGN)
                self.state = 1215
                self.pragma_value()
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.state = 1216
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1217
                self.pragma_value()
                self.state = 1218
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.ATTACH_, SQLiteParser.BEGIN_, SQLiteParser.COMMIT_, SQLiteParser.CREATE_, SQLiteParser.DEFAULT_, SQLiteParser.DELETE_, SQLiteParser.DETACH_, SQLiteParser.DROP_, SQLiteParser.END_, SQLiteParser.EXPLAIN_, SQLiteParser.INSERT_, SQLiteParser.PRAGMA_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.REPLACE_, SQLiteParser.ROLLBACK_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.UPDATE_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.WITH_]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_value" ):
                listener.enterPragma_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_value" ):
                listener.exitPragma_value(self)




    def pragma_value(self):

        localctx = SQLiteParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pragma_value)
        try:
            self.state = 1225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1222
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1223
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1224
                self.match(SQLiteParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REINDEX_(self):
            return self.getToken(SQLiteParser.REINDEX_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_reindex_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_stmt" ):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_stmt" ):
                listener.exitReindex_stmt(self)




    def reindex_stmt(self):

        localctx = SQLiteParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1227
            self.match(SQLiteParser.REINDEX_)
            self.state = 1238
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1228
                self.collation_name()

            elif la_ == 2:
                self.state = 1232
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1229
                    self.schema_name()
                    self.state = 1230
                    self.match(SQLiteParser.DOT)


                self.state = 1236
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 1234
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 1235
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = SQLiteParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 1240
                self.common_table_stmt()


            self.state = 1243
            self.select_core()
            self.state = 1249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1244
                    self.compound_operator()
                    self.state = 1245
                    self.select_core() 
                self.state = 1251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER_:
                self.state = 1252
                self.order_by_stmt()


            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT_:
                self.state = 1255
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = SQLiteParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1258
            self.table_or_subquery()
            self.state = 1266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA or _la==SQLiteParser.CROSS_ or ((((_la - 87)) & ~0x3f) == 0 and ((1 << (_la - 87)) & ((1 << (SQLiteParser.INNER_ - 87)) | (1 << (SQLiteParser.JOIN_ - 87)) | (1 << (SQLiteParser.LEFT_ - 87)) | (1 << (SQLiteParser.NATURAL_ - 87)))) != 0):
                self.state = 1259
                self.join_operator()
                self.state = 1260
                self.table_or_subquery()
                self.state = 1262
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1261
                    self.join_constraint()


                self.state = 1268
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT_(self):
            return self.getToken(SQLiteParser.SELECT_, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def GROUP_(self):
            return self.getToken(SQLiteParser.GROUP_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def WINDOW_(self):
            return self.getToken(SQLiteParser.WINDOW_, 0)

        def window_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_nameContext,i)


        def AS_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS_)
            else:
                return self.getToken(SQLiteParser.AS_, i)

        def window_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_defnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_defnContext,i)


        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def HAVING_(self):
            return self.getToken(SQLiteParser.HAVING_, 0)

        def VALUES_(self):
            return self.getToken(SQLiteParser.VALUES_, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = SQLiteParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1359
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.SELECT_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1269
                self.match(SQLiteParser.SELECT_)
                self.state = 1271
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1270
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.ALL_ or _la==SQLiteParser.DISTINCT_):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1273
                self.result_column()
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1274
                    self.match(SQLiteParser.COMMA)
                    self.state = 1275
                    self.result_column()
                    self.state = 1280
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.FROM_:
                    self.state = 1281
                    self.match(SQLiteParser.FROM_)
                    self.state = 1291
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                    if la_ == 1:
                        self.state = 1282
                        self.table_or_subquery()
                        self.state = 1287
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 1283
                            self.match(SQLiteParser.COMMA)
                            self.state = 1284
                            self.table_or_subquery()
                            self.state = 1289
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1290
                        self.join_clause()
                        pass




                self.state = 1297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE_:
                    self.state = 1295
                    self.match(SQLiteParser.WHERE_)
                    self.state = 1296
                    self.expr(0)


                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.GROUP_:
                    self.state = 1299
                    self.match(SQLiteParser.GROUP_)
                    self.state = 1300
                    self.match(SQLiteParser.BY_)
                    self.state = 1301
                    self.expr(0)
                    self.state = 1306
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1302
                        self.match(SQLiteParser.COMMA)
                        self.state = 1303
                        self.expr(0)
                        self.state = 1308
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.HAVING_:
                        self.state = 1309
                        self.match(SQLiteParser.HAVING_)
                        self.state = 1310
                        self.expr(0)




                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WINDOW_:
                    self.state = 1315
                    self.match(SQLiteParser.WINDOW_)
                    self.state = 1316
                    self.window_name()
                    self.state = 1317
                    self.match(SQLiteParser.AS_)
                    self.state = 1318
                    self.window_defn()
                    self.state = 1326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1319
                        self.match(SQLiteParser.COMMA)
                        self.state = 1320
                        self.window_name()
                        self.state = 1321
                        self.match(SQLiteParser.AS_)
                        self.state = 1322
                        self.window_defn()
                        self.state = 1328
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [SQLiteParser.VALUES_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1331
                self.match(SQLiteParser.VALUES_)
                self.state = 1332
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1333
                self.expr(0)
                self.state = 1338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1334
                    self.match(SQLiteParser.COMMA)
                    self.state = 1335
                    self.expr(0)
                    self.state = 1340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1341
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1342
                    self.match(SQLiteParser.COMMA)
                    self.state = 1343
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1344
                    self.expr(0)
                    self.state = 1349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1345
                        self.match(SQLiteParser.COMMA)
                        self.state = 1346
                        self.expr(0)
                        self.state = 1351
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1352
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factored_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_factored_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactored_select_stmt" ):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactored_select_stmt" ):
                listener.exitFactored_select_stmt(self)




    def factored_select_stmt(self):

        localctx = SQLiteParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_factored_select_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SQLiteParser.Select_coreContext,0)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = SQLiteParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 1363
                self.common_table_stmt()


            self.state = 1366
            self.select_core()
            self.state = 1368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER_:
                self.state = 1367
                self.order_by_stmt()


            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT_:
                self.state = 1370
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def UNION_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UNION_)
            else:
                return self.getToken(SQLiteParser.UNION_, i)

        def INTERSECT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.INTERSECT_)
            else:
                return self.getToken(SQLiteParser.INTERSECT_, i)

        def EXCEPT_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.EXCEPT_)
            else:
                return self.getToken(SQLiteParser.EXCEPT_, i)

        def ALL_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ALL_)
            else:
                return self.getToken(SQLiteParser.ALL_, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = SQLiteParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 1373
                self.common_table_stmt()


            self.state = 1376
            self.select_core()
            self.state = 1386 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1383
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.UNION_]:
                    self.state = 1377
                    self.match(SQLiteParser.UNION_)
                    self.state = 1379
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.ALL_:
                        self.state = 1378
                        self.match(SQLiteParser.ALL_)


                    pass
                elif token in [SQLiteParser.INTERSECT_]:
                    self.state = 1381
                    self.match(SQLiteParser.INTERSECT_)
                    pass
                elif token in [SQLiteParser.EXCEPT_]:
                    self.state = 1382
                    self.match(SQLiteParser.EXCEPT_)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1385
                self.select_core()
                self.state = 1388 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.EXCEPT_ or _la==SQLiteParser.INTERSECT_ or _la==SQLiteParser.UNION_):
                    break

            self.state = 1391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER_:
                self.state = 1390
                self.order_by_stmt()


            self.state = 1394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT_:
                self.state = 1393
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def INDEXED_(self):
            return self.getToken(SQLiteParser.INDEXED_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = SQLiteParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1399
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                if la_ == 1:
                    self.state = 1396
                    self.schema_name()
                    self.state = 1397
                    self.match(SQLiteParser.DOT)


                self.state = 1401
                self.table_name()
                self.state = 1406
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1403
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                    if la_ == 1:
                        self.state = 1402
                        self.match(SQLiteParser.AS_)


                    self.state = 1405
                    self.table_alias()


                self.state = 1413
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.INDEXED_]:
                    self.state = 1408
                    self.match(SQLiteParser.INDEXED_)
                    self.state = 1409
                    self.match(SQLiteParser.BY_)
                    self.state = 1410
                    self.index_name()
                    pass
                elif token in [SQLiteParser.NOT_]:
                    self.state = 1411
                    self.match(SQLiteParser.NOT_)
                    self.state = 1412
                    self.match(SQLiteParser.INDEXED_)
                    pass
                elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.ATTACH_, SQLiteParser.BEGIN_, SQLiteParser.COMMIT_, SQLiteParser.CREATE_, SQLiteParser.CROSS_, SQLiteParser.DEFAULT_, SQLiteParser.DELETE_, SQLiteParser.DETACH_, SQLiteParser.DROP_, SQLiteParser.END_, SQLiteParser.EXCEPT_, SQLiteParser.EXPLAIN_, SQLiteParser.GROUP_, SQLiteParser.INNER_, SQLiteParser.INSERT_, SQLiteParser.INTERSECT_, SQLiteParser.JOIN_, SQLiteParser.LEFT_, SQLiteParser.LIMIT_, SQLiteParser.NATURAL_, SQLiteParser.ON_, SQLiteParser.ORDER_, SQLiteParser.PRAGMA_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.REPLACE_, SQLiteParser.ROLLBACK_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.UNION_, SQLiteParser.UPDATE_, SQLiteParser.USING_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.WHERE_, SQLiteParser.WITH_, SQLiteParser.WINDOW_]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1418
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1415
                    self.schema_name()
                    self.state = 1416
                    self.match(SQLiteParser.DOT)


                self.state = 1420
                self.table_function_name()
                self.state = 1421
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1422
                self.expr(0)
                self.state = 1427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1423
                    self.match(SQLiteParser.COMMA)
                    self.state = 1424
                    self.expr(0)
                    self.state = 1429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1430
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1435
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1432
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                    if la_ == 1:
                        self.state = 1431
                        self.match(SQLiteParser.AS_)


                    self.state = 1434
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1437
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1438
                    self.table_or_subquery()
                    self.state = 1443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1439
                        self.match(SQLiteParser.COMMA)
                        self.state = 1440
                        self.table_or_subquery()
                        self.state = 1445
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1446
                    self.join_clause()
                    pass


                self.state = 1449
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1451
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1452
                self.select_stmt()
                self.state = 1453
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1458
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1455
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                    if la_ == 1:
                        self.state = 1454
                        self.match(SQLiteParser.AS_)


                    self.state = 1457
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Column_aliasContext,0)


        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = SQLiteParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 1474
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1463
                self.table_name()
                self.state = 1464
                self.match(SQLiteParser.DOT)
                self.state = 1465
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1467
                self.expr(0)
                self.state = 1472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AS_ or _la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL:
                    self.state = 1469
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.AS_:
                        self.state = 1468
                        self.match(SQLiteParser.AS_)


                    self.state = 1471
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def JOIN_(self):
            return self.getToken(SQLiteParser.JOIN_, 0)

        def NATURAL_(self):
            return self.getToken(SQLiteParser.NATURAL_, 0)

        def LEFT_(self):
            return self.getToken(SQLiteParser.LEFT_, 0)

        def INNER_(self):
            return self.getToken(SQLiteParser.INNER_, 0)

        def CROSS_(self):
            return self.getToken(SQLiteParser.CROSS_, 0)

        def OUTER_(self):
            return self.getToken(SQLiteParser.OUTER_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = SQLiteParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1476
                self.match(SQLiteParser.COMMA)
                pass
            elif token in [SQLiteParser.CROSS_, SQLiteParser.INNER_, SQLiteParser.JOIN_, SQLiteParser.LEFT_, SQLiteParser.NATURAL_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.NATURAL_:
                    self.state = 1477
                    self.match(SQLiteParser.NATURAL_)


                self.state = 1486
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.LEFT_]:
                    self.state = 1480
                    self.match(SQLiteParser.LEFT_)
                    self.state = 1482
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.OUTER_:
                        self.state = 1481
                        self.match(SQLiteParser.OUTER_)


                    pass
                elif token in [SQLiteParser.INNER_]:
                    self.state = 1484
                    self.match(SQLiteParser.INNER_)
                    pass
                elif token in [SQLiteParser.CROSS_]:
                    self.state = 1485
                    self.match(SQLiteParser.CROSS_)
                    pass
                elif token in [SQLiteParser.JOIN_]:
                    pass
                else:
                    pass
                self.state = 1488
                self.match(SQLiteParser.JOIN_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def USING_(self):
            return self.getToken(SQLiteParser.USING_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = SQLiteParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.state = 1505
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ON_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1491
                self.match(SQLiteParser.ON_)
                self.state = 1492
                self.expr(0)
                pass
            elif token in [SQLiteParser.USING_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1493
                self.match(SQLiteParser.USING_)
                self.state = 1494
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1495
                self.column_name()
                self.state = 1500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1496
                    self.match(SQLiteParser.COMMA)
                    self.state = 1497
                    self.column_name()
                    self.state = 1502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1503
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION_(self):
            return self.getToken(SQLiteParser.UNION_, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def INTERSECT_(self):
            return self.getToken(SQLiteParser.INTERSECT_, 0)

        def EXCEPT_(self):
            return self.getToken(SQLiteParser.EXCEPT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = SQLiteParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_compound_operator)
        self._la = 0 # Token type
        try:
            self.state = 1513
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.UNION_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1507
                self.match(SQLiteParser.UNION_)
                self.state = 1509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ALL_:
                    self.state = 1508
                    self.match(SQLiteParser.ALL_)


                pass
            elif token in [SQLiteParser.INTERSECT_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1511
                self.match(SQLiteParser.INTERSECT_)
                pass
            elif token in [SQLiteParser.EXCEPT_]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1512
                self.match(SQLiteParser.EXCEPT_)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = SQLiteParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 1515
                self.with_clause()


            self.state = 1518
            self.match(SQLiteParser.UPDATE_)
            self.state = 1521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1519
                self.match(SQLiteParser.OR_)
                self.state = 1520
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT_ or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.FAIL_ - 72)) | (1 << (SQLiteParser.IGNORE_ - 72)) | (1 << (SQLiteParser.REPLACE_ - 72)) | (1 << (SQLiteParser.ROLLBACK_ - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1523
            self.qualified_table_name()
            self.state = 1524
            self.match(SQLiteParser.SET_)
            self.state = 1527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1525
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1526
                self.column_name_list()
                pass


            self.state = 1529
            self.match(SQLiteParser.ASSIGN)
            self.state = 1530
            self.expr(0)
            self.state = 1541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1531
                self.match(SQLiteParser.COMMA)
                self.state = 1534
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                if la_ == 1:
                    self.state = 1532
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1533
                    self.column_name_list()
                    pass


                self.state = 1536
                self.match(SQLiteParser.ASSIGN)
                self.state = 1537
                self.expr(0)
                self.state = 1543
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE_:
                self.state = 1544
                self.match(SQLiteParser.WHERE_)
                self.state = 1545
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)




    def column_name_list(self):

        localctx = SQLiteParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1548
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1549
            self.column_name()
            self.state = 1554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1550
                self.match(SQLiteParser.COMMA)
                self.state = 1551
                self.column_name()
                self.state = 1556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1557
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)




    def update_stmt_limited(self):

        localctx = SQLiteParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH_:
                self.state = 1559
                self.with_clause()


            self.state = 1562
            self.match(SQLiteParser.UPDATE_)
            self.state = 1565
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.state = 1563
                self.match(SQLiteParser.OR_)
                self.state = 1564
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT_ or ((((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & ((1 << (SQLiteParser.FAIL_ - 72)) | (1 << (SQLiteParser.IGNORE_ - 72)) | (1 << (SQLiteParser.REPLACE_ - 72)) | (1 << (SQLiteParser.ROLLBACK_ - 72)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1567
            self.qualified_table_name()
            self.state = 1568
            self.match(SQLiteParser.SET_)
            self.state = 1571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.state = 1569
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1570
                self.column_name_list()
                pass


            self.state = 1573
            self.match(SQLiteParser.ASSIGN)
            self.state = 1574
            self.expr(0)
            self.state = 1585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1575
                self.match(SQLiteParser.COMMA)
                self.state = 1578
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1576
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1577
                    self.column_name_list()
                    pass


                self.state = 1580
                self.match(SQLiteParser.ASSIGN)
                self.state = 1581
                self.expr(0)
                self.state = 1587
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE_:
                self.state = 1588
                self.match(SQLiteParser.WHERE_)
                self.state = 1589
                self.expr(0)


            self.state = 1596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT_ or _la==SQLiteParser.ORDER_:
                self.state = 1593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER_:
                    self.state = 1592
                    self.order_by_stmt()


                self.state = 1595
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def alias(self):
            return self.getTypedRuleContext(SQLiteParser.AliasContext,0)


        def INDEXED_(self):
            return self.getToken(SQLiteParser.INDEXED_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)




    def qualified_table_name(self):

        localctx = SQLiteParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_qualified_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 1598
                self.schema_name()
                self.state = 1599
                self.match(SQLiteParser.DOT)


            self.state = 1603
            self.table_name()
            self.state = 1606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.AS_:
                self.state = 1604
                self.match(SQLiteParser.AS_)
                self.state = 1605
                self.alias()


            self.state = 1613
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.INDEXED_]:
                self.state = 1608
                self.match(SQLiteParser.INDEXED_)
                self.state = 1609
                self.match(SQLiteParser.BY_)
                self.state = 1610
                self.index_name()
                pass
            elif token in [SQLiteParser.NOT_]:
                self.state = 1611
                self.match(SQLiteParser.NOT_)
                self.state = 1612
                self.match(SQLiteParser.INDEXED_)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.ATTACH_, SQLiteParser.BEGIN_, SQLiteParser.COMMIT_, SQLiteParser.CREATE_, SQLiteParser.DEFAULT_, SQLiteParser.DELETE_, SQLiteParser.DETACH_, SQLiteParser.DROP_, SQLiteParser.END_, SQLiteParser.EXPLAIN_, SQLiteParser.INSERT_, SQLiteParser.LIMIT_, SQLiteParser.ORDER_, SQLiteParser.PRAGMA_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.REPLACE_, SQLiteParser.ROLLBACK_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.SET_, SQLiteParser.UPDATE_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.WHERE_, SQLiteParser.WITH_]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VACUUM_(self):
            return self.getToken(SQLiteParser.VACUUM_, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def INTO_(self):
            return self.getToken(SQLiteParser.INTO_, 0)

        def filename(self):
            return self.getTypedRuleContext(SQLiteParser.FilenameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_vacuum_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_stmt" ):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_stmt" ):
                listener.exitVacuum_stmt(self)




    def vacuum_stmt(self):

        localctx = SQLiteParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_vacuum_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1615
            self.match(SQLiteParser.VACUUM_)
            self.state = 1617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.state = 1616
                self.schema_name()


            self.state = 1621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.INTO_:
                self.state = 1619
                self.match(SQLiteParser.INTO_)
                self.state = 1620
                self.filename()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER_(self):
            return self.getToken(SQLiteParser.FILTER_, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_filter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_clause" ):
                listener.enterFilter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_clause" ):
                listener.exitFilter_clause(self)




    def filter_clause(self):

        localctx = SQLiteParser.Filter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_filter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623
            self.match(SQLiteParser.FILTER_)
            self.state = 1624
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1625
            self.match(SQLiteParser.WHERE_)
            self.state = 1626
            self.expr(0)
            self.state = 1627
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY_)
            else:
                return self.getToken(SQLiteParser.BY_, i)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_defn" ):
                listener.enterWindow_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_defn" ):
                listener.exitWindow_defn(self)




    def window_defn(self):

        localctx = SQLiteParser.Window_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_window_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1629
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1631
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 1630
                self.base_window_name()


            self.state = 1643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.PARTITION_:
                self.state = 1633
                self.match(SQLiteParser.PARTITION_)
                self.state = 1634
                self.match(SQLiteParser.BY_)
                self.state = 1635
                self.expr(0)
                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1636
                    self.match(SQLiteParser.COMMA)
                    self.state = 1637
                    self.expr(0)
                    self.state = 1642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1645
            self.match(SQLiteParser.ORDER_)
            self.state = 1646
            self.match(SQLiteParser.BY_)
            self.state = 1647
            self.ordering_term()
            self.state = 1652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1648
                self.match(SQLiteParser.COMMA)
                self.state = 1649
                self.ordering_term()
                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS_ - 127)) | (1 << (SQLiteParser.RANGE_ - 127)) | (1 << (SQLiteParser.GROUPS_ - 127)))) != 0):
                self.state = 1655
                self.frame_spec()


            self.state = 1658
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def BY_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY_)
            else:
                return self.getToken(SQLiteParser.BY_, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)




    def over_clause(self):

        localctx = SQLiteParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1660
            self.match(SQLiteParser.OVER_)
            self.state = 1694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.state = 1661
                self.window_name()
                pass

            elif la_ == 2:
                self.state = 1662
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1664
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
                if la_ == 1:
                    self.state = 1663
                    self.base_window_name()


                self.state = 1676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1666
                    self.match(SQLiteParser.PARTITION_)
                    self.state = 1667
                    self.match(SQLiteParser.BY_)
                    self.state = 1668
                    self.expr(0)
                    self.state = 1673
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1669
                        self.match(SQLiteParser.COMMA)
                        self.state = 1670
                        self.expr(0)
                        self.state = 1675
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER_:
                    self.state = 1678
                    self.match(SQLiteParser.ORDER_)
                    self.state = 1679
                    self.match(SQLiteParser.BY_)
                    self.state = 1680
                    self.ordering_term()
                    self.state = 1685
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1681
                        self.match(SQLiteParser.COMMA)
                        self.state = 1682
                        self.ordering_term()
                        self.state = 1687
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS_ - 127)) | (1 << (SQLiteParser.RANGE_ - 127)) | (1 << (SQLiteParser.GROUPS_ - 127)))) != 0):
                    self.state = 1690
                    self.frame_spec()


                self.state = 1693
                self.match(SQLiteParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def EXCLUDE_(self):
            return self.getToken(SQLiteParser.EXCLUDE_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def GROUP_(self):
            return self.getToken(SQLiteParser.GROUP_, 0)

        def TIES_(self):
            return self.getToken(SQLiteParser.TIES_, 0)

        def NO_(self):
            return self.getToken(SQLiteParser.NO_, 0)

        def OTHERS_(self):
            return self.getToken(SQLiteParser.OTHERS_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_spec" ):
                listener.enterFrame_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_spec" ):
                listener.exitFrame_spec(self)




    def frame_spec(self):

        localctx = SQLiteParser.Frame_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_frame_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1696
            self.frame_clause()
            self.state = 1704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.EXCLUDE_]:
                self.state = 1697
                self.match(SQLiteParser.EXCLUDE_)

                self.state = 1698
                self.match(SQLiteParser.NO_)
                self.state = 1699
                self.match(SQLiteParser.OTHERS_)
                pass
            elif token in [SQLiteParser.CURRENT_]:
                self.state = 1700
                self.match(SQLiteParser.CURRENT_)
                self.state = 1701
                self.match(SQLiteParser.ROW_)
                pass
            elif token in [SQLiteParser.GROUP_]:
                self.state = 1702
                self.match(SQLiteParser.GROUP_)
                pass
            elif token in [SQLiteParser.TIES_]:
                self.state = 1703
                self.match(SQLiteParser.TIES_)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE_(self):
            return self.getToken(SQLiteParser.RANGE_, 0)

        def ROWS_(self):
            return self.getToken(SQLiteParser.ROWS_, 0)

        def GROUPS_(self):
            return self.getToken(SQLiteParser.GROUPS_, 0)

        def frame_single(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_singleContext,0)


        def BETWEEN_(self):
            return self.getToken(SQLiteParser.BETWEEN_, 0)

        def frame_left(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_leftContext,0)


        def AND_(self):
            return self.getToken(SQLiteParser.AND_, 0)

        def frame_right(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_rightContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_clause" ):
                listener.enterFrame_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_clause" ):
                listener.exitFrame_clause(self)




    def frame_clause(self):

        localctx = SQLiteParser.Frame_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_frame_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1706
            _la = self._input.LA(1)
            if not(((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS_ - 127)) | (1 << (SQLiteParser.RANGE_ - 127)) | (1 << (SQLiteParser.GROUPS_ - 127)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.state = 1707
                self.frame_single()
                pass

            elif la_ == 2:
                self.state = 1708
                self.match(SQLiteParser.BETWEEN_)
                self.state = 1709
                self.frame_left()
                self.state = 1710
                self.match(SQLiteParser.AND_)
                self.state = 1711
                self.frame_right()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_func(self):
            return self.getTypedRuleContext(SQLiteParser.Simple_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_function_invocation" ):
                listener.enterSimple_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_function_invocation" ):
                listener.exitSimple_function_invocation(self)




    def simple_function_invocation(self):

        localctx = SQLiteParser.Simple_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_simple_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1715
            self.simple_func()
            self.state = 1716
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT_, SQLiteParser.ACTION_, SQLiteParser.ADD_, SQLiteParser.AFTER_, SQLiteParser.ALL_, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.AND_, SQLiteParser.AS_, SQLiteParser.ASC_, SQLiteParser.ATTACH_, SQLiteParser.AUTOINCREMENT_, SQLiteParser.BEFORE_, SQLiteParser.BEGIN_, SQLiteParser.BETWEEN_, SQLiteParser.BY_, SQLiteParser.CASCADE_, SQLiteParser.CASE_, SQLiteParser.CAST_, SQLiteParser.CHECK_, SQLiteParser.COLLATE_, SQLiteParser.COLUMN_, SQLiteParser.COMMIT_, SQLiteParser.CONFLICT_, SQLiteParser.CONSTRAINT_, SQLiteParser.CREATE_, SQLiteParser.CROSS_, SQLiteParser.CURRENT_DATE_, SQLiteParser.CURRENT_TIME_, SQLiteParser.CURRENT_TIMESTAMP_, SQLiteParser.DATABASE_, SQLiteParser.DEFAULT_, SQLiteParser.DEFERRABLE_, SQLiteParser.DEFERRED_, SQLiteParser.DELETE_, SQLiteParser.DESC_, SQLiteParser.DETACH_, SQLiteParser.DISTINCT_, SQLiteParser.DROP_, SQLiteParser.EACH_, SQLiteParser.ELSE_, SQLiteParser.END_, SQLiteParser.ESCAPE_, SQLiteParser.EXCEPT_, SQLiteParser.EXCLUSIVE_, SQLiteParser.EXISTS_, SQLiteParser.EXPLAIN_, SQLiteParser.FAIL_, SQLiteParser.FOR_, SQLiteParser.FOREIGN_, SQLiteParser.FROM_, SQLiteParser.FULL_, SQLiteParser.GLOB_, SQLiteParser.GROUP_, SQLiteParser.HAVING_, SQLiteParser.IF_, SQLiteParser.IGNORE_, SQLiteParser.IMMEDIATE_, SQLiteParser.IN_, SQLiteParser.INDEX_, SQLiteParser.INDEXED_, SQLiteParser.INITIALLY_, SQLiteParser.INNER_, SQLiteParser.INSERT_, SQLiteParser.INSTEAD_, SQLiteParser.INTERSECT_, SQLiteParser.INTO_, SQLiteParser.IS_, SQLiteParser.ISNULL_, SQLiteParser.JOIN_, SQLiteParser.KEY_, SQLiteParser.LEFT_, SQLiteParser.LIKE_, SQLiteParser.LIMIT_, SQLiteParser.MATCH_, SQLiteParser.NATURAL_, SQLiteParser.NO_, SQLiteParser.NOT_, SQLiteParser.NOTNULL_, SQLiteParser.NULL_, SQLiteParser.OF_, SQLiteParser.OFFSET_, SQLiteParser.ON_, SQLiteParser.OR_, SQLiteParser.ORDER_, SQLiteParser.OUTER_, SQLiteParser.PLAN_, SQLiteParser.PRAGMA_, SQLiteParser.PRIMARY_, SQLiteParser.QUERY_, SQLiteParser.RAISE_, SQLiteParser.RECURSIVE_, SQLiteParser.REFERENCES_, SQLiteParser.REGEXP_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.RENAME_, SQLiteParser.REPLACE_, SQLiteParser.RESTRICT_, SQLiteParser.RIGHT_, SQLiteParser.ROLLBACK_, SQLiteParser.ROW_, SQLiteParser.ROWS_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.SET_, SQLiteParser.TABLE_, SQLiteParser.TEMP_, SQLiteParser.TEMPORARY_, SQLiteParser.THEN_, SQLiteParser.TO_, SQLiteParser.TRANSACTION_, SQLiteParser.TRIGGER_, SQLiteParser.UNION_, SQLiteParser.UNIQUE_, SQLiteParser.UPDATE_, SQLiteParser.USING_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.VIEW_, SQLiteParser.VIRTUAL_, SQLiteParser.WHEN_, SQLiteParser.WHERE_, SQLiteParser.WITH_, SQLiteParser.WITHOUT_, SQLiteParser.FIRST_VALUE_, SQLiteParser.OVER_, SQLiteParser.PARTITION_, SQLiteParser.RANGE_, SQLiteParser.PRECEDING_, SQLiteParser.UNBOUNDED_, SQLiteParser.CURRENT_, SQLiteParser.FOLLOWING_, SQLiteParser.CUME_DIST_, SQLiteParser.DENSE_RANK_, SQLiteParser.LAG_, SQLiteParser.LAST_VALUE_, SQLiteParser.LEAD_, SQLiteParser.NTH_VALUE_, SQLiteParser.NTILE_, SQLiteParser.PERCENT_RANK_, SQLiteParser.RANK_, SQLiteParser.ROW_NUMBER_, SQLiteParser.GENERATED_, SQLiteParser.ALWAYS_, SQLiteParser.STORED_, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW_, SQLiteParser.NULLS_, SQLiteParser.FIRST_, SQLiteParser.LAST_, SQLiteParser.FILTER_, SQLiteParser.GROUPS_, SQLiteParser.EXCLUDE_, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1717
                self.expr(0)
                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1718
                    self.match(SQLiteParser.COMMA)
                    self.state = 1719
                    self.expr(0)
                    self.state = 1724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1725
                self.match(SQLiteParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1728
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_func(self):
            return self.getTypedRuleContext(SQLiteParser.Aggregate_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_invocation" ):
                listener.enterAggregate_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_invocation" ):
                listener.exitAggregate_function_invocation(self)




    def aggregate_function_invocation(self):

        localctx = SQLiteParser.Aggregate_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_aggregate_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1730
            self.aggregate_func()
            self.state = 1731
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT_, SQLiteParser.ACTION_, SQLiteParser.ADD_, SQLiteParser.AFTER_, SQLiteParser.ALL_, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.AND_, SQLiteParser.AS_, SQLiteParser.ASC_, SQLiteParser.ATTACH_, SQLiteParser.AUTOINCREMENT_, SQLiteParser.BEFORE_, SQLiteParser.BEGIN_, SQLiteParser.BETWEEN_, SQLiteParser.BY_, SQLiteParser.CASCADE_, SQLiteParser.CASE_, SQLiteParser.CAST_, SQLiteParser.CHECK_, SQLiteParser.COLLATE_, SQLiteParser.COLUMN_, SQLiteParser.COMMIT_, SQLiteParser.CONFLICT_, SQLiteParser.CONSTRAINT_, SQLiteParser.CREATE_, SQLiteParser.CROSS_, SQLiteParser.CURRENT_DATE_, SQLiteParser.CURRENT_TIME_, SQLiteParser.CURRENT_TIMESTAMP_, SQLiteParser.DATABASE_, SQLiteParser.DEFAULT_, SQLiteParser.DEFERRABLE_, SQLiteParser.DEFERRED_, SQLiteParser.DELETE_, SQLiteParser.DESC_, SQLiteParser.DETACH_, SQLiteParser.DISTINCT_, SQLiteParser.DROP_, SQLiteParser.EACH_, SQLiteParser.ELSE_, SQLiteParser.END_, SQLiteParser.ESCAPE_, SQLiteParser.EXCEPT_, SQLiteParser.EXCLUSIVE_, SQLiteParser.EXISTS_, SQLiteParser.EXPLAIN_, SQLiteParser.FAIL_, SQLiteParser.FOR_, SQLiteParser.FOREIGN_, SQLiteParser.FROM_, SQLiteParser.FULL_, SQLiteParser.GLOB_, SQLiteParser.GROUP_, SQLiteParser.HAVING_, SQLiteParser.IF_, SQLiteParser.IGNORE_, SQLiteParser.IMMEDIATE_, SQLiteParser.IN_, SQLiteParser.INDEX_, SQLiteParser.INDEXED_, SQLiteParser.INITIALLY_, SQLiteParser.INNER_, SQLiteParser.INSERT_, SQLiteParser.INSTEAD_, SQLiteParser.INTERSECT_, SQLiteParser.INTO_, SQLiteParser.IS_, SQLiteParser.ISNULL_, SQLiteParser.JOIN_, SQLiteParser.KEY_, SQLiteParser.LEFT_, SQLiteParser.LIKE_, SQLiteParser.LIMIT_, SQLiteParser.MATCH_, SQLiteParser.NATURAL_, SQLiteParser.NO_, SQLiteParser.NOT_, SQLiteParser.NOTNULL_, SQLiteParser.NULL_, SQLiteParser.OF_, SQLiteParser.OFFSET_, SQLiteParser.ON_, SQLiteParser.OR_, SQLiteParser.ORDER_, SQLiteParser.OUTER_, SQLiteParser.PLAN_, SQLiteParser.PRAGMA_, SQLiteParser.PRIMARY_, SQLiteParser.QUERY_, SQLiteParser.RAISE_, SQLiteParser.RECURSIVE_, SQLiteParser.REFERENCES_, SQLiteParser.REGEXP_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.RENAME_, SQLiteParser.REPLACE_, SQLiteParser.RESTRICT_, SQLiteParser.RIGHT_, SQLiteParser.ROLLBACK_, SQLiteParser.ROW_, SQLiteParser.ROWS_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.SET_, SQLiteParser.TABLE_, SQLiteParser.TEMP_, SQLiteParser.TEMPORARY_, SQLiteParser.THEN_, SQLiteParser.TO_, SQLiteParser.TRANSACTION_, SQLiteParser.TRIGGER_, SQLiteParser.UNION_, SQLiteParser.UNIQUE_, SQLiteParser.UPDATE_, SQLiteParser.USING_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.VIEW_, SQLiteParser.VIRTUAL_, SQLiteParser.WHEN_, SQLiteParser.WHERE_, SQLiteParser.WITH_, SQLiteParser.WITHOUT_, SQLiteParser.FIRST_VALUE_, SQLiteParser.OVER_, SQLiteParser.PARTITION_, SQLiteParser.RANGE_, SQLiteParser.PRECEDING_, SQLiteParser.UNBOUNDED_, SQLiteParser.CURRENT_, SQLiteParser.FOLLOWING_, SQLiteParser.CUME_DIST_, SQLiteParser.DENSE_RANK_, SQLiteParser.LAG_, SQLiteParser.LAST_VALUE_, SQLiteParser.LEAD_, SQLiteParser.NTH_VALUE_, SQLiteParser.NTILE_, SQLiteParser.PERCENT_RANK_, SQLiteParser.RANK_, SQLiteParser.ROW_NUMBER_, SQLiteParser.GENERATED_, SQLiteParser.ALWAYS_, SQLiteParser.STORED_, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW_, SQLiteParser.NULLS_, SQLiteParser.FIRST_, SQLiteParser.LAST_, SQLiteParser.FILTER_, SQLiteParser.GROUPS_, SQLiteParser.EXCLUDE_, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1732
                    self.match(SQLiteParser.DISTINCT_)


                self.state = 1735
                self.expr(0)
                self.state = 1740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1736
                    self.match(SQLiteParser.COMMA)
                    self.state = 1737
                    self.expr(0)
                    self.state = 1742
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1743
                self.match(SQLiteParser.STAR)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
            self.state = 1746
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FILTER_:
                self.state = 1747
                self.filter_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_function(self):
            return self.getTypedRuleContext(SQLiteParser.Window_functionContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def window_defn(self):
            return self.getTypedRuleContext(SQLiteParser.Window_defnContext,0)


        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function_invocation" ):
                listener.enterWindow_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function_invocation" ):
                listener.exitWindow_function_invocation(self)




    def window_function_invocation(self):

        localctx = SQLiteParser.Window_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_window_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1750
            self.window_function()
            self.state = 1751
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1761
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT_, SQLiteParser.ACTION_, SQLiteParser.ADD_, SQLiteParser.AFTER_, SQLiteParser.ALL_, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.AND_, SQLiteParser.AS_, SQLiteParser.ASC_, SQLiteParser.ATTACH_, SQLiteParser.AUTOINCREMENT_, SQLiteParser.BEFORE_, SQLiteParser.BEGIN_, SQLiteParser.BETWEEN_, SQLiteParser.BY_, SQLiteParser.CASCADE_, SQLiteParser.CASE_, SQLiteParser.CAST_, SQLiteParser.CHECK_, SQLiteParser.COLLATE_, SQLiteParser.COLUMN_, SQLiteParser.COMMIT_, SQLiteParser.CONFLICT_, SQLiteParser.CONSTRAINT_, SQLiteParser.CREATE_, SQLiteParser.CROSS_, SQLiteParser.CURRENT_DATE_, SQLiteParser.CURRENT_TIME_, SQLiteParser.CURRENT_TIMESTAMP_, SQLiteParser.DATABASE_, SQLiteParser.DEFAULT_, SQLiteParser.DEFERRABLE_, SQLiteParser.DEFERRED_, SQLiteParser.DELETE_, SQLiteParser.DESC_, SQLiteParser.DETACH_, SQLiteParser.DISTINCT_, SQLiteParser.DROP_, SQLiteParser.EACH_, SQLiteParser.ELSE_, SQLiteParser.END_, SQLiteParser.ESCAPE_, SQLiteParser.EXCEPT_, SQLiteParser.EXCLUSIVE_, SQLiteParser.EXISTS_, SQLiteParser.EXPLAIN_, SQLiteParser.FAIL_, SQLiteParser.FOR_, SQLiteParser.FOREIGN_, SQLiteParser.FROM_, SQLiteParser.FULL_, SQLiteParser.GLOB_, SQLiteParser.GROUP_, SQLiteParser.HAVING_, SQLiteParser.IF_, SQLiteParser.IGNORE_, SQLiteParser.IMMEDIATE_, SQLiteParser.IN_, SQLiteParser.INDEX_, SQLiteParser.INDEXED_, SQLiteParser.INITIALLY_, SQLiteParser.INNER_, SQLiteParser.INSERT_, SQLiteParser.INSTEAD_, SQLiteParser.INTERSECT_, SQLiteParser.INTO_, SQLiteParser.IS_, SQLiteParser.ISNULL_, SQLiteParser.JOIN_, SQLiteParser.KEY_, SQLiteParser.LEFT_, SQLiteParser.LIKE_, SQLiteParser.LIMIT_, SQLiteParser.MATCH_, SQLiteParser.NATURAL_, SQLiteParser.NO_, SQLiteParser.NOT_, SQLiteParser.NOTNULL_, SQLiteParser.NULL_, SQLiteParser.OF_, SQLiteParser.OFFSET_, SQLiteParser.ON_, SQLiteParser.OR_, SQLiteParser.ORDER_, SQLiteParser.OUTER_, SQLiteParser.PLAN_, SQLiteParser.PRAGMA_, SQLiteParser.PRIMARY_, SQLiteParser.QUERY_, SQLiteParser.RAISE_, SQLiteParser.RECURSIVE_, SQLiteParser.REFERENCES_, SQLiteParser.REGEXP_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.RENAME_, SQLiteParser.REPLACE_, SQLiteParser.RESTRICT_, SQLiteParser.RIGHT_, SQLiteParser.ROLLBACK_, SQLiteParser.ROW_, SQLiteParser.ROWS_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.SET_, SQLiteParser.TABLE_, SQLiteParser.TEMP_, SQLiteParser.TEMPORARY_, SQLiteParser.THEN_, SQLiteParser.TO_, SQLiteParser.TRANSACTION_, SQLiteParser.TRIGGER_, SQLiteParser.UNION_, SQLiteParser.UNIQUE_, SQLiteParser.UPDATE_, SQLiteParser.USING_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.VIEW_, SQLiteParser.VIRTUAL_, SQLiteParser.WHEN_, SQLiteParser.WHERE_, SQLiteParser.WITH_, SQLiteParser.WITHOUT_, SQLiteParser.FIRST_VALUE_, SQLiteParser.OVER_, SQLiteParser.PARTITION_, SQLiteParser.RANGE_, SQLiteParser.PRECEDING_, SQLiteParser.UNBOUNDED_, SQLiteParser.CURRENT_, SQLiteParser.FOLLOWING_, SQLiteParser.CUME_DIST_, SQLiteParser.DENSE_RANK_, SQLiteParser.LAG_, SQLiteParser.LAST_VALUE_, SQLiteParser.LEAD_, SQLiteParser.NTH_VALUE_, SQLiteParser.NTILE_, SQLiteParser.PERCENT_RANK_, SQLiteParser.RANK_, SQLiteParser.ROW_NUMBER_, SQLiteParser.GENERATED_, SQLiteParser.ALWAYS_, SQLiteParser.STORED_, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW_, SQLiteParser.NULLS_, SQLiteParser.FIRST_, SQLiteParser.LAST_, SQLiteParser.FILTER_, SQLiteParser.GROUPS_, SQLiteParser.EXCLUDE_, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1752
                self.expr(0)
                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1753
                    self.match(SQLiteParser.COMMA)
                    self.state = 1754
                    self.expr(0)
                    self.state = 1759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1760
                self.match(SQLiteParser.STAR)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
            self.state = 1763
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FILTER_:
                self.state = 1764
                self.filter_clause()


            self.state = 1767
            self.match(SQLiteParser.OVER_)
            self.state = 1770
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 1768
                self.window_defn()
                pass

            elif la_ == 2:
                self.state = 1769
                self.window_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH_(self):
            return self.getToken(SQLiteParser.WITH_, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def RECURSIVE_(self):
            return self.getToken(SQLiteParser.RECURSIVE_, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_stmt" ):
                listener.enterCommon_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_stmt" ):
                listener.exitCommon_table_stmt(self)




    def common_table_stmt(self):

        localctx = SQLiteParser.Common_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_common_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1772
            self.match(SQLiteParser.WITH_)
            self.state = 1774
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.state = 1773
                self.match(SQLiteParser.RECURSIVE_)


            self.state = 1776
            self.common_table_expression()
            self.state = 1781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1777
                self.match(SQLiteParser.COMMA)
                self.state = 1778
                self.common_table_expression()
                self.state = 1783
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_stmt" ):
                listener.enterOrder_by_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_stmt" ):
                listener.exitOrder_by_stmt(self)




    def order_by_stmt(self):

        localctx = SQLiteParser.Order_by_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_order_by_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self.match(SQLiteParser.ORDER_)
            self.state = 1785
            self.match(SQLiteParser.BY_)
            self.state = 1786
            self.ordering_term()
            self.state = 1791
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1787
                self.match(SQLiteParser.COMMA)
                self.state = 1788
                self.ordering_term()
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT_(self):
            return self.getToken(SQLiteParser.LIMIT_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def OFFSET_(self):
            return self.getToken(SQLiteParser.OFFSET_, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_limit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_stmt" ):
                listener.enterLimit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_stmt" ):
                listener.exitLimit_stmt(self)




    def limit_stmt(self):

        localctx = SQLiteParser.Limit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_limit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1794
            self.match(SQLiteParser.LIMIT_)
            self.state = 1795
            self.expr(0)
            self.state = 1798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COMMA or _la==SQLiteParser.OFFSET_:
                self.state = 1796
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.OFFSET_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1797
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def NULLS_(self):
            return self.getToken(SQLiteParser.NULLS_, 0)

        def FIRST_(self):
            return self.getToken(SQLiteParser.FIRST_, 0)

        def LAST_(self):
            return self.getToken(SQLiteParser.LAST_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = SQLiteParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1800
            self.expr(0)
            self.state = 1803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COLLATE_:
                self.state = 1801
                self.match(SQLiteParser.COLLATE_)
                self.state = 1802
                self.collation_name()


            self.state = 1806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC_ or _la==SQLiteParser.DESC_:
                self.state = 1805
                self.asc_desc()


            self.state = 1810
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.NULLS_:
                self.state = 1808
                self.match(SQLiteParser.NULLS_)
                self.state = 1809
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.FIRST_ or _la==SQLiteParser.LAST_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC_(self):
            return self.getToken(SQLiteParser.ASC_, 0)

        def DESC_(self):
            return self.getToken(SQLiteParser.DESC_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsc_desc" ):
                listener.enterAsc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsc_desc" ):
                listener.exitAsc_desc(self)




    def asc_desc(self):

        localctx = SQLiteParser.Asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1812
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.ASC_ or _la==SQLiteParser.DESC_):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_leftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def FOLLOWING_(self):
            return self.getToken(SQLiteParser.FOLLOWING_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_left

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_left" ):
                listener.enterFrame_left(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_left" ):
                listener.exitFrame_left(self)




    def frame_left(self):

        localctx = SQLiteParser.Frame_leftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_frame_left)
        try:
            self.state = 1824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1814
                self.expr(0)
                self.state = 1815
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1817
                self.expr(0)
                self.state = 1818
                self.match(SQLiteParser.FOLLOWING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1820
                self.match(SQLiteParser.CURRENT_)
                self.state = 1821
                self.match(SQLiteParser.ROW_)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1822
                self.match(SQLiteParser.UNBOUNDED_)
                self.state = 1823
                self.match(SQLiteParser.PRECEDING_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_rightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def FOLLOWING_(self):
            return self.getToken(SQLiteParser.FOLLOWING_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_right

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_right" ):
                listener.enterFrame_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_right" ):
                listener.exitFrame_right(self)




    def frame_right(self):

        localctx = SQLiteParser.Frame_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_frame_right)
        try:
            self.state = 1836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1826
                self.expr(0)
                self.state = 1827
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1829
                self.expr(0)
                self.state = 1830
                self.match(SQLiteParser.FOLLOWING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1832
                self.match(SQLiteParser.CURRENT_)
                self.state = 1833
                self.match(SQLiteParser.ROW_)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1834
                self.match(SQLiteParser.UNBOUNDED_)
                self.state = 1835
                self.match(SQLiteParser.FOLLOWING_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_single" ):
                listener.enterFrame_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_single" ):
                listener.exitFrame_single(self)




    def frame_single(self):

        localctx = SQLiteParser.Frame_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_frame_single)
        try:
            self.state = 1845
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1838
                self.expr(0)
                self.state = 1839
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1841
                self.match(SQLiteParser.UNBOUNDED_)
                self.state = 1842
                self.match(SQLiteParser.PRECEDING_)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1843
                self.match(SQLiteParser.CURRENT_)
                self.state = 1844
                self.match(SQLiteParser.ROW_)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def order_by_expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_expr_asc_descContext,0)


        def FIRST_VALUE_(self):
            return self.getToken(SQLiteParser.FIRST_VALUE_, 0)

        def LAST_VALUE_(self):
            return self.getToken(SQLiteParser.LAST_VALUE_, 0)

        def partition_by(self):
            return self.getTypedRuleContext(SQLiteParser.Partition_byContext,0)


        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def CUME_DIST_(self):
            return self.getToken(SQLiteParser.CUME_DIST_, 0)

        def PERCENT_RANK_(self):
            return self.getToken(SQLiteParser.PERCENT_RANK_, 0)

        def order_by_expr(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_exprContext,0)


        def DENSE_RANK_(self):
            return self.getToken(SQLiteParser.DENSE_RANK_, 0)

        def RANK_(self):
            return self.getToken(SQLiteParser.RANK_, 0)

        def ROW_NUMBER_(self):
            return self.getToken(SQLiteParser.ROW_NUMBER_, 0)

        def LAG_(self):
            return self.getToken(SQLiteParser.LAG_, 0)

        def LEAD_(self):
            return self.getToken(SQLiteParser.LEAD_, 0)

        def of_OF_fset(self):
            return self.getTypedRuleContext(SQLiteParser.Of_OF_fsetContext,0)


        def default_DEFAULT__value(self):
            return self.getTypedRuleContext(SQLiteParser.Default_DEFAULT__valueContext,0)


        def NTH_VALUE_(self):
            return self.getToken(SQLiteParser.NTH_VALUE_, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def NTILE_(self):
            return self.getToken(SQLiteParser.NTILE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function" ):
                listener.enterWindow_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function" ):
                listener.exitWindow_function(self)




    def window_function(self):

        localctx = SQLiteParser.Window_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_window_function)
        self._la = 0 # Token type
        try:
            self.state = 1932
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.FIRST_VALUE_, SQLiteParser.LAST_VALUE_]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1847
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.FIRST_VALUE_ or _la==SQLiteParser.LAST_VALUE_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1848
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1849
                self.expr(0)
                self.state = 1850
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1851
                self.match(SQLiteParser.OVER_)
                self.state = 1852
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1853
                    self.partition_by()


                self.state = 1856
                self.order_by_expr_asc_desc()
                self.state = 1858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS_ - 127)) | (1 << (SQLiteParser.RANGE_ - 127)) | (1 << (SQLiteParser.GROUPS_ - 127)))) != 0):
                    self.state = 1857
                    self.frame_clause()


                self.state = 1860
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.CUME_DIST_, SQLiteParser.PERCENT_RANK_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1862
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.CUME_DIST_ or _la==SQLiteParser.PERCENT_RANK_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1863
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1864
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1865
                self.match(SQLiteParser.OVER_)
                self.state = 1866
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1867
                    self.partition_by()


                self.state = 1871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER_:
                    self.state = 1870
                    self.order_by_expr()


                self.state = 1873
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.DENSE_RANK_, SQLiteParser.RANK_, SQLiteParser.ROW_NUMBER_]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1874
                _la = self._input.LA(1)
                if not(((((_la - 159)) & ~0x3f) == 0 and ((1 << (_la - 159)) & ((1 << (SQLiteParser.DENSE_RANK_ - 159)) | (1 << (SQLiteParser.RANK_ - 159)) | (1 << (SQLiteParser.ROW_NUMBER_ - 159)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1875
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1876
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1877
                self.match(SQLiteParser.OVER_)
                self.state = 1878
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1879
                    self.partition_by()


                self.state = 1882
                self.order_by_expr_asc_desc()
                self.state = 1883
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.LAG_, SQLiteParser.LEAD_]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1885
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.LAG_ or _la==SQLiteParser.LEAD_):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1886
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1887
                self.expr(0)
                self.state = 1889
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                if la_ == 1:
                    self.state = 1888
                    self.of_OF_fset()


                self.state = 1892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA:
                    self.state = 1891
                    self.default_DEFAULT__value()


                self.state = 1894
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1895
                self.match(SQLiteParser.OVER_)
                self.state = 1896
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1897
                    self.partition_by()


                self.state = 1900
                self.order_by_expr_asc_desc()
                self.state = 1901
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.NTH_VALUE_]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1903
                self.match(SQLiteParser.NTH_VALUE_)
                self.state = 1904
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1905
                self.expr(0)
                self.state = 1906
                self.match(SQLiteParser.COMMA)
                self.state = 1907
                self.signed_number()
                self.state = 1908
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1909
                self.match(SQLiteParser.OVER_)
                self.state = 1910
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1911
                    self.partition_by()


                self.state = 1914
                self.order_by_expr_asc_desc()
                self.state = 1916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 127)) & ~0x3f) == 0 and ((1 << (_la - 127)) & ((1 << (SQLiteParser.ROWS_ - 127)) | (1 << (SQLiteParser.RANGE_ - 127)) | (1 << (SQLiteParser.GROUPS_ - 127)))) != 0):
                    self.state = 1915
                    self.frame_clause()


                self.state = 1918
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.NTILE_]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1920
                self.match(SQLiteParser.NTILE_)
                self.state = 1921
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1922
                self.expr(0)
                self.state = 1923
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1924
                self.match(SQLiteParser.OVER_)
                self.state = 1925
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION_:
                    self.state = 1926
                    self.partition_by()


                self.state = 1929
                self.order_by_expr_asc_desc()
                self.state = 1930
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Of_OF_fsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_of_OF_fset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOf_OF_fset" ):
                listener.enterOf_OF_fset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOf_OF_fset" ):
                listener.exitOf_OF_fset(self)




    def of_OF_fset(self):

        localctx = SQLiteParser.Of_OF_fsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_of_OF_fset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            self.match(SQLiteParser.COMMA)
            self.state = 1935
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_DEFAULT__valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_default_DEFAULT__value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_DEFAULT__value" ):
                listener.enterDefault_DEFAULT__value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_DEFAULT__value" ):
                listener.exitDefault_DEFAULT__value(self)




    def default_DEFAULT__value(self):

        localctx = SQLiteParser.Default_DEFAULT__valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_default_DEFAULT__value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1937
            self.match(SQLiteParser.COMMA)
            self.state = 1938
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by" ):
                listener.enterPartition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by" ):
                listener.exitPartition_by(self)




    def partition_by(self):

        localctx = SQLiteParser.Partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_partition_by)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1940
            self.match(SQLiteParser.PARTITION_)
            self.state = 1941
            self.match(SQLiteParser.BY_)
            self.state = 1943 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1942
                    self.expr(0)

                else:
                    raise NoViableAltException(self)
                self.state = 1945 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,282,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr" ):
                listener.enterOrder_by_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr" ):
                listener.exitOrder_by_expr(self)




    def order_by_expr(self):

        localctx = SQLiteParser.Order_by_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_order_by_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.match(SQLiteParser.ORDER_)
            self.state = 1948
            self.match(SQLiteParser.BY_)
            self.state = 1950 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1949
                self.expr(0)
                self.state = 1952 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.ABORT_) | (1 << SQLiteParser.ACTION_) | (1 << SQLiteParser.ADD_) | (1 << SQLiteParser.AFTER_) | (1 << SQLiteParser.ALL_) | (1 << SQLiteParser.ALTER_) | (1 << SQLiteParser.ANALYZE_) | (1 << SQLiteParser.AND_) | (1 << SQLiteParser.AS_) | (1 << SQLiteParser.ASC_) | (1 << SQLiteParser.ATTACH_) | (1 << SQLiteParser.AUTOINCREMENT_) | (1 << SQLiteParser.BEFORE_) | (1 << SQLiteParser.BEGIN_) | (1 << SQLiteParser.BETWEEN_) | (1 << SQLiteParser.BY_) | (1 << SQLiteParser.CASCADE_) | (1 << SQLiteParser.CASE_) | (1 << SQLiteParser.CAST_) | (1 << SQLiteParser.CHECK_) | (1 << SQLiteParser.COLLATE_) | (1 << SQLiteParser.COLUMN_) | (1 << SQLiteParser.COMMIT_) | (1 << SQLiteParser.CONFLICT_) | (1 << SQLiteParser.CONSTRAINT_) | (1 << SQLiteParser.CREATE_) | (1 << SQLiteParser.CROSS_) | (1 << SQLiteParser.CURRENT_DATE_) | (1 << SQLiteParser.CURRENT_TIME_) | (1 << SQLiteParser.CURRENT_TIMESTAMP_) | (1 << SQLiteParser.DATABASE_) | (1 << SQLiteParser.DEFAULT_) | (1 << SQLiteParser.DEFERRABLE_) | (1 << SQLiteParser.DEFERRED_) | (1 << SQLiteParser.DELETE_) | (1 << SQLiteParser.DESC_) | (1 << SQLiteParser.DETACH_) | (1 << SQLiteParser.DISTINCT_) | (1 << SQLiteParser.DROP_))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.EACH_ - 64)) | (1 << (SQLiteParser.ELSE_ - 64)) | (1 << (SQLiteParser.END_ - 64)) | (1 << (SQLiteParser.ESCAPE_ - 64)) | (1 << (SQLiteParser.EXCEPT_ - 64)) | (1 << (SQLiteParser.EXCLUSIVE_ - 64)) | (1 << (SQLiteParser.EXISTS_ - 64)) | (1 << (SQLiteParser.EXPLAIN_ - 64)) | (1 << (SQLiteParser.FAIL_ - 64)) | (1 << (SQLiteParser.FOR_ - 64)) | (1 << (SQLiteParser.FOREIGN_ - 64)) | (1 << (SQLiteParser.FROM_ - 64)) | (1 << (SQLiteParser.FULL_ - 64)) | (1 << (SQLiteParser.GLOB_ - 64)) | (1 << (SQLiteParser.GROUP_ - 64)) | (1 << (SQLiteParser.HAVING_ - 64)) | (1 << (SQLiteParser.IF_ - 64)) | (1 << (SQLiteParser.IGNORE_ - 64)) | (1 << (SQLiteParser.IMMEDIATE_ - 64)) | (1 << (SQLiteParser.IN_ - 64)) | (1 << (SQLiteParser.INDEX_ - 64)) | (1 << (SQLiteParser.INDEXED_ - 64)) | (1 << (SQLiteParser.INITIALLY_ - 64)) | (1 << (SQLiteParser.INNER_ - 64)) | (1 << (SQLiteParser.INSERT_ - 64)) | (1 << (SQLiteParser.INSTEAD_ - 64)) | (1 << (SQLiteParser.INTERSECT_ - 64)) | (1 << (SQLiteParser.INTO_ - 64)) | (1 << (SQLiteParser.IS_ - 64)) | (1 << (SQLiteParser.ISNULL_ - 64)) | (1 << (SQLiteParser.JOIN_ - 64)) | (1 << (SQLiteParser.KEY_ - 64)) | (1 << (SQLiteParser.LEFT_ - 64)) | (1 << (SQLiteParser.LIKE_ - 64)) | (1 << (SQLiteParser.LIMIT_ - 64)) | (1 << (SQLiteParser.MATCH_ - 64)) | (1 << (SQLiteParser.NATURAL_ - 64)) | (1 << (SQLiteParser.NO_ - 64)) | (1 << (SQLiteParser.NOT_ - 64)) | (1 << (SQLiteParser.NOTNULL_ - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF_ - 64)) | (1 << (SQLiteParser.OFFSET_ - 64)) | (1 << (SQLiteParser.ON_ - 64)) | (1 << (SQLiteParser.OR_ - 64)) | (1 << (SQLiteParser.ORDER_ - 64)) | (1 << (SQLiteParser.OUTER_ - 64)) | (1 << (SQLiteParser.PLAN_ - 64)) | (1 << (SQLiteParser.PRAGMA_ - 64)) | (1 << (SQLiteParser.PRIMARY_ - 64)) | (1 << (SQLiteParser.QUERY_ - 64)) | (1 << (SQLiteParser.RAISE_ - 64)) | (1 << (SQLiteParser.RECURSIVE_ - 64)) | (1 << (SQLiteParser.REFERENCES_ - 64)) | (1 << (SQLiteParser.REGEXP_ - 64)) | (1 << (SQLiteParser.REINDEX_ - 64)) | (1 << (SQLiteParser.RELEASE_ - 64)) | (1 << (SQLiteParser.RENAME_ - 64)) | (1 << (SQLiteParser.REPLACE_ - 64)) | (1 << (SQLiteParser.RESTRICT_ - 64)) | (1 << (SQLiteParser.RIGHT_ - 64)) | (1 << (SQLiteParser.ROLLBACK_ - 64)) | (1 << (SQLiteParser.ROW_ - 64)) | (1 << (SQLiteParser.ROWS_ - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.SAVEPOINT_ - 128)) | (1 << (SQLiteParser.SELECT_ - 128)) | (1 << (SQLiteParser.SET_ - 128)) | (1 << (SQLiteParser.TABLE_ - 128)) | (1 << (SQLiteParser.TEMP_ - 128)) | (1 << (SQLiteParser.TEMPORARY_ - 128)) | (1 << (SQLiteParser.THEN_ - 128)) | (1 << (SQLiteParser.TO_ - 128)) | (1 << (SQLiteParser.TRANSACTION_ - 128)) | (1 << (SQLiteParser.TRIGGER_ - 128)) | (1 << (SQLiteParser.UNION_ - 128)) | (1 << (SQLiteParser.UNIQUE_ - 128)) | (1 << (SQLiteParser.UPDATE_ - 128)) | (1 << (SQLiteParser.USING_ - 128)) | (1 << (SQLiteParser.VACUUM_ - 128)) | (1 << (SQLiteParser.VALUES_ - 128)) | (1 << (SQLiteParser.VIEW_ - 128)) | (1 << (SQLiteParser.VIRTUAL_ - 128)) | (1 << (SQLiteParser.WHEN_ - 128)) | (1 << (SQLiteParser.WHERE_ - 128)) | (1 << (SQLiteParser.WITH_ - 128)) | (1 << (SQLiteParser.WITHOUT_ - 128)) | (1 << (SQLiteParser.FIRST_VALUE_ - 128)) | (1 << (SQLiteParser.OVER_ - 128)) | (1 << (SQLiteParser.PARTITION_ - 128)) | (1 << (SQLiteParser.RANGE_ - 128)) | (1 << (SQLiteParser.PRECEDING_ - 128)) | (1 << (SQLiteParser.UNBOUNDED_ - 128)) | (1 << (SQLiteParser.CURRENT_ - 128)) | (1 << (SQLiteParser.FOLLOWING_ - 128)) | (1 << (SQLiteParser.CUME_DIST_ - 128)) | (1 << (SQLiteParser.DENSE_RANK_ - 128)) | (1 << (SQLiteParser.LAG_ - 128)) | (1 << (SQLiteParser.LAST_VALUE_ - 128)) | (1 << (SQLiteParser.LEAD_ - 128)) | (1 << (SQLiteParser.NTH_VALUE_ - 128)) | (1 << (SQLiteParser.NTILE_ - 128)) | (1 << (SQLiteParser.PERCENT_RANK_ - 128)) | (1 << (SQLiteParser.RANK_ - 128)) | (1 << (SQLiteParser.ROW_NUMBER_ - 128)) | (1 << (SQLiteParser.GENERATED_ - 128)) | (1 << (SQLiteParser.ALWAYS_ - 128)) | (1 << (SQLiteParser.STORED_ - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW_ - 128)) | (1 << (SQLiteParser.NULLS_ - 128)) | (1 << (SQLiteParser.FIRST_ - 128)) | (1 << (SQLiteParser.LAST_ - 128)) | (1 << (SQLiteParser.FILTER_ - 128)) | (1 << (SQLiteParser.GROUPS_ - 128)) | (1 << (SQLiteParser.EXCLUDE_ - 128)) | (1 << (SQLiteParser.IDENTIFIER - 128)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 128)) | (1 << (SQLiteParser.BIND_PARAMETER - 128)) | (1 << (SQLiteParser.STRING_LITERAL - 128)) | (1 << (SQLiteParser.BLOB_LITERAL - 128)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Expr_asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr_asc_desc" ):
                listener.enterOrder_by_expr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr_asc_desc" ):
                listener.exitOrder_by_expr_asc_desc(self)




    def order_by_expr_asc_desc(self):

        localctx = SQLiteParser.Order_by_expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_order_by_expr_asc_desc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1954
            self.match(SQLiteParser.ORDER_)
            self.state = 1955
            self.match(SQLiteParser.BY_)
            self.state = 1956
            self.expr_asc_desc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def asc_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Asc_descContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Asc_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_asc_desc" ):
                listener.enterExpr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_asc_desc" ):
                listener.exitExpr_asc_desc(self)




    def expr_asc_desc(self):

        localctx = SQLiteParser.Expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_expr_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1958
            self.expr(0)
            self.state = 1960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC_ or _la==SQLiteParser.DESC_:
                self.state = 1959
                self.asc_desc()


            self.state = 1969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1962
                self.match(SQLiteParser.COMMA)
                self.state = 1963
                self.expr(0)
                self.state = 1965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ASC_ or _la==SQLiteParser.DESC_:
                    self.state = 1964
                    self.asc_desc()


                self.state = 1971
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initial_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_initial_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitial_select" ):
                listener.enterInitial_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitial_select" ):
                listener.exitInitial_select(self)




    def initial_select(self):

        localctx = SQLiteParser.Initial_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_initial_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1972
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive__selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive__select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive__select" ):
                listener.enterRecursive__select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive__select" ):
                listener.exitRecursive__select(self)




    def recursive__select(self):

        localctx = SQLiteParser.Recursive__selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_recursive__select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1974
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(SQLiteParser.TILDE, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = SQLiteParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1976
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE))) != 0) or _la==SQLiteParser.NOT_):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_messageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_message" ):
                listener.enterError_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_message" ):
                listener.exitError_message(self)




    def error_message(self):

        localctx = SQLiteParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1978
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_argument" ):
                listener.enterModule_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_argument" ):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = SQLiteParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_module_argument)
        try:
            self.state = 1982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1980
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1981
                self.column_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = SQLiteParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT_(self):
            return self.getToken(SQLiteParser.ABORT_, 0)

        def ACTION_(self):
            return self.getToken(SQLiteParser.ACTION_, 0)

        def ADD_(self):
            return self.getToken(SQLiteParser.ADD_, 0)

        def AFTER_(self):
            return self.getToken(SQLiteParser.AFTER_, 0)

        def ALL_(self):
            return self.getToken(SQLiteParser.ALL_, 0)

        def ALTER_(self):
            return self.getToken(SQLiteParser.ALTER_, 0)

        def ANALYZE_(self):
            return self.getToken(SQLiteParser.ANALYZE_, 0)

        def AND_(self):
            return self.getToken(SQLiteParser.AND_, 0)

        def AS_(self):
            return self.getToken(SQLiteParser.AS_, 0)

        def ASC_(self):
            return self.getToken(SQLiteParser.ASC_, 0)

        def ATTACH_(self):
            return self.getToken(SQLiteParser.ATTACH_, 0)

        def AUTOINCREMENT_(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT_, 0)

        def BEFORE_(self):
            return self.getToken(SQLiteParser.BEFORE_, 0)

        def BEGIN_(self):
            return self.getToken(SQLiteParser.BEGIN_, 0)

        def BETWEEN_(self):
            return self.getToken(SQLiteParser.BETWEEN_, 0)

        def BY_(self):
            return self.getToken(SQLiteParser.BY_, 0)

        def CASCADE_(self):
            return self.getToken(SQLiteParser.CASCADE_, 0)

        def CASE_(self):
            return self.getToken(SQLiteParser.CASE_, 0)

        def CAST_(self):
            return self.getToken(SQLiteParser.CAST_, 0)

        def CHECK_(self):
            return self.getToken(SQLiteParser.CHECK_, 0)

        def COLLATE_(self):
            return self.getToken(SQLiteParser.COLLATE_, 0)

        def COLUMN_(self):
            return self.getToken(SQLiteParser.COLUMN_, 0)

        def COMMIT_(self):
            return self.getToken(SQLiteParser.COMMIT_, 0)

        def CONFLICT_(self):
            return self.getToken(SQLiteParser.CONFLICT_, 0)

        def CONSTRAINT_(self):
            return self.getToken(SQLiteParser.CONSTRAINT_, 0)

        def CREATE_(self):
            return self.getToken(SQLiteParser.CREATE_, 0)

        def CROSS_(self):
            return self.getToken(SQLiteParser.CROSS_, 0)

        def CURRENT_DATE_(self):
            return self.getToken(SQLiteParser.CURRENT_DATE_, 0)

        def CURRENT_TIME_(self):
            return self.getToken(SQLiteParser.CURRENT_TIME_, 0)

        def CURRENT_TIMESTAMP_(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP_, 0)

        def DATABASE_(self):
            return self.getToken(SQLiteParser.DATABASE_, 0)

        def DEFAULT_(self):
            return self.getToken(SQLiteParser.DEFAULT_, 0)

        def DEFERRABLE_(self):
            return self.getToken(SQLiteParser.DEFERRABLE_, 0)

        def DEFERRED_(self):
            return self.getToken(SQLiteParser.DEFERRED_, 0)

        def DELETE_(self):
            return self.getToken(SQLiteParser.DELETE_, 0)

        def DESC_(self):
            return self.getToken(SQLiteParser.DESC_, 0)

        def DETACH_(self):
            return self.getToken(SQLiteParser.DETACH_, 0)

        def DISTINCT_(self):
            return self.getToken(SQLiteParser.DISTINCT_, 0)

        def DROP_(self):
            return self.getToken(SQLiteParser.DROP_, 0)

        def EACH_(self):
            return self.getToken(SQLiteParser.EACH_, 0)

        def ELSE_(self):
            return self.getToken(SQLiteParser.ELSE_, 0)

        def END_(self):
            return self.getToken(SQLiteParser.END_, 0)

        def ESCAPE_(self):
            return self.getToken(SQLiteParser.ESCAPE_, 0)

        def EXCEPT_(self):
            return self.getToken(SQLiteParser.EXCEPT_, 0)

        def EXCLUSIVE_(self):
            return self.getToken(SQLiteParser.EXCLUSIVE_, 0)

        def EXISTS_(self):
            return self.getToken(SQLiteParser.EXISTS_, 0)

        def EXPLAIN_(self):
            return self.getToken(SQLiteParser.EXPLAIN_, 0)

        def FAIL_(self):
            return self.getToken(SQLiteParser.FAIL_, 0)

        def FOR_(self):
            return self.getToken(SQLiteParser.FOR_, 0)

        def FOREIGN_(self):
            return self.getToken(SQLiteParser.FOREIGN_, 0)

        def FROM_(self):
            return self.getToken(SQLiteParser.FROM_, 0)

        def FULL_(self):
            return self.getToken(SQLiteParser.FULL_, 0)

        def GLOB_(self):
            return self.getToken(SQLiteParser.GLOB_, 0)

        def GROUP_(self):
            return self.getToken(SQLiteParser.GROUP_, 0)

        def HAVING_(self):
            return self.getToken(SQLiteParser.HAVING_, 0)

        def IF_(self):
            return self.getToken(SQLiteParser.IF_, 0)

        def IGNORE_(self):
            return self.getToken(SQLiteParser.IGNORE_, 0)

        def IMMEDIATE_(self):
            return self.getToken(SQLiteParser.IMMEDIATE_, 0)

        def IN_(self):
            return self.getToken(SQLiteParser.IN_, 0)

        def INDEX_(self):
            return self.getToken(SQLiteParser.INDEX_, 0)

        def INDEXED_(self):
            return self.getToken(SQLiteParser.INDEXED_, 0)

        def INITIALLY_(self):
            return self.getToken(SQLiteParser.INITIALLY_, 0)

        def INNER_(self):
            return self.getToken(SQLiteParser.INNER_, 0)

        def INSERT_(self):
            return self.getToken(SQLiteParser.INSERT_, 0)

        def INSTEAD_(self):
            return self.getToken(SQLiteParser.INSTEAD_, 0)

        def INTERSECT_(self):
            return self.getToken(SQLiteParser.INTERSECT_, 0)

        def INTO_(self):
            return self.getToken(SQLiteParser.INTO_, 0)

        def IS_(self):
            return self.getToken(SQLiteParser.IS_, 0)

        def ISNULL_(self):
            return self.getToken(SQLiteParser.ISNULL_, 0)

        def JOIN_(self):
            return self.getToken(SQLiteParser.JOIN_, 0)

        def KEY_(self):
            return self.getToken(SQLiteParser.KEY_, 0)

        def LEFT_(self):
            return self.getToken(SQLiteParser.LEFT_, 0)

        def LIKE_(self):
            return self.getToken(SQLiteParser.LIKE_, 0)

        def LIMIT_(self):
            return self.getToken(SQLiteParser.LIMIT_, 0)

        def MATCH_(self):
            return self.getToken(SQLiteParser.MATCH_, 0)

        def NATURAL_(self):
            return self.getToken(SQLiteParser.NATURAL_, 0)

        def NO_(self):
            return self.getToken(SQLiteParser.NO_, 0)

        def NOT_(self):
            return self.getToken(SQLiteParser.NOT_, 0)

        def NOTNULL_(self):
            return self.getToken(SQLiteParser.NOTNULL_, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def OF_(self):
            return self.getToken(SQLiteParser.OF_, 0)

        def OFFSET_(self):
            return self.getToken(SQLiteParser.OFFSET_, 0)

        def ON_(self):
            return self.getToken(SQLiteParser.ON_, 0)

        def OR_(self):
            return self.getToken(SQLiteParser.OR_, 0)

        def ORDER_(self):
            return self.getToken(SQLiteParser.ORDER_, 0)

        def OUTER_(self):
            return self.getToken(SQLiteParser.OUTER_, 0)

        def PLAN_(self):
            return self.getToken(SQLiteParser.PLAN_, 0)

        def PRAGMA_(self):
            return self.getToken(SQLiteParser.PRAGMA_, 0)

        def PRIMARY_(self):
            return self.getToken(SQLiteParser.PRIMARY_, 0)

        def QUERY_(self):
            return self.getToken(SQLiteParser.QUERY_, 0)

        def RAISE_(self):
            return self.getToken(SQLiteParser.RAISE_, 0)

        def RECURSIVE_(self):
            return self.getToken(SQLiteParser.RECURSIVE_, 0)

        def REFERENCES_(self):
            return self.getToken(SQLiteParser.REFERENCES_, 0)

        def REGEXP_(self):
            return self.getToken(SQLiteParser.REGEXP_, 0)

        def REINDEX_(self):
            return self.getToken(SQLiteParser.REINDEX_, 0)

        def RELEASE_(self):
            return self.getToken(SQLiteParser.RELEASE_, 0)

        def RENAME_(self):
            return self.getToken(SQLiteParser.RENAME_, 0)

        def REPLACE_(self):
            return self.getToken(SQLiteParser.REPLACE_, 0)

        def RESTRICT_(self):
            return self.getToken(SQLiteParser.RESTRICT_, 0)

        def RIGHT_(self):
            return self.getToken(SQLiteParser.RIGHT_, 0)

        def ROLLBACK_(self):
            return self.getToken(SQLiteParser.ROLLBACK_, 0)

        def ROW_(self):
            return self.getToken(SQLiteParser.ROW_, 0)

        def ROWS_(self):
            return self.getToken(SQLiteParser.ROWS_, 0)

        def SAVEPOINT_(self):
            return self.getToken(SQLiteParser.SAVEPOINT_, 0)

        def SELECT_(self):
            return self.getToken(SQLiteParser.SELECT_, 0)

        def SET_(self):
            return self.getToken(SQLiteParser.SET_, 0)

        def TABLE_(self):
            return self.getToken(SQLiteParser.TABLE_, 0)

        def TEMP_(self):
            return self.getToken(SQLiteParser.TEMP_, 0)

        def TEMPORARY_(self):
            return self.getToken(SQLiteParser.TEMPORARY_, 0)

        def THEN_(self):
            return self.getToken(SQLiteParser.THEN_, 0)

        def TO_(self):
            return self.getToken(SQLiteParser.TO_, 0)

        def TRANSACTION_(self):
            return self.getToken(SQLiteParser.TRANSACTION_, 0)

        def TRIGGER_(self):
            return self.getToken(SQLiteParser.TRIGGER_, 0)

        def UNION_(self):
            return self.getToken(SQLiteParser.UNION_, 0)

        def UNIQUE_(self):
            return self.getToken(SQLiteParser.UNIQUE_, 0)

        def UPDATE_(self):
            return self.getToken(SQLiteParser.UPDATE_, 0)

        def USING_(self):
            return self.getToken(SQLiteParser.USING_, 0)

        def VACUUM_(self):
            return self.getToken(SQLiteParser.VACUUM_, 0)

        def VALUES_(self):
            return self.getToken(SQLiteParser.VALUES_, 0)

        def VIEW_(self):
            return self.getToken(SQLiteParser.VIEW_, 0)

        def VIRTUAL_(self):
            return self.getToken(SQLiteParser.VIRTUAL_, 0)

        def WHEN_(self):
            return self.getToken(SQLiteParser.WHEN_, 0)

        def WHERE_(self):
            return self.getToken(SQLiteParser.WHERE_, 0)

        def WITH_(self):
            return self.getToken(SQLiteParser.WITH_, 0)

        def WITHOUT_(self):
            return self.getToken(SQLiteParser.WITHOUT_, 0)

        def FIRST_VALUE_(self):
            return self.getToken(SQLiteParser.FIRST_VALUE_, 0)

        def OVER_(self):
            return self.getToken(SQLiteParser.OVER_, 0)

        def PARTITION_(self):
            return self.getToken(SQLiteParser.PARTITION_, 0)

        def RANGE_(self):
            return self.getToken(SQLiteParser.RANGE_, 0)

        def PRECEDING_(self):
            return self.getToken(SQLiteParser.PRECEDING_, 0)

        def UNBOUNDED_(self):
            return self.getToken(SQLiteParser.UNBOUNDED_, 0)

        def CURRENT_(self):
            return self.getToken(SQLiteParser.CURRENT_, 0)

        def FOLLOWING_(self):
            return self.getToken(SQLiteParser.FOLLOWING_, 0)

        def CUME_DIST_(self):
            return self.getToken(SQLiteParser.CUME_DIST_, 0)

        def DENSE_RANK_(self):
            return self.getToken(SQLiteParser.DENSE_RANK_, 0)

        def LAG_(self):
            return self.getToken(SQLiteParser.LAG_, 0)

        def LAST_VALUE_(self):
            return self.getToken(SQLiteParser.LAST_VALUE_, 0)

        def LEAD_(self):
            return self.getToken(SQLiteParser.LEAD_, 0)

        def NTH_VALUE_(self):
            return self.getToken(SQLiteParser.NTH_VALUE_, 0)

        def NTILE_(self):
            return self.getToken(SQLiteParser.NTILE_, 0)

        def PERCENT_RANK_(self):
            return self.getToken(SQLiteParser.PERCENT_RANK_, 0)

        def RANK_(self):
            return self.getToken(SQLiteParser.RANK_, 0)

        def ROW_NUMBER_(self):
            return self.getToken(SQLiteParser.ROW_NUMBER_, 0)

        def GENERATED_(self):
            return self.getToken(SQLiteParser.GENERATED_, 0)

        def ALWAYS_(self):
            return self.getToken(SQLiteParser.ALWAYS_, 0)

        def STORED_(self):
            return self.getToken(SQLiteParser.STORED_, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def WINDOW_(self):
            return self.getToken(SQLiteParser.WINDOW_, 0)

        def NULLS_(self):
            return self.getToken(SQLiteParser.NULLS_, 0)

        def FIRST_(self):
            return self.getToken(SQLiteParser.FIRST_, 0)

        def LAST_(self):
            return self.getToken(SQLiteParser.LAST_, 0)

        def FILTER_(self):
            return self.getToken(SQLiteParser.FILTER_, 0)

        def GROUPS_(self):
            return self.getToken(SQLiteParser.GROUPS_, 0)

        def EXCLUDE_(self):
            return self.getToken(SQLiteParser.EXCLUDE_, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = SQLiteParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1986
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.ABORT_) | (1 << SQLiteParser.ACTION_) | (1 << SQLiteParser.ADD_) | (1 << SQLiteParser.AFTER_) | (1 << SQLiteParser.ALL_) | (1 << SQLiteParser.ALTER_) | (1 << SQLiteParser.ANALYZE_) | (1 << SQLiteParser.AND_) | (1 << SQLiteParser.AS_) | (1 << SQLiteParser.ASC_) | (1 << SQLiteParser.ATTACH_) | (1 << SQLiteParser.AUTOINCREMENT_) | (1 << SQLiteParser.BEFORE_) | (1 << SQLiteParser.BEGIN_) | (1 << SQLiteParser.BETWEEN_) | (1 << SQLiteParser.BY_) | (1 << SQLiteParser.CASCADE_) | (1 << SQLiteParser.CASE_) | (1 << SQLiteParser.CAST_) | (1 << SQLiteParser.CHECK_) | (1 << SQLiteParser.COLLATE_) | (1 << SQLiteParser.COLUMN_) | (1 << SQLiteParser.COMMIT_) | (1 << SQLiteParser.CONFLICT_) | (1 << SQLiteParser.CONSTRAINT_) | (1 << SQLiteParser.CREATE_) | (1 << SQLiteParser.CROSS_) | (1 << SQLiteParser.CURRENT_DATE_) | (1 << SQLiteParser.CURRENT_TIME_) | (1 << SQLiteParser.CURRENT_TIMESTAMP_) | (1 << SQLiteParser.DATABASE_) | (1 << SQLiteParser.DEFAULT_) | (1 << SQLiteParser.DEFERRABLE_) | (1 << SQLiteParser.DEFERRED_) | (1 << SQLiteParser.DELETE_) | (1 << SQLiteParser.DESC_) | (1 << SQLiteParser.DETACH_) | (1 << SQLiteParser.DISTINCT_) | (1 << SQLiteParser.DROP_))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.EACH_ - 64)) | (1 << (SQLiteParser.ELSE_ - 64)) | (1 << (SQLiteParser.END_ - 64)) | (1 << (SQLiteParser.ESCAPE_ - 64)) | (1 << (SQLiteParser.EXCEPT_ - 64)) | (1 << (SQLiteParser.EXCLUSIVE_ - 64)) | (1 << (SQLiteParser.EXISTS_ - 64)) | (1 << (SQLiteParser.EXPLAIN_ - 64)) | (1 << (SQLiteParser.FAIL_ - 64)) | (1 << (SQLiteParser.FOR_ - 64)) | (1 << (SQLiteParser.FOREIGN_ - 64)) | (1 << (SQLiteParser.FROM_ - 64)) | (1 << (SQLiteParser.FULL_ - 64)) | (1 << (SQLiteParser.GLOB_ - 64)) | (1 << (SQLiteParser.GROUP_ - 64)) | (1 << (SQLiteParser.HAVING_ - 64)) | (1 << (SQLiteParser.IF_ - 64)) | (1 << (SQLiteParser.IGNORE_ - 64)) | (1 << (SQLiteParser.IMMEDIATE_ - 64)) | (1 << (SQLiteParser.IN_ - 64)) | (1 << (SQLiteParser.INDEX_ - 64)) | (1 << (SQLiteParser.INDEXED_ - 64)) | (1 << (SQLiteParser.INITIALLY_ - 64)) | (1 << (SQLiteParser.INNER_ - 64)) | (1 << (SQLiteParser.INSERT_ - 64)) | (1 << (SQLiteParser.INSTEAD_ - 64)) | (1 << (SQLiteParser.INTERSECT_ - 64)) | (1 << (SQLiteParser.INTO_ - 64)) | (1 << (SQLiteParser.IS_ - 64)) | (1 << (SQLiteParser.ISNULL_ - 64)) | (1 << (SQLiteParser.JOIN_ - 64)) | (1 << (SQLiteParser.KEY_ - 64)) | (1 << (SQLiteParser.LEFT_ - 64)) | (1 << (SQLiteParser.LIKE_ - 64)) | (1 << (SQLiteParser.LIMIT_ - 64)) | (1 << (SQLiteParser.MATCH_ - 64)) | (1 << (SQLiteParser.NATURAL_ - 64)) | (1 << (SQLiteParser.NO_ - 64)) | (1 << (SQLiteParser.NOT_ - 64)) | (1 << (SQLiteParser.NOTNULL_ - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF_ - 64)) | (1 << (SQLiteParser.OFFSET_ - 64)) | (1 << (SQLiteParser.ON_ - 64)) | (1 << (SQLiteParser.OR_ - 64)) | (1 << (SQLiteParser.ORDER_ - 64)) | (1 << (SQLiteParser.OUTER_ - 64)) | (1 << (SQLiteParser.PLAN_ - 64)) | (1 << (SQLiteParser.PRAGMA_ - 64)) | (1 << (SQLiteParser.PRIMARY_ - 64)) | (1 << (SQLiteParser.QUERY_ - 64)) | (1 << (SQLiteParser.RAISE_ - 64)) | (1 << (SQLiteParser.RECURSIVE_ - 64)) | (1 << (SQLiteParser.REFERENCES_ - 64)) | (1 << (SQLiteParser.REGEXP_ - 64)) | (1 << (SQLiteParser.REINDEX_ - 64)) | (1 << (SQLiteParser.RELEASE_ - 64)) | (1 << (SQLiteParser.RENAME_ - 64)) | (1 << (SQLiteParser.REPLACE_ - 64)) | (1 << (SQLiteParser.RESTRICT_ - 64)) | (1 << (SQLiteParser.RIGHT_ - 64)) | (1 << (SQLiteParser.ROLLBACK_ - 64)) | (1 << (SQLiteParser.ROW_ - 64)) | (1 << (SQLiteParser.ROWS_ - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.SAVEPOINT_ - 128)) | (1 << (SQLiteParser.SELECT_ - 128)) | (1 << (SQLiteParser.SET_ - 128)) | (1 << (SQLiteParser.TABLE_ - 128)) | (1 << (SQLiteParser.TEMP_ - 128)) | (1 << (SQLiteParser.TEMPORARY_ - 128)) | (1 << (SQLiteParser.THEN_ - 128)) | (1 << (SQLiteParser.TO_ - 128)) | (1 << (SQLiteParser.TRANSACTION_ - 128)) | (1 << (SQLiteParser.TRIGGER_ - 128)) | (1 << (SQLiteParser.UNION_ - 128)) | (1 << (SQLiteParser.UNIQUE_ - 128)) | (1 << (SQLiteParser.UPDATE_ - 128)) | (1 << (SQLiteParser.USING_ - 128)) | (1 << (SQLiteParser.VACUUM_ - 128)) | (1 << (SQLiteParser.VALUES_ - 128)) | (1 << (SQLiteParser.VIEW_ - 128)) | (1 << (SQLiteParser.VIRTUAL_ - 128)) | (1 << (SQLiteParser.WHEN_ - 128)) | (1 << (SQLiteParser.WHERE_ - 128)) | (1 << (SQLiteParser.WITH_ - 128)) | (1 << (SQLiteParser.WITHOUT_ - 128)) | (1 << (SQLiteParser.FIRST_VALUE_ - 128)) | (1 << (SQLiteParser.OVER_ - 128)) | (1 << (SQLiteParser.PARTITION_ - 128)) | (1 << (SQLiteParser.RANGE_ - 128)) | (1 << (SQLiteParser.PRECEDING_ - 128)) | (1 << (SQLiteParser.UNBOUNDED_ - 128)) | (1 << (SQLiteParser.CURRENT_ - 128)) | (1 << (SQLiteParser.FOLLOWING_ - 128)) | (1 << (SQLiteParser.CUME_DIST_ - 128)) | (1 << (SQLiteParser.DENSE_RANK_ - 128)) | (1 << (SQLiteParser.LAG_ - 128)) | (1 << (SQLiteParser.LAST_VALUE_ - 128)) | (1 << (SQLiteParser.LEAD_ - 128)) | (1 << (SQLiteParser.NTH_VALUE_ - 128)) | (1 << (SQLiteParser.NTILE_ - 128)) | (1 << (SQLiteParser.PERCENT_RANK_ - 128)) | (1 << (SQLiteParser.RANK_ - 128)) | (1 << (SQLiteParser.ROW_NUMBER_ - 128)) | (1 << (SQLiteParser.GENERATED_ - 128)) | (1 << (SQLiteParser.ALWAYS_ - 128)) | (1 << (SQLiteParser.STORED_ - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW_ - 128)) | (1 << (SQLiteParser.NULLS_ - 128)) | (1 << (SQLiteParser.FIRST_ - 128)) | (1 << (SQLiteParser.LAST_ - 128)) | (1 << (SQLiteParser.FILTER_ - 128)) | (1 << (SQLiteParser.GROUPS_ - 128)) | (1 << (SQLiteParser.EXCLUDE_ - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = SQLiteParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1988
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = SQLiteParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)




    def schema_name(self):

        localctx = SQLiteParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = SQLiteParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1994
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_index_name" ):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_index_name" ):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = SQLiteParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_new_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_table_name" ):
                listener.enterNew_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_table_name" ):
                listener.exitNew_table_name(self)




    def new_table_name(self):

        localctx = SQLiteParser.New_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_new_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = SQLiteParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = SQLiteParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = SQLiteParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2004
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = SQLiteParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2006
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = SQLiteParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)




    def view_name(self):

        localctx = SQLiteParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2010
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_name" ):
                listener.enterModule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_name" ):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = SQLiteParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2012
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_name" ):
                listener.enterPragma_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_name" ):
                listener.exitPragma_name(self)




    def pragma_name(self):

        localctx = SQLiteParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2014
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)




    def savepoint_name(self):

        localctx = SQLiteParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = SQLiteParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2018
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_transaction_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_name" ):
                listener.enterTransaction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_name" ):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = SQLiteParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_name" ):
                listener.enterWindow_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_name" ):
                listener.exitWindow_name(self)




    def window_name(self):

        localctx = SQLiteParser.Window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)




    def alias(self):

        localctx = SQLiteParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_filename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilename" ):
                listener.enterFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilename" ):
                listener.exitFilename(self)




    def filename(self):

        localctx = SQLiteParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_filename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_base_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_window_name" ):
                listener.enterBase_window_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_window_name" ):
                listener.exitBase_window_name(self)




    def base_window_name(self):

        localctx = SQLiteParser.Base_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_base_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_func" ):
                listener.enterSimple_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_func" ):
                listener.exitSimple_func(self)




    def simple_func(self):

        localctx = SQLiteParser.Simple_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_simple_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_func" ):
                listener.enterAggregate_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_func" ):
                listener.exitAggregate_func(self)




    def aggregate_func(self):

        localctx = SQLiteParser.Aggregate_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_aggregate_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)




    def table_function_name(self):

        localctx = SQLiteParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = SQLiteParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_any_name)
        try:
            self.state = 2043
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2036
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [SQLiteParser.ABORT_, SQLiteParser.ACTION_, SQLiteParser.ADD_, SQLiteParser.AFTER_, SQLiteParser.ALL_, SQLiteParser.ALTER_, SQLiteParser.ANALYZE_, SQLiteParser.AND_, SQLiteParser.AS_, SQLiteParser.ASC_, SQLiteParser.ATTACH_, SQLiteParser.AUTOINCREMENT_, SQLiteParser.BEFORE_, SQLiteParser.BEGIN_, SQLiteParser.BETWEEN_, SQLiteParser.BY_, SQLiteParser.CASCADE_, SQLiteParser.CASE_, SQLiteParser.CAST_, SQLiteParser.CHECK_, SQLiteParser.COLLATE_, SQLiteParser.COLUMN_, SQLiteParser.COMMIT_, SQLiteParser.CONFLICT_, SQLiteParser.CONSTRAINT_, SQLiteParser.CREATE_, SQLiteParser.CROSS_, SQLiteParser.CURRENT_DATE_, SQLiteParser.CURRENT_TIME_, SQLiteParser.CURRENT_TIMESTAMP_, SQLiteParser.DATABASE_, SQLiteParser.DEFAULT_, SQLiteParser.DEFERRABLE_, SQLiteParser.DEFERRED_, SQLiteParser.DELETE_, SQLiteParser.DESC_, SQLiteParser.DETACH_, SQLiteParser.DISTINCT_, SQLiteParser.DROP_, SQLiteParser.EACH_, SQLiteParser.ELSE_, SQLiteParser.END_, SQLiteParser.ESCAPE_, SQLiteParser.EXCEPT_, SQLiteParser.EXCLUSIVE_, SQLiteParser.EXISTS_, SQLiteParser.EXPLAIN_, SQLiteParser.FAIL_, SQLiteParser.FOR_, SQLiteParser.FOREIGN_, SQLiteParser.FROM_, SQLiteParser.FULL_, SQLiteParser.GLOB_, SQLiteParser.GROUP_, SQLiteParser.HAVING_, SQLiteParser.IF_, SQLiteParser.IGNORE_, SQLiteParser.IMMEDIATE_, SQLiteParser.IN_, SQLiteParser.INDEX_, SQLiteParser.INDEXED_, SQLiteParser.INITIALLY_, SQLiteParser.INNER_, SQLiteParser.INSERT_, SQLiteParser.INSTEAD_, SQLiteParser.INTERSECT_, SQLiteParser.INTO_, SQLiteParser.IS_, SQLiteParser.ISNULL_, SQLiteParser.JOIN_, SQLiteParser.KEY_, SQLiteParser.LEFT_, SQLiteParser.LIKE_, SQLiteParser.LIMIT_, SQLiteParser.MATCH_, SQLiteParser.NATURAL_, SQLiteParser.NO_, SQLiteParser.NOT_, SQLiteParser.NOTNULL_, SQLiteParser.NULL_, SQLiteParser.OF_, SQLiteParser.OFFSET_, SQLiteParser.ON_, SQLiteParser.OR_, SQLiteParser.ORDER_, SQLiteParser.OUTER_, SQLiteParser.PLAN_, SQLiteParser.PRAGMA_, SQLiteParser.PRIMARY_, SQLiteParser.QUERY_, SQLiteParser.RAISE_, SQLiteParser.RECURSIVE_, SQLiteParser.REFERENCES_, SQLiteParser.REGEXP_, SQLiteParser.REINDEX_, SQLiteParser.RELEASE_, SQLiteParser.RENAME_, SQLiteParser.REPLACE_, SQLiteParser.RESTRICT_, SQLiteParser.RIGHT_, SQLiteParser.ROLLBACK_, SQLiteParser.ROW_, SQLiteParser.ROWS_, SQLiteParser.SAVEPOINT_, SQLiteParser.SELECT_, SQLiteParser.SET_, SQLiteParser.TABLE_, SQLiteParser.TEMP_, SQLiteParser.TEMPORARY_, SQLiteParser.THEN_, SQLiteParser.TO_, SQLiteParser.TRANSACTION_, SQLiteParser.TRIGGER_, SQLiteParser.UNION_, SQLiteParser.UNIQUE_, SQLiteParser.UPDATE_, SQLiteParser.USING_, SQLiteParser.VACUUM_, SQLiteParser.VALUES_, SQLiteParser.VIEW_, SQLiteParser.VIRTUAL_, SQLiteParser.WHEN_, SQLiteParser.WHERE_, SQLiteParser.WITH_, SQLiteParser.WITHOUT_, SQLiteParser.FIRST_VALUE_, SQLiteParser.OVER_, SQLiteParser.PARTITION_, SQLiteParser.RANGE_, SQLiteParser.PRECEDING_, SQLiteParser.UNBOUNDED_, SQLiteParser.CURRENT_, SQLiteParser.FOLLOWING_, SQLiteParser.CUME_DIST_, SQLiteParser.DENSE_RANK_, SQLiteParser.LAG_, SQLiteParser.LAST_VALUE_, SQLiteParser.LEAD_, SQLiteParser.NTH_VALUE_, SQLiteParser.NTILE_, SQLiteParser.PERCENT_RANK_, SQLiteParser.RANK_, SQLiteParser.ROW_NUMBER_, SQLiteParser.GENERATED_, SQLiteParser.ALWAYS_, SQLiteParser.STORED_, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW_, SQLiteParser.NULLS_, SQLiteParser.FIRST_, SQLiteParser.LAST_, SQLiteParser.FILTER_, SQLiteParser.GROUPS_, SQLiteParser.EXCLUDE_]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2037
                self.keyword()
                pass
            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2038
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2039
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 2040
                self.any_name()
                self.state = 2041
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[32] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         




